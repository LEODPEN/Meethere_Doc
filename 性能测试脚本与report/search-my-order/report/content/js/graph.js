/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 60353.0, "series": [{"data": [[0.0, 27.0], [0.1, 27.0], [0.2, 32.0], [0.3, 36.0], [0.4, 38.0], [0.5, 40.0], [0.6, 43.0], [0.7, 118.0], [0.8, 169.0], [0.9, 235.0], [1.0, 464.0], [1.1, 588.0], [1.2, 673.0], [1.3, 676.0], [1.4, 686.0], [1.5, 694.0], [1.6, 698.0], [1.7, 708.0], [1.8, 709.0], [1.9, 717.0], [2.0, 719.0], [2.1, 721.0], [2.2, 721.0], [2.3, 722.0], [2.4, 725.0], [2.5, 726.0], [2.6, 727.0], [2.7, 728.0], [2.8, 730.0], [2.9, 732.0], [3.0, 733.0], [3.1, 733.0], [3.2, 735.0], [3.3, 735.0], [3.4, 736.0], [3.5, 736.0], [3.6, 736.0], [3.7, 737.0], [3.8, 738.0], [3.9, 739.0], [4.0, 739.0], [4.1, 740.0], [4.2, 741.0], [4.3, 742.0], [4.4, 742.0], [4.5, 743.0], [4.6, 743.0], [4.7, 745.0], [4.8, 745.0], [4.9, 745.0], [5.0, 746.0], [5.1, 747.0], [5.2, 747.0], [5.3, 748.0], [5.4, 748.0], [5.5, 749.0], [5.6, 751.0], [5.7, 752.0], [5.8, 753.0], [5.9, 754.0], [6.0, 755.0], [6.1, 755.0], [6.2, 756.0], [6.3, 756.0], [6.4, 757.0], [6.5, 757.0], [6.6, 758.0], [6.7, 759.0], [6.8, 759.0], [6.9, 761.0], [7.0, 761.0], [7.1, 762.0], [7.2, 762.0], [7.3, 762.0], [7.4, 763.0], [7.5, 763.0], [7.6, 763.0], [7.7, 764.0], [7.8, 765.0], [7.9, 766.0], [8.0, 766.0], [8.1, 767.0], [8.2, 767.0], [8.3, 770.0], [8.4, 771.0], [8.5, 773.0], [8.6, 774.0], [8.7, 775.0], [8.8, 776.0], [8.9, 776.0], [9.0, 778.0], [9.1, 778.0], [9.2, 781.0], [9.3, 781.0], [9.4, 782.0], [9.5, 783.0], [9.6, 785.0], [9.7, 787.0], [9.8, 788.0], [9.9, 788.0], [10.0, 789.0], [10.1, 789.0], [10.2, 790.0], [10.3, 790.0], [10.4, 791.0], [10.5, 791.0], [10.6, 791.0], [10.7, 792.0], [10.8, 792.0], [10.9, 793.0], [11.0, 793.0], [11.1, 794.0], [11.2, 795.0], [11.3, 798.0], [11.4, 800.0], [11.5, 802.0], [11.6, 806.0], [11.7, 807.0], [11.8, 808.0], [11.9, 810.0], [12.0, 812.0], [12.1, 812.0], [12.2, 812.0], [12.3, 813.0], [12.4, 814.0], [12.5, 816.0], [12.6, 817.0], [12.7, 817.0], [12.8, 818.0], [12.9, 820.0], [13.0, 821.0], [13.1, 823.0], [13.2, 827.0], [13.3, 828.0], [13.4, 829.0], [13.5, 830.0], [13.6, 832.0], [13.7, 834.0], [13.8, 835.0], [13.9, 836.0], [14.0, 837.0], [14.1, 839.0], [14.2, 839.0], [14.3, 839.0], [14.4, 840.0], [14.5, 840.0], [14.6, 845.0], [14.7, 846.0], [14.8, 847.0], [14.9, 849.0], [15.0, 849.0], [15.1, 850.0], [15.2, 850.0], [15.3, 851.0], [15.4, 853.0], [15.5, 856.0], [15.6, 857.0], [15.7, 866.0], [15.8, 866.0], [15.9, 868.0], [16.0, 869.0], [16.1, 871.0], [16.2, 872.0], [16.3, 872.0], [16.4, 877.0], [16.5, 879.0], [16.6, 881.0], [16.7, 883.0], [16.8, 885.0], [16.9, 886.0], [17.0, 887.0], [17.1, 887.0], [17.2, 888.0], [17.3, 890.0], [17.4, 892.0], [17.5, 898.0], [17.6, 900.0], [17.7, 903.0], [17.8, 905.0], [17.9, 906.0], [18.0, 907.0], [18.1, 910.0], [18.2, 911.0], [18.3, 912.0], [18.4, 918.0], [18.5, 923.0], [18.6, 929.0], [18.7, 930.0], [18.8, 931.0], [18.9, 933.0], [19.0, 933.0], [19.1, 934.0], [19.2, 936.0], [19.3, 938.0], [19.4, 945.0], [19.5, 965.0], [19.6, 975.0], [19.7, 986.0], [19.8, 991.0], [19.9, 994.0], [20.0, 999.0], [20.1, 1018.0], [20.2, 1037.0], [20.3, 1050.0], [20.4, 1053.0], [20.5, 1056.0], [20.6, 1066.0], [20.7, 1068.0], [20.8, 1076.0], [20.9, 1077.0], [21.0, 1081.0], [21.1, 1085.0], [21.2, 1087.0], [21.3, 1091.0], [21.4, 1096.0], [21.5, 1104.0], [21.6, 1107.0], [21.7, 1110.0], [21.8, 1113.0], [21.9, 1117.0], [22.0, 1119.0], [22.1, 1145.0], [22.2, 1161.0], [22.3, 1170.0], [22.4, 1179.0], [22.5, 1253.0], [22.6, 1280.0], [22.7, 1339.0], [22.8, 1377.0], [22.9, 1394.0], [23.0, 1405.0], [23.1, 1440.0], [23.2, 1453.0], [23.3, 1490.0], [23.4, 1532.0], [23.5, 1591.0], [23.6, 1623.0], [23.7, 1629.0], [23.8, 1633.0], [23.9, 1635.0], [24.0, 1706.0], [24.1, 1730.0], [24.2, 1756.0], [24.3, 1782.0], [24.4, 1849.0], [24.5, 1872.0], [24.6, 1877.0], [24.7, 1882.0], [24.8, 1891.0], [24.9, 1895.0], [25.0, 1902.0], [25.1, 1909.0], [25.2, 1916.0], [25.3, 1944.0], [25.4, 1947.0], [25.5, 1954.0], [25.6, 1959.0], [25.7, 1965.0], [25.8, 1978.0], [25.9, 1995.0], [26.0, 2006.0], [26.1, 2022.0], [26.2, 2026.0], [26.3, 2028.0], [26.4, 2043.0], [26.5, 2188.0], [26.6, 2205.0], [26.7, 2227.0], [26.8, 2257.0], [26.9, 2260.0], [27.0, 2275.0], [27.1, 2279.0], [27.2, 2349.0], [27.3, 2659.0], [27.4, 2671.0], [27.5, 2701.0], [27.6, 2715.0], [27.7, 2733.0], [27.8, 2744.0], [27.9, 2755.0], [28.0, 2794.0], [28.1, 2797.0], [28.2, 2804.0], [28.3, 2812.0], [28.4, 2821.0], [28.5, 2829.0], [28.6, 2840.0], [28.7, 2871.0], [28.8, 2874.0], [28.9, 2883.0], [29.0, 2886.0], [29.1, 2889.0], [29.2, 2891.0], [29.3, 2902.0], [29.4, 2922.0], [29.5, 2926.0], [29.6, 2956.0], [29.7, 2968.0], [29.8, 2997.0], [29.9, 2999.0], [30.0, 3007.0], [30.1, 3037.0], [30.2, 3060.0], [30.3, 3123.0], [30.4, 3137.0], [30.5, 3166.0], [30.6, 3221.0], [30.7, 3352.0], [30.8, 3402.0], [30.9, 3451.0], [31.0, 3458.0], [31.1, 3512.0], [31.2, 3582.0], [31.3, 3607.0], [31.4, 3638.0], [31.5, 3724.0], [31.6, 3764.0], [31.7, 4035.0], [31.8, 4226.0], [31.9, 4392.0], [32.0, 4461.0], [32.1, 4483.0], [32.2, 4496.0], [32.3, 4522.0], [32.4, 4539.0], [32.5, 4623.0], [32.6, 4634.0], [32.7, 4662.0], [32.8, 4734.0], [32.9, 4798.0], [33.0, 5027.0], [33.1, 5173.0], [33.2, 5797.0], [33.3, 6002.0], [33.4, 6380.0], [33.5, 6796.0], [33.6, 6825.0], [33.7, 6854.0], [33.8, 7078.0], [33.9, 7359.0], [34.0, 7489.0], [34.1, 7602.0], [34.2, 7649.0], [34.3, 7707.0], [34.4, 7759.0], [34.5, 7774.0], [34.6, 7813.0], [34.7, 7828.0], [34.8, 7871.0], [34.9, 7914.0], [35.0, 7921.0], [35.1, 8003.0], [35.2, 8018.0], [35.3, 8035.0], [35.4, 8079.0], [35.5, 8131.0], [35.6, 8159.0], [35.7, 8203.0], [35.8, 8221.0], [35.9, 8251.0], [36.0, 8257.0], [36.1, 8260.0], [36.2, 8273.0], [36.3, 8303.0], [36.4, 8343.0], [36.5, 8361.0], [36.6, 8387.0], [36.7, 8399.0], [36.8, 8413.0], [36.9, 8426.0], [37.0, 8436.0], [37.1, 8447.0], [37.2, 8450.0], [37.3, 8463.0], [37.4, 8479.0], [37.5, 8496.0], [37.6, 8536.0], [37.7, 8567.0], [37.8, 8591.0], [37.9, 8602.0], [38.0, 8629.0], [38.1, 8648.0], [38.2, 8661.0], [38.3, 8667.0], [38.4, 8705.0], [38.5, 8790.0], [38.6, 8911.0], [38.7, 8921.0], [38.8, 8946.0], [38.9, 8952.0], [39.0, 9027.0], [39.1, 9051.0], [39.2, 9068.0], [39.3, 9106.0], [39.4, 9262.0], [39.5, 9288.0], [39.6, 9298.0], [39.7, 9323.0], [39.8, 9344.0], [39.9, 9359.0], [40.0, 9366.0], [40.1, 9379.0], [40.2, 9501.0], [40.3, 9519.0], [40.4, 9547.0], [40.5, 9577.0], [40.6, 9605.0], [40.7, 9609.0], [40.8, 9642.0], [40.9, 9686.0], [41.0, 9703.0], [41.1, 9718.0], [41.2, 10010.0], [41.3, 10080.0], [41.4, 10105.0], [41.5, 10135.0], [41.6, 10147.0], [41.7, 10159.0], [41.8, 10514.0], [41.9, 10518.0], [42.0, 10569.0], [42.1, 10571.0], [42.2, 10685.0], [42.3, 10736.0], [42.4, 10742.0], [42.5, 10904.0], [42.6, 10920.0], [42.7, 11032.0], [42.8, 11197.0], [42.9, 11208.0], [43.0, 11235.0], [43.1, 11274.0], [43.2, 11335.0], [43.3, 11359.0], [43.4, 12114.0], [43.5, 12152.0], [43.6, 12277.0], [43.7, 12363.0], [43.8, 12495.0], [43.9, 12871.0], [44.0, 12923.0], [44.1, 12940.0], [44.2, 12958.0], [44.3, 13312.0], [44.4, 13544.0], [44.5, 13577.0], [44.6, 13711.0], [44.7, 13740.0], [44.8, 13746.0], [44.9, 13776.0], [45.0, 13786.0], [45.1, 13840.0], [45.2, 13863.0], [45.3, 13883.0], [45.4, 13893.0], [45.5, 13970.0], [45.6, 14145.0], [45.7, 14242.0], [45.8, 14277.0], [45.9, 14311.0], [46.0, 14395.0], [46.1, 14482.0], [46.2, 14614.0], [46.3, 14689.0], [46.4, 14723.0], [46.5, 14753.0], [46.6, 14762.0], [46.7, 14847.0], [46.8, 14868.0], [46.9, 14891.0], [47.0, 14941.0], [47.1, 14970.0], [47.2, 15237.0], [47.3, 15477.0], [47.4, 15494.0], [47.5, 15523.0], [47.6, 15545.0], [47.7, 15659.0], [47.8, 15672.0], [47.9, 15683.0], [48.0, 15902.0], [48.1, 15964.0], [48.2, 15994.0], [48.3, 16127.0], [48.4, 16268.0], [48.5, 16326.0], [48.6, 16716.0], [48.7, 16772.0], [48.8, 16824.0], [48.9, 16874.0], [49.0, 16991.0], [49.1, 17165.0], [49.2, 17452.0], [49.3, 17516.0], [49.4, 17537.0], [49.5, 17562.0], [49.6, 17571.0], [49.7, 17601.0], [49.8, 17800.0], [49.9, 17896.0], [50.0, 17897.0], [50.1, 17938.0], [50.2, 17950.0], [50.3, 18016.0], [50.4, 18049.0], [50.5, 18070.0], [50.6, 18139.0], [50.7, 18193.0], [50.8, 18512.0], [50.9, 18746.0], [51.0, 18748.0], [51.1, 18936.0], [51.2, 19155.0], [51.3, 19291.0], [51.4, 19347.0], [51.5, 19399.0], [51.6, 19426.0], [51.7, 19505.0], [51.8, 19541.0], [51.9, 19620.0], [52.0, 19643.0], [52.1, 19714.0], [52.2, 19721.0], [52.3, 19786.0], [52.4, 19815.0], [52.5, 19876.0], [52.6, 20079.0], [52.7, 20202.0], [52.8, 20251.0], [52.9, 20270.0], [53.0, 20333.0], [53.1, 20438.0], [53.2, 20474.0], [53.3, 20526.0], [53.4, 20559.0], [53.5, 20631.0], [53.6, 20671.0], [53.7, 20740.0], [53.8, 20880.0], [53.9, 20971.0], [54.0, 20999.0], [54.1, 21005.0], [54.2, 21022.0], [54.3, 21038.0], [54.4, 21053.0], [54.5, 21073.0], [54.6, 21091.0], [54.7, 21108.0], [54.8, 21112.0], [54.9, 21142.0], [55.0, 21159.0], [55.1, 21183.0], [55.2, 21210.0], [55.3, 21224.0], [55.4, 21229.0], [55.5, 21235.0], [55.6, 21252.0], [55.7, 21256.0], [55.8, 21259.0], [55.9, 21279.0], [56.0, 21311.0], [56.1, 21361.0], [56.2, 21491.0], [56.3, 21497.0], [56.4, 21543.0], [56.5, 21596.0], [56.6, 21607.0], [56.7, 21614.0], [56.8, 21657.0], [56.9, 21696.0], [57.0, 21717.0], [57.1, 21737.0], [57.2, 21745.0], [57.3, 21753.0], [57.4, 21782.0], [57.5, 21821.0], [57.6, 21861.0], [57.7, 21937.0], [57.8, 21953.0], [57.9, 21961.0], [58.0, 22005.0], [58.1, 22034.0], [58.2, 22051.0], [58.3, 22145.0], [58.4, 22151.0], [58.5, 22316.0], [58.6, 22344.0], [58.7, 22410.0], [58.8, 22502.0], [58.9, 22506.0], [59.0, 22632.0], [59.1, 22700.0], [59.2, 22751.0], [59.3, 22839.0], [59.4, 22876.0], [59.5, 23285.0], [59.6, 23324.0], [59.7, 23391.0], [59.8, 23421.0], [59.9, 23547.0], [60.0, 23590.0], [60.1, 23598.0], [60.2, 23609.0], [60.3, 23636.0], [60.4, 23806.0], [60.5, 23822.0], [60.6, 23840.0], [60.7, 23849.0], [60.8, 23887.0], [60.9, 23946.0], [61.0, 23966.0], [61.1, 23983.0], [61.2, 24112.0], [61.3, 24170.0], [61.4, 24193.0], [61.5, 24255.0], [61.6, 24263.0], [61.7, 24341.0], [61.8, 24371.0], [61.9, 24388.0], [62.0, 24413.0], [62.1, 24443.0], [62.2, 24496.0], [62.3, 24575.0], [62.4, 24585.0], [62.5, 24599.0], [62.6, 24635.0], [62.7, 24679.0], [62.8, 24861.0], [62.9, 24871.0], [63.0, 25107.0], [63.1, 25265.0], [63.2, 25312.0], [63.3, 25381.0], [63.4, 25413.0], [63.5, 25486.0], [63.6, 25536.0], [63.7, 25569.0], [63.8, 25583.0], [63.9, 25626.0], [64.0, 25696.0], [64.1, 25743.0], [64.2, 25758.0], [64.3, 25763.0], [64.4, 25942.0], [64.5, 26205.0], [64.6, 26228.0], [64.7, 26259.0], [64.8, 26311.0], [64.9, 26315.0], [65.0, 26345.0], [65.1, 26407.0], [65.2, 26463.0], [65.3, 26533.0], [65.4, 26610.0], [65.5, 26751.0], [65.6, 26789.0], [65.7, 26887.0], [65.8, 26945.0], [65.9, 27018.0], [66.0, 27024.0], [66.1, 27053.0], [66.2, 27111.0], [66.3, 27133.0], [66.4, 27151.0], [66.5, 27157.0], [66.6, 27168.0], [66.7, 27179.0], [66.8, 27199.0], [66.9, 27230.0], [67.0, 27258.0], [67.1, 27288.0], [67.2, 27314.0], [67.3, 27319.0], [67.4, 27367.0], [67.5, 27384.0], [67.6, 27434.0], [67.7, 27466.0], [67.8, 27478.0], [67.9, 27534.0], [68.0, 27546.0], [68.1, 27561.0], [68.2, 27586.0], [68.3, 27590.0], [68.4, 27609.0], [68.5, 27635.0], [68.6, 27668.0], [68.7, 27714.0], [68.8, 27723.0], [68.9, 27737.0], [69.0, 27743.0], [69.1, 27756.0], [69.2, 27759.0], [69.3, 27830.0], [69.4, 27847.0], [69.5, 27912.0], [69.6, 27930.0], [69.7, 28002.0], [69.8, 28035.0], [69.9, 28044.0], [70.0, 28096.0], [70.1, 28169.0], [70.2, 28268.0], [70.3, 28285.0], [70.4, 28313.0], [70.5, 28320.0], [70.6, 28333.0], [70.7, 28378.0], [70.8, 28428.0], [70.9, 28475.0], [71.0, 28548.0], [71.1, 28572.0], [71.2, 28598.0], [71.3, 28626.0], [71.4, 28639.0], [71.5, 28643.0], [71.6, 28666.0], [71.7, 28713.0], [71.8, 28724.0], [71.9, 28734.0], [72.0, 28748.0], [72.1, 28812.0], [72.2, 28871.0], [72.3, 28954.0], [72.4, 29435.0], [72.5, 29487.0], [72.6, 29558.0], [72.7, 29606.0], [72.8, 29673.0], [72.9, 30010.0], [73.0, 30604.0], [73.1, 30634.0], [73.2, 30721.0], [73.3, 30766.0], [73.4, 30842.0], [73.5, 30901.0], [73.6, 30916.0], [73.7, 31027.0], [73.8, 31504.0], [73.9, 31520.0], [74.0, 31562.0], [74.1, 31594.0], [74.2, 31682.0], [74.3, 31764.0], [74.4, 31807.0], [74.5, 31902.0], [74.6, 31971.0], [74.7, 32069.0], [74.8, 32176.0], [74.9, 32283.0], [75.0, 32454.0], [75.1, 32487.0], [75.2, 32540.0], [75.3, 32543.0], [75.4, 32599.0], [75.5, 32603.0], [75.6, 32614.0], [75.7, 32668.0], [75.8, 32683.0], [75.9, 32700.0], [76.0, 32711.0], [76.1, 32731.0], [76.2, 32755.0], [76.3, 32824.0], [76.4, 32857.0], [76.5, 32861.0], [76.6, 32941.0], [76.7, 32966.0], [76.8, 33017.0], [76.9, 33039.0], [77.0, 33216.0], [77.1, 33219.0], [77.2, 33319.0], [77.3, 33342.0], [77.4, 33421.0], [77.5, 33492.0], [77.6, 33520.0], [77.7, 33536.0], [77.8, 33574.0], [77.9, 33636.0], [78.0, 33648.0], [78.1, 33661.0], [78.2, 33677.0], [78.3, 33705.0], [78.4, 33730.0], [78.5, 33775.0], [78.6, 33794.0], [78.7, 33821.0], [78.8, 33851.0], [78.9, 33872.0], [79.0, 33922.0], [79.1, 33931.0], [79.2, 33939.0], [79.3, 33942.0], [79.4, 33958.0], [79.5, 33971.0], [79.6, 33972.0], [79.7, 34109.0], [79.8, 34131.0], [79.9, 34142.0], [80.0, 34161.0], [80.1, 34189.0], [80.2, 34193.0], [80.3, 34215.0], [80.4, 34219.0], [80.5, 34241.0], [80.6, 34270.0], [80.7, 34300.0], [80.8, 34350.0], [80.9, 34361.0], [81.0, 34367.0], [81.1, 34377.0], [81.2, 34384.0], [81.3, 34386.0], [81.4, 34391.0], [81.5, 34407.0], [81.6, 34428.0], [81.7, 34443.0], [81.8, 34446.0], [81.9, 34475.0], [82.0, 34481.0], [82.1, 34488.0], [82.2, 34504.0], [82.3, 34526.0], [82.4, 34564.0], [82.5, 34588.0], [82.6, 34596.0], [82.7, 34606.0], [82.8, 34617.0], [82.9, 34632.0], [83.0, 34638.0], [83.1, 34655.0], [83.2, 34659.0], [83.3, 34664.0], [83.4, 34700.0], [83.5, 34725.0], [83.6, 34729.0], [83.7, 34747.0], [83.8, 34771.0], [83.9, 34777.0], [84.0, 34806.0], [84.1, 34807.0], [84.2, 34856.0], [84.3, 34903.0], [84.4, 34933.0], [84.5, 34937.0], [84.6, 34980.0], [84.7, 35075.0], [84.8, 35102.0], [84.9, 35209.0], [85.0, 35214.0], [85.1, 35325.0], [85.2, 35504.0], [85.3, 36238.0], [85.4, 36274.0], [85.5, 36303.0], [85.6, 36627.0], [85.7, 37137.0], [85.8, 37160.0], [85.9, 37235.0], [86.0, 37574.0], [86.1, 37623.0], [86.2, 38010.0], [86.3, 38135.0], [86.4, 38511.0], [86.5, 38534.0], [86.6, 38594.0], [86.7, 38734.0], [86.8, 38851.0], [86.9, 38944.0], [87.0, 39129.0], [87.1, 39213.0], [87.2, 39988.0], [87.3, 40101.0], [87.4, 40137.0], [87.5, 40159.0], [87.6, 40181.0], [87.7, 40280.0], [87.8, 40339.0], [87.9, 40377.0], [88.0, 40537.0], [88.1, 40594.0], [88.2, 40888.0], [88.3, 41030.0], [88.4, 41053.0], [88.5, 41064.0], [88.6, 41072.0], [88.7, 41088.0], [88.8, 41213.0], [88.9, 41249.0], [89.0, 41364.0], [89.1, 41839.0], [89.2, 41860.0], [89.3, 41919.0], [89.4, 42030.0], [89.5, 42045.0], [89.6, 42266.0], [89.7, 42286.0], [89.8, 42412.0], [89.9, 42819.0], [90.0, 43081.0], [90.1, 43142.0], [90.2, 43165.0], [90.3, 43174.0], [90.4, 43269.0], [90.5, 43682.0], [90.6, 44054.0], [90.7, 44258.0], [90.8, 44499.0], [90.9, 44514.0], [91.0, 44527.0], [91.1, 44597.0], [91.2, 44781.0], [91.3, 44893.0], [91.4, 44898.0], [91.5, 45089.0], [91.6, 45104.0], [91.7, 45129.0], [91.8, 45146.0], [91.9, 45172.0], [92.0, 45200.0], [92.1, 45259.0], [92.2, 45326.0], [92.3, 45327.0], [92.4, 45342.0], [92.5, 45382.0], [92.6, 45874.0], [92.7, 46067.0], [92.8, 46160.0], [92.9, 46203.0], [93.0, 46218.0], [93.1, 46299.0], [93.2, 46339.0], [93.3, 46361.0], [93.4, 46365.0], [93.5, 46411.0], [93.6, 46655.0], [93.7, 46679.0], [93.8, 46862.0], [93.9, 47055.0], [94.0, 47071.0], [94.1, 47091.0], [94.2, 47166.0], [94.3, 47185.0], [94.4, 47205.0], [94.5, 47215.0], [94.6, 47426.0], [94.7, 47445.0], [94.8, 47468.0], [94.9, 47642.0], [95.0, 47860.0], [95.1, 47904.0], [95.2, 47926.0], [95.3, 48053.0], [95.4, 48091.0], [95.5, 48111.0], [95.6, 48137.0], [95.7, 48146.0], [95.8, 48159.0], [95.9, 48169.0], [96.0, 48415.0], [96.1, 48839.0], [96.2, 48919.0], [96.3, 49081.0], [96.4, 49139.0], [96.5, 49262.0], [96.6, 49310.0], [96.7, 49342.0], [96.8, 49439.0], [96.9, 49450.0], [97.0, 49486.0], [97.1, 49519.0], [97.2, 49598.0], [97.3, 49747.0], [97.4, 49819.0], [97.5, 49889.0], [97.6, 50032.0], [97.7, 50039.0], [97.8, 50160.0], [97.9, 50303.0], [98.0, 50312.0], [98.1, 50345.0], [98.2, 50357.0], [98.3, 50385.0], [98.4, 50393.0], [98.5, 50415.0], [98.6, 50432.0], [98.7, 50462.0], [98.8, 50697.0], [98.9, 50722.0], [99.0, 51110.0], [99.1, 51277.0], [99.2, 51434.0], [99.3, 51816.0], [99.4, 52289.0], [99.5, 52971.0], [99.6, 53488.0], [99.7, 53663.0], [99.8, 54687.0], [99.9, 54841.0], [100.0, 60353.0]], "isOverall": false, "label": "List Orders", "isController": false}, {"data": [[0.0, 2113.0], [0.1, 2113.0], [0.2, 2113.0], [0.3, 2113.0], [0.4, 2113.0], [0.5, 2113.0], [0.6, 2113.0], [0.7, 2113.0], [0.8, 2113.0], [0.9, 2113.0], [1.0, 2113.0], [1.1, 2113.0], [1.2, 2113.0], [1.3, 2113.0], [1.4, 2113.0], [1.5, 2113.0], [1.6, 2113.0], [1.7, 2113.0], [1.8, 2113.0], [1.9, 2113.0], [2.0, 2113.0], [2.1, 2113.0], [2.2, 2113.0], [2.3, 2113.0], [2.4, 2113.0], [2.5, 2113.0], [2.6, 2113.0], [2.7, 2113.0], [2.8, 2113.0], [2.9, 2113.0], [3.0, 2113.0], [3.1, 2113.0], [3.2, 2113.0], [3.3, 2113.0], [3.4, 2113.0], [3.5, 2113.0], [3.6, 2113.0], [3.7, 2113.0], [3.8, 2113.0], [3.9, 2113.0], [4.0, 2113.0], [4.1, 2113.0], [4.2, 2113.0], [4.3, 2113.0], [4.4, 2113.0], [4.5, 2113.0], [4.6, 2113.0], [4.7, 2113.0], [4.8, 2113.0], [4.9, 2113.0], [5.0, 2113.0], [5.1, 2113.0], [5.2, 2113.0], [5.3, 2113.0], [5.4, 2113.0], [5.5, 2113.0], [5.6, 2113.0], [5.7, 2113.0], [5.8, 2113.0], [5.9, 2113.0], [6.0, 2113.0], [6.1, 2113.0], [6.2, 2113.0], [6.3, 2113.0], [6.4, 2113.0], [6.5, 2113.0], [6.6, 2113.0], [6.7, 2113.0], [6.8, 2113.0], [6.9, 2113.0], [7.0, 2113.0], [7.1, 2113.0], [7.2, 2113.0], [7.3, 2113.0], [7.4, 2113.0], [7.5, 2113.0], [7.6, 2113.0], [7.7, 2113.0], [7.8, 2113.0], [7.9, 2113.0], [8.0, 2113.0], [8.1, 2113.0], [8.2, 2113.0], [8.3, 2113.0], [8.4, 2113.0], [8.5, 2113.0], [8.6, 2113.0], [8.7, 2113.0], [8.8, 2113.0], [8.9, 2113.0], [9.0, 2113.0], [9.1, 2113.0], [9.2, 2113.0], [9.3, 2113.0], [9.4, 2113.0], [9.5, 2113.0], [9.6, 2113.0], [9.7, 2113.0], [9.8, 2113.0], [9.9, 2113.0], [10.0, 2113.0], [10.1, 2113.0], [10.2, 2113.0], [10.3, 2113.0], [10.4, 2113.0], [10.5, 2113.0], [10.6, 2113.0], [10.7, 2113.0], [10.8, 2113.0], [10.9, 2113.0], [11.0, 2113.0], [11.1, 2113.0], [11.2, 2113.0], [11.3, 2113.0], [11.4, 2113.0], [11.5, 2113.0], [11.6, 2113.0], [11.7, 2113.0], [11.8, 2113.0], [11.9, 2113.0], [12.0, 2113.0], [12.1, 2113.0], [12.2, 2113.0], [12.3, 2113.0], [12.4, 2113.0], [12.5, 2113.0], [12.6, 2113.0], [12.7, 2113.0], [12.8, 2113.0], [12.9, 2113.0], [13.0, 2113.0], [13.1, 2113.0], [13.2, 2113.0], [13.3, 2113.0], [13.4, 2113.0], [13.5, 2113.0], [13.6, 2113.0], [13.7, 2113.0], [13.8, 2113.0], [13.9, 2113.0], [14.0, 2113.0], [14.1, 2113.0], [14.2, 2113.0], [14.3, 2113.0], [14.4, 2113.0], [14.5, 2113.0], [14.6, 2113.0], [14.7, 2113.0], [14.8, 2113.0], [14.9, 2113.0], [15.0, 2113.0], [15.1, 2113.0], [15.2, 2113.0], [15.3, 2113.0], [15.4, 2113.0], [15.5, 2113.0], [15.6, 2113.0], [15.7, 2113.0], [15.8, 2113.0], [15.9, 2113.0], [16.0, 2113.0], [16.1, 2113.0], [16.2, 2113.0], [16.3, 2113.0], [16.4, 2113.0], [16.5, 2113.0], [16.6, 2113.0], [16.7, 2113.0], [16.8, 2113.0], [16.9, 2113.0], [17.0, 2113.0], [17.1, 2113.0], [17.2, 2113.0], [17.3, 2113.0], [17.4, 2113.0], [17.5, 2113.0], [17.6, 2113.0], [17.7, 2113.0], [17.8, 2113.0], [17.9, 2113.0], [18.0, 2113.0], [18.1, 2113.0], [18.2, 2113.0], [18.3, 2113.0], [18.4, 2113.0], [18.5, 2113.0], [18.6, 2113.0], [18.7, 2113.0], [18.8, 2113.0], [18.9, 2113.0], [19.0, 2113.0], [19.1, 2113.0], [19.2, 2113.0], [19.3, 2113.0], [19.4, 2113.0], [19.5, 2113.0], [19.6, 2113.0], [19.7, 2113.0], [19.8, 2113.0], [19.9, 2113.0], [20.0, 2113.0], [20.1, 2113.0], [20.2, 2113.0], [20.3, 2113.0], [20.4, 2113.0], [20.5, 2113.0], [20.6, 2113.0], [20.7, 2113.0], [20.8, 2113.0], [20.9, 2113.0], [21.0, 2113.0], [21.1, 2113.0], [21.2, 2113.0], [21.3, 2113.0], [21.4, 2113.0], [21.5, 2113.0], [21.6, 2113.0], [21.7, 2113.0], [21.8, 2113.0], [21.9, 2113.0], [22.0, 2113.0], [22.1, 2113.0], [22.2, 2113.0], [22.3, 2113.0], [22.4, 2113.0], [22.5, 2113.0], [22.6, 2113.0], [22.7, 2113.0], [22.8, 2113.0], [22.9, 2113.0], [23.0, 2113.0], [23.1, 2113.0], [23.2, 2113.0], [23.3, 2113.0], [23.4, 2113.0], [23.5, 2113.0], [23.6, 2113.0], [23.7, 2113.0], [23.8, 2113.0], [23.9, 2113.0], [24.0, 2113.0], [24.1, 2113.0], [24.2, 2113.0], [24.3, 2113.0], [24.4, 2113.0], [24.5, 2113.0], [24.6, 2113.0], [24.7, 2113.0], [24.8, 2113.0], [24.9, 2113.0], [25.0, 2113.0], [25.1, 2113.0], [25.2, 2113.0], [25.3, 2113.0], [25.4, 2113.0], [25.5, 2113.0], [25.6, 2113.0], [25.7, 2113.0], [25.8, 2113.0], [25.9, 2113.0], [26.0, 2113.0], [26.1, 2113.0], [26.2, 2113.0], [26.3, 2113.0], [26.4, 2113.0], [26.5, 2113.0], [26.6, 2113.0], [26.7, 2113.0], [26.8, 2113.0], [26.9, 2113.0], [27.0, 2113.0], [27.1, 2113.0], [27.2, 2113.0], [27.3, 2113.0], [27.4, 2113.0], [27.5, 2113.0], [27.6, 2113.0], [27.7, 2113.0], [27.8, 2113.0], [27.9, 2113.0], [28.0, 2113.0], [28.1, 2113.0], [28.2, 2113.0], [28.3, 2113.0], [28.4, 2113.0], [28.5, 2113.0], [28.6, 2113.0], [28.7, 2113.0], [28.8, 2113.0], [28.9, 2113.0], [29.0, 2113.0], [29.1, 2113.0], [29.2, 2113.0], [29.3, 2113.0], [29.4, 2113.0], [29.5, 2113.0], [29.6, 2113.0], [29.7, 2113.0], [29.8, 2113.0], [29.9, 2113.0], [30.0, 2113.0], [30.1, 2113.0], [30.2, 2113.0], [30.3, 2113.0], [30.4, 2113.0], [30.5, 2113.0], [30.6, 2113.0], [30.7, 2113.0], [30.8, 2113.0], [30.9, 2113.0], [31.0, 2113.0], [31.1, 2113.0], [31.2, 2113.0], [31.3, 2113.0], [31.4, 2113.0], [31.5, 2113.0], [31.6, 2113.0], [31.7, 2113.0], [31.8, 2113.0], [31.9, 2113.0], [32.0, 2113.0], [32.1, 2113.0], [32.2, 2113.0], [32.3, 2113.0], [32.4, 2113.0], [32.5, 2113.0], [32.6, 2113.0], [32.7, 2113.0], [32.8, 2113.0], [32.9, 2113.0], [33.0, 2113.0], [33.1, 2113.0], [33.2, 2113.0], [33.3, 2113.0], [33.4, 2113.0], [33.5, 2113.0], [33.6, 2113.0], [33.7, 2113.0], [33.8, 2113.0], [33.9, 2113.0], [34.0, 2113.0], [34.1, 2113.0], [34.2, 2113.0], [34.3, 2113.0], [34.4, 2113.0], [34.5, 2113.0], [34.6, 2113.0], [34.7, 2113.0], [34.8, 2113.0], [34.9, 2113.0], [35.0, 2113.0], [35.1, 2113.0], [35.2, 2113.0], [35.3, 2113.0], [35.4, 2113.0], [35.5, 2113.0], [35.6, 2113.0], [35.7, 2113.0], [35.8, 2113.0], [35.9, 2113.0], [36.0, 2113.0], [36.1, 2113.0], [36.2, 2113.0], [36.3, 2113.0], [36.4, 2113.0], [36.5, 2113.0], [36.6, 2113.0], [36.7, 2113.0], [36.8, 2113.0], [36.9, 2113.0], [37.0, 2113.0], [37.1, 2113.0], [37.2, 2113.0], [37.3, 2113.0], [37.4, 2113.0], [37.5, 2113.0], [37.6, 2113.0], [37.7, 2113.0], [37.8, 2113.0], [37.9, 2113.0], [38.0, 2113.0], [38.1, 2113.0], [38.2, 2113.0], [38.3, 2113.0], [38.4, 2113.0], [38.5, 2113.0], [38.6, 2113.0], [38.7, 2113.0], [38.8, 2113.0], [38.9, 2113.0], [39.0, 2113.0], [39.1, 2113.0], [39.2, 2113.0], [39.3, 2113.0], [39.4, 2113.0], [39.5, 2113.0], [39.6, 2113.0], [39.7, 2113.0], [39.8, 2113.0], [39.9, 2113.0], [40.0, 2113.0], [40.1, 2113.0], [40.2, 2113.0], [40.3, 2113.0], [40.4, 2113.0], [40.5, 2113.0], [40.6, 2113.0], [40.7, 2113.0], [40.8, 2113.0], [40.9, 2113.0], [41.0, 2113.0], [41.1, 2113.0], [41.2, 2113.0], [41.3, 2113.0], [41.4, 2113.0], [41.5, 2113.0], [41.6, 2113.0], [41.7, 2113.0], [41.8, 2113.0], [41.9, 2113.0], [42.0, 2113.0], [42.1, 2113.0], [42.2, 2113.0], [42.3, 2113.0], [42.4, 2113.0], [42.5, 2113.0], [42.6, 2113.0], [42.7, 2113.0], [42.8, 2113.0], [42.9, 2113.0], [43.0, 2113.0], [43.1, 2113.0], [43.2, 2113.0], [43.3, 2113.0], [43.4, 2113.0], [43.5, 2113.0], [43.6, 2113.0], [43.7, 2113.0], [43.8, 2113.0], [43.9, 2113.0], [44.0, 2113.0], [44.1, 2113.0], [44.2, 2113.0], [44.3, 2113.0], [44.4, 2113.0], [44.5, 2113.0], [44.6, 2113.0], [44.7, 2113.0], [44.8, 2113.0], [44.9, 2113.0], [45.0, 2113.0], [45.1, 2113.0], [45.2, 2113.0], [45.3, 2113.0], [45.4, 2113.0], [45.5, 2113.0], [45.6, 2113.0], [45.7, 2113.0], [45.8, 2113.0], [45.9, 2113.0], [46.0, 2113.0], [46.1, 2113.0], [46.2, 2113.0], [46.3, 2113.0], [46.4, 2113.0], [46.5, 2113.0], [46.6, 2113.0], [46.7, 2113.0], [46.8, 2113.0], [46.9, 2113.0], [47.0, 2113.0], [47.1, 2113.0], [47.2, 2113.0], [47.3, 2113.0], [47.4, 2113.0], [47.5, 2113.0], [47.6, 2113.0], [47.7, 2113.0], [47.8, 2113.0], [47.9, 2113.0], [48.0, 2113.0], [48.1, 2113.0], [48.2, 2113.0], [48.3, 2113.0], [48.4, 2113.0], [48.5, 2113.0], [48.6, 2113.0], [48.7, 2113.0], [48.8, 2113.0], [48.9, 2113.0], [49.0, 2113.0], [49.1, 2113.0], [49.2, 2113.0], [49.3, 2113.0], [49.4, 2113.0], [49.5, 2113.0], [49.6, 2113.0], [49.7, 2113.0], [49.8, 2113.0], [49.9, 2113.0], [50.0, 2113.0], [50.1, 2113.0], [50.2, 2113.0], [50.3, 2113.0], [50.4, 2113.0], [50.5, 2113.0], [50.6, 2113.0], [50.7, 2113.0], [50.8, 2113.0], [50.9, 2113.0], [51.0, 2113.0], [51.1, 2113.0], [51.2, 2113.0], [51.3, 2113.0], [51.4, 2113.0], [51.5, 2113.0], [51.6, 2113.0], [51.7, 2113.0], [51.8, 2113.0], [51.9, 2113.0], [52.0, 2113.0], [52.1, 2113.0], [52.2, 2113.0], [52.3, 2113.0], [52.4, 2113.0], [52.5, 2113.0], [52.6, 2113.0], [52.7, 2113.0], [52.8, 2113.0], [52.9, 2113.0], [53.0, 2113.0], [53.1, 2113.0], [53.2, 2113.0], [53.3, 2113.0], [53.4, 2113.0], [53.5, 2113.0], [53.6, 2113.0], [53.7, 2113.0], [53.8, 2113.0], [53.9, 2113.0], [54.0, 2113.0], [54.1, 2113.0], [54.2, 2113.0], [54.3, 2113.0], [54.4, 2113.0], [54.5, 2113.0], [54.6, 2113.0], [54.7, 2113.0], [54.8, 2113.0], [54.9, 2113.0], [55.0, 2113.0], [55.1, 2113.0], [55.2, 2113.0], [55.3, 2113.0], [55.4, 2113.0], [55.5, 2113.0], [55.6, 2113.0], [55.7, 2113.0], [55.8, 2113.0], [55.9, 2113.0], [56.0, 2113.0], [56.1, 2113.0], [56.2, 2113.0], [56.3, 2113.0], [56.4, 2113.0], [56.5, 2113.0], [56.6, 2113.0], [56.7, 2113.0], [56.8, 2113.0], [56.9, 2113.0], [57.0, 2113.0], [57.1, 2113.0], [57.2, 2113.0], [57.3, 2113.0], [57.4, 2113.0], [57.5, 2113.0], [57.6, 2113.0], [57.7, 2113.0], [57.8, 2113.0], [57.9, 2113.0], [58.0, 2113.0], [58.1, 2113.0], [58.2, 2113.0], [58.3, 2113.0], [58.4, 2113.0], [58.5, 2113.0], [58.6, 2113.0], [58.7, 2113.0], [58.8, 2113.0], [58.9, 2113.0], [59.0, 2113.0], [59.1, 2113.0], [59.2, 2113.0], [59.3, 2113.0], [59.4, 2113.0], [59.5, 2113.0], [59.6, 2113.0], [59.7, 2113.0], [59.8, 2113.0], [59.9, 2113.0], [60.0, 2113.0], [60.1, 2113.0], [60.2, 2113.0], [60.3, 2113.0], [60.4, 2113.0], [60.5, 2113.0], [60.6, 2113.0], [60.7, 2113.0], [60.8, 2113.0], [60.9, 2113.0], [61.0, 2113.0], [61.1, 2113.0], [61.2, 2113.0], [61.3, 2113.0], [61.4, 2113.0], [61.5, 2113.0], [61.6, 2113.0], [61.7, 2113.0], [61.8, 2113.0], [61.9, 2113.0], [62.0, 2113.0], [62.1, 2113.0], [62.2, 2113.0], [62.3, 2113.0], [62.4, 2113.0], [62.5, 2113.0], [62.6, 2113.0], [62.7, 2113.0], [62.8, 2113.0], [62.9, 2113.0], [63.0, 2113.0], [63.1, 2113.0], [63.2, 2113.0], [63.3, 2113.0], [63.4, 2113.0], [63.5, 2113.0], [63.6, 2113.0], [63.7, 2113.0], [63.8, 2113.0], [63.9, 2113.0], [64.0, 2113.0], [64.1, 2113.0], [64.2, 2113.0], [64.3, 2113.0], [64.4, 2113.0], [64.5, 2113.0], [64.6, 2113.0], [64.7, 2113.0], [64.8, 2113.0], [64.9, 2113.0], [65.0, 2113.0], [65.1, 2113.0], [65.2, 2113.0], [65.3, 2113.0], [65.4, 2113.0], [65.5, 2113.0], [65.6, 2113.0], [65.7, 2113.0], [65.8, 2113.0], [65.9, 2113.0], [66.0, 2113.0], [66.1, 2113.0], [66.2, 2113.0], [66.3, 2113.0], [66.4, 2113.0], [66.5, 2113.0], [66.6, 2113.0], [66.7, 2113.0], [66.8, 2113.0], [66.9, 2113.0], [67.0, 2113.0], [67.1, 2113.0], [67.2, 2113.0], [67.3, 2113.0], [67.4, 2113.0], [67.5, 2113.0], [67.6, 2113.0], [67.7, 2113.0], [67.8, 2113.0], [67.9, 2113.0], [68.0, 2113.0], [68.1, 2113.0], [68.2, 2113.0], [68.3, 2113.0], [68.4, 2113.0], [68.5, 2113.0], [68.6, 2113.0], [68.7, 2113.0], [68.8, 2113.0], [68.9, 2113.0], [69.0, 2113.0], [69.1, 2113.0], [69.2, 2113.0], [69.3, 2113.0], [69.4, 2113.0], [69.5, 2113.0], [69.6, 2113.0], [69.7, 2113.0], [69.8, 2113.0], [69.9, 2113.0], [70.0, 2113.0], [70.1, 2113.0], [70.2, 2113.0], [70.3, 2113.0], [70.4, 2113.0], [70.5, 2113.0], [70.6, 2113.0], [70.7, 2113.0], [70.8, 2113.0], [70.9, 2113.0], [71.0, 2113.0], [71.1, 2113.0], [71.2, 2113.0], [71.3, 2113.0], [71.4, 2113.0], [71.5, 2113.0], [71.6, 2113.0], [71.7, 2113.0], [71.8, 2113.0], [71.9, 2113.0], [72.0, 2113.0], [72.1, 2113.0], [72.2, 2113.0], [72.3, 2113.0], [72.4, 2113.0], [72.5, 2113.0], [72.6, 2113.0], [72.7, 2113.0], [72.8, 2113.0], [72.9, 2113.0], [73.0, 2113.0], [73.1, 2113.0], [73.2, 2113.0], [73.3, 2113.0], [73.4, 2113.0], [73.5, 2113.0], [73.6, 2113.0], [73.7, 2113.0], [73.8, 2113.0], [73.9, 2113.0], [74.0, 2113.0], [74.1, 2113.0], [74.2, 2113.0], [74.3, 2113.0], [74.4, 2113.0], [74.5, 2113.0], [74.6, 2113.0], [74.7, 2113.0], [74.8, 2113.0], [74.9, 2113.0], [75.0, 2113.0], [75.1, 2113.0], [75.2, 2113.0], [75.3, 2113.0], [75.4, 2113.0], [75.5, 2113.0], [75.6, 2113.0], [75.7, 2113.0], [75.8, 2113.0], [75.9, 2113.0], [76.0, 2113.0], [76.1, 2113.0], [76.2, 2113.0], [76.3, 2113.0], [76.4, 2113.0], [76.5, 2113.0], [76.6, 2113.0], [76.7, 2113.0], [76.8, 2113.0], [76.9, 2113.0], [77.0, 2113.0], [77.1, 2113.0], [77.2, 2113.0], [77.3, 2113.0], [77.4, 2113.0], [77.5, 2113.0], [77.6, 2113.0], [77.7, 2113.0], [77.8, 2113.0], [77.9, 2113.0], [78.0, 2113.0], [78.1, 2113.0], [78.2, 2113.0], [78.3, 2113.0], [78.4, 2113.0], [78.5, 2113.0], [78.6, 2113.0], [78.7, 2113.0], [78.8, 2113.0], [78.9, 2113.0], [79.0, 2113.0], [79.1, 2113.0], [79.2, 2113.0], [79.3, 2113.0], [79.4, 2113.0], [79.5, 2113.0], [79.6, 2113.0], [79.7, 2113.0], [79.8, 2113.0], [79.9, 2113.0], [80.0, 2113.0], [80.1, 2113.0], [80.2, 2113.0], [80.3, 2113.0], [80.4, 2113.0], [80.5, 2113.0], [80.6, 2113.0], [80.7, 2113.0], [80.8, 2113.0], [80.9, 2113.0], [81.0, 2113.0], [81.1, 2113.0], [81.2, 2113.0], [81.3, 2113.0], [81.4, 2113.0], [81.5, 2113.0], [81.6, 2113.0], [81.7, 2113.0], [81.8, 2113.0], [81.9, 2113.0], [82.0, 2113.0], [82.1, 2113.0], [82.2, 2113.0], [82.3, 2113.0], [82.4, 2113.0], [82.5, 2113.0], [82.6, 2113.0], [82.7, 2113.0], [82.8, 2113.0], [82.9, 2113.0], [83.0, 2113.0], [83.1, 2113.0], [83.2, 2113.0], [83.3, 2113.0], [83.4, 2113.0], [83.5, 2113.0], [83.6, 2113.0], [83.7, 2113.0], [83.8, 2113.0], [83.9, 2113.0], [84.0, 2113.0], [84.1, 2113.0], [84.2, 2113.0], [84.3, 2113.0], [84.4, 2113.0], [84.5, 2113.0], [84.6, 2113.0], [84.7, 2113.0], [84.8, 2113.0], [84.9, 2113.0], [85.0, 2113.0], [85.1, 2113.0], [85.2, 2113.0], [85.3, 2113.0], [85.4, 2113.0], [85.5, 2113.0], [85.6, 2113.0], [85.7, 2113.0], [85.8, 2113.0], [85.9, 2113.0], [86.0, 2113.0], [86.1, 2113.0], [86.2, 2113.0], [86.3, 2113.0], [86.4, 2113.0], [86.5, 2113.0], [86.6, 2113.0], [86.7, 2113.0], [86.8, 2113.0], [86.9, 2113.0], [87.0, 2113.0], [87.1, 2113.0], [87.2, 2113.0], [87.3, 2113.0], [87.4, 2113.0], [87.5, 2113.0], [87.6, 2113.0], [87.7, 2113.0], [87.8, 2113.0], [87.9, 2113.0], [88.0, 2113.0], [88.1, 2113.0], [88.2, 2113.0], [88.3, 2113.0], [88.4, 2113.0], [88.5, 2113.0], [88.6, 2113.0], [88.7, 2113.0], [88.8, 2113.0], [88.9, 2113.0], [89.0, 2113.0], [89.1, 2113.0], [89.2, 2113.0], [89.3, 2113.0], [89.4, 2113.0], [89.5, 2113.0], [89.6, 2113.0], [89.7, 2113.0], [89.8, 2113.0], [89.9, 2113.0], [90.0, 2113.0], [90.1, 2113.0], [90.2, 2113.0], [90.3, 2113.0], [90.4, 2113.0], [90.5, 2113.0], [90.6, 2113.0], [90.7, 2113.0], [90.8, 2113.0], [90.9, 2113.0], [91.0, 2113.0], [91.1, 2113.0], [91.2, 2113.0], [91.3, 2113.0], [91.4, 2113.0], [91.5, 2113.0], [91.6, 2113.0], [91.7, 2113.0], [91.8, 2113.0], [91.9, 2113.0], [92.0, 2113.0], [92.1, 2113.0], [92.2, 2113.0], [92.3, 2113.0], [92.4, 2113.0], [92.5, 2113.0], [92.6, 2113.0], [92.7, 2113.0], [92.8, 2113.0], [92.9, 2113.0], [93.0, 2113.0], [93.1, 2113.0], [93.2, 2113.0], [93.3, 2113.0], [93.4, 2113.0], [93.5, 2113.0], [93.6, 2113.0], [93.7, 2113.0], [93.8, 2113.0], [93.9, 2113.0], [94.0, 2113.0], [94.1, 2113.0], [94.2, 2113.0], [94.3, 2113.0], [94.4, 2113.0], [94.5, 2113.0], [94.6, 2113.0], [94.7, 2113.0], [94.8, 2113.0], [94.9, 2113.0], [95.0, 2113.0], [95.1, 2113.0], [95.2, 2113.0], [95.3, 2113.0], [95.4, 2113.0], [95.5, 2113.0], [95.6, 2113.0], [95.7, 2113.0], [95.8, 2113.0], [95.9, 2113.0], [96.0, 2113.0], [96.1, 2113.0], [96.2, 2113.0], [96.3, 2113.0], [96.4, 2113.0], [96.5, 2113.0], [96.6, 2113.0], [96.7, 2113.0], [96.8, 2113.0], [96.9, 2113.0], [97.0, 2113.0], [97.1, 2113.0], [97.2, 2113.0], [97.3, 2113.0], [97.4, 2113.0], [97.5, 2113.0], [97.6, 2113.0], [97.7, 2113.0], [97.8, 2113.0], [97.9, 2113.0], [98.0, 2113.0], [98.1, 2113.0], [98.2, 2113.0], [98.3, 2113.0], [98.4, 2113.0], [98.5, 2113.0], [98.6, 2113.0], [98.7, 2113.0], [98.8, 2113.0], [98.9, 2113.0], [99.0, 2113.0], [99.1, 2113.0], [99.2, 2113.0], [99.3, 2113.0], [99.4, 2113.0], [99.5, 2113.0], [99.6, 2113.0], [99.7, 2113.0], [99.8, 2113.0], [99.9, 2113.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 194.0, "series": [{"data": [[0.0, 13.0], [100.0, 3.0], [32900.0, 5.0], [34500.0, 9.0], [33700.0, 6.0], [36100.0, 1.0], [35300.0, 2.0], [38500.0, 5.0], [40100.0, 8.0], [40900.0, 1.0], [41700.0, 1.0], [44100.0, 1.0], [48100.0, 9.0], [48900.0, 2.0], [49700.0, 2.0], [200.0, 3.0], [52900.0, 1.0], [400.0, 1.0], [500.0, 2.0], [600.0, 10.0], [700.0, 194.0], [800.0, 123.0], [900.0, 49.0], [1000.0, 28.0], [1100.0, 19.0], [1200.0, 4.0], [1300.0, 7.0], [1400.0, 7.0], [1500.0, 4.0], [1600.0, 9.0], [1700.0, 8.0], [1800.0, 11.0], [1900.0, 21.0], [2000.0, 10.0], [2100.0, 2.0], [2300.0, 2.0], [2200.0, 12.0], [2600.0, 4.0], [2800.0, 21.0], [2700.0, 13.0], [2900.0, 14.0], [3000.0, 7.0], [3100.0, 6.0], [3300.0, 3.0], [3200.0, 1.0], [3400.0, 5.0], [3500.0, 5.0], [3600.0, 4.0], [3700.0, 3.0], [3900.0, 1.0], [4000.0, 2.0], [4300.0, 3.0], [4200.0, 1.0], [4400.0, 5.0], [4500.0, 4.0], [4600.0, 7.0], [4700.0, 3.0], [5000.0, 3.0], [5100.0, 1.0], [5200.0, 1.0], [5700.0, 1.0], [5900.0, 1.0], [6000.0, 2.0], [6300.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 5.0], [7000.0, 1.0], [7300.0, 3.0], [7400.0, 1.0], [7500.0, 1.0], [7600.0, 4.0], [7800.0, 5.0], [7700.0, 6.0], [7900.0, 5.0], [8000.0, 8.0], [8100.0, 3.0], [8200.0, 12.0], [8400.0, 16.0], [8600.0, 10.0], [9200.0, 5.0], [8800.0, 1.0], [9000.0, 5.0], [9600.0, 8.0], [9400.0, 1.0], [10000.0, 4.0], [10600.0, 2.0], [11200.0, 6.0], [11000.0, 1.0], [12200.0, 1.0], [12400.0, 2.0], [12800.0, 1.0], [13800.0, 8.0], [13600.0, 1.0], [13400.0, 1.0], [14200.0, 4.0], [14600.0, 4.0], [14400.0, 2.0], [14800.0, 5.0], [15000.0, 1.0], [15200.0, 1.0], [15600.0, 6.0], [15400.0, 4.0], [15800.0, 1.0], [16200.0, 1.0], [16800.0, 4.0], [17200.0, 1.0], [17600.0, 2.0], [18000.0, 5.0], [19200.0, 2.0], [18800.0, 1.0], [19600.0, 4.0], [20400.0, 3.0], [20000.0, 2.0], [20800.0, 2.0], [21200.0, 16.0], [21600.0, 8.0], [22000.0, 6.0], [22400.0, 2.0], [22800.0, 4.0], [23200.0, 1.0], [24000.0, 1.0], [23600.0, 5.0], [24400.0, 6.0], [24800.0, 4.0], [25200.0, 2.0], [26400.0, 4.0], [25600.0, 3.0], [27600.0, 6.0], [27200.0, 7.0], [26800.0, 2.0], [28400.0, 3.0], [28000.0, 7.0], [28800.0, 3.0], [29600.0, 4.0], [30000.0, 1.0], [30800.0, 3.0], [31600.0, 3.0], [32000.0, 2.0], [32400.0, 4.0], [32800.0, 5.0], [33600.0, 9.0], [34400.0, 15.0], [35200.0, 5.0], [38400.0, 1.0], [37600.0, 2.0], [39200.0, 2.0], [40800.0, 1.0], [40000.0, 1.0], [42400.0, 1.0], [44800.0, 4.0], [43200.0, 1.0], [44000.0, 1.0], [46400.0, 1.0], [47200.0, 4.0], [48000.0, 4.0], [48800.0, 2.0], [50400.0, 7.0], [51200.0, 2.0], [53600.0, 2.0], [33900.0, 14.0], [33100.0, 1.0], [34700.0, 11.0], [36300.0, 2.0], [35500.0, 1.0], [38700.0, 2.0], [37900.0, 1.0], [37100.0, 2.0], [40300.0, 4.0], [41100.0, 1.0], [41900.0, 1.0], [43500.0, 1.0], [45100.0, 8.0], [48300.0, 1.0], [49100.0, 2.0], [50700.0, 3.0], [49900.0, 1.0], [51500.0, 1.0], [54700.0, 1.0], [60300.0, 1.0], [16900.0, 2.0], [18100.0, 4.0], [18500.0, 1.0], [18900.0, 2.0], [19300.0, 4.0], [19700.0, 6.0], [20100.0, 1.0], [20500.0, 4.0], [21300.0, 3.0], [20900.0, 3.0], [21700.0, 10.0], [22100.0, 5.0], [22500.0, 4.0], [23300.0, 5.0], [24500.0, 6.0], [24100.0, 6.0], [25300.0, 4.0], [26500.0, 2.0], [25700.0, 5.0], [26100.0, 1.0], [26900.0, 3.0], [27300.0, 7.0], [28100.0, 3.0], [28500.0, 7.0], [27700.0, 12.0], [28900.0, 2.0], [30900.0, 4.0], [31700.0, 2.0], [32100.0, 3.0], [32500.0, 6.0], [34600.0, 15.0], [33000.0, 3.0], [33800.0, 7.0], [36200.0, 4.0], [40200.0, 1.0], [41800.0, 4.0], [41000.0, 9.0], [44200.0, 2.0], [45000.0, 3.0], [45800.0, 1.0], [46600.0, 4.0], [47400.0, 5.0], [49000.0, 1.0], [49800.0, 4.0], [50600.0, 1.0], [51400.0, 1.0], [52200.0, 1.0], [53000.0, 1.0], [54600.0, 1.0], [33300.0, 3.0], [34100.0, 11.0], [34900.0, 7.0], [38900.0, 2.0], [38100.0, 1.0], [40500.0, 3.0], [41300.0, 2.0], [44500.0, 6.0], [43700.0, 1.0], [45300.0, 8.0], [46100.0, 2.0], [49300.0, 4.0], [50100.0, 2.0], [8500.0, 7.0], [8300.0, 9.0], [8700.0, 3.0], [8900.0, 8.0], [9100.0, 3.0], [9300.0, 10.0], [9500.0, 8.0], [9700.0, 4.0], [10100.0, 7.0], [10500.0, 8.0], [10700.0, 3.0], [10300.0, 1.0], [11100.0, 2.0], [10900.0, 5.0], [11300.0, 3.0], [11700.0, 1.0], [12100.0, 4.0], [12500.0, 1.0], [12300.0, 2.0], [12900.0, 7.0], [13300.0, 1.0], [13500.0, 3.0], [13700.0, 9.0], [14100.0, 2.0], [13900.0, 2.0], [14300.0, 4.0], [14700.0, 6.0], [14500.0, 1.0], [14900.0, 4.0], [15500.0, 4.0], [16100.0, 3.0], [16300.0, 3.0], [15900.0, 5.0], [17400.0, 2.0], [17000.0, 1.0], [17800.0, 4.0], [18200.0, 1.0], [19400.0, 3.0], [19800.0, 3.0], [20200.0, 6.0], [20600.0, 4.0], [21400.0, 4.0], [21000.0, 12.0], [21800.0, 3.0], [22600.0, 2.0], [23400.0, 2.0], [24200.0, 3.0], [23800.0, 10.0], [24600.0, 4.0], [25400.0, 4.0], [26600.0, 2.0], [25800.0, 1.0], [26200.0, 5.0], [27000.0, 6.0], [27400.0, 6.0], [27800.0, 4.0], [28600.0, 7.0], [28200.0, 3.0], [29400.0, 3.0], [29000.0, 1.0], [30600.0, 3.0], [29800.0, 1.0], [31000.0, 1.0], [32200.0, 1.0], [31800.0, 2.0], [32600.0, 9.0], [33200.0, 4.0], [34800.0, 7.0], [37200.0, 2.0], [38000.0, 2.0], [38800.0, 3.0], [40400.0, 1.0], [42800.0, 2.0], [41200.0, 3.0], [42000.0, 5.0], [43600.0, 1.0], [44400.0, 1.0], [45200.0, 3.0], [46000.0, 2.0], [46800.0, 2.0], [48400.0, 2.0], [47600.0, 2.0], [50000.0, 3.0], [49200.0, 3.0], [54000.0, 1.0], [54800.0, 1.0], [33500.0, 6.0], [34300.0, 15.0], [35100.0, 1.0], [36700.0, 1.0], [37500.0, 1.0], [39900.0, 1.0], [39100.0, 2.0], [42300.0, 1.0], [44700.0, 2.0], [43100.0, 7.0], [47100.0, 5.0], [46300.0, 7.0], [47900.0, 4.0], [50300.0, 12.0], [49500.0, 3.0], [51100.0, 2.0], [17100.0, 1.0], [16700.0, 3.0], [17500.0, 8.0], [17900.0, 5.0], [19100.0, 1.0], [18700.0, 4.0], [20300.0, 2.0], [19500.0, 4.0], [20700.0, 3.0], [21500.0, 4.0], [21100.0, 11.0], [22300.0, 4.0], [21900.0, 6.0], [22700.0, 3.0], [23100.0, 1.0], [23500.0, 5.0], [24300.0, 6.0], [23900.0, 5.0], [25100.0, 2.0], [24700.0, 1.0], [25500.0, 6.0], [26300.0, 7.0], [25900.0, 1.0], [27500.0, 10.0], [26700.0, 3.0], [27100.0, 13.0], [28300.0, 9.0], [27900.0, 5.0], [29500.0, 2.0], [28700.0, 8.0], [30700.0, 4.0], [30300.0, 1.0], [31100.0, 1.0], [31500.0, 7.0], [31900.0, 3.0], [32700.0, 8.0], [34200.0, 9.0], [33400.0, 4.0], [35000.0, 3.0], [36600.0, 1.0], [37400.0, 1.0], [40600.0, 1.0], [43000.0, 2.0], [42200.0, 3.0], [45400.0, 1.0], [47000.0, 6.0], [46200.0, 5.0], [47800.0, 3.0], [49400.0, 6.0], [51800.0, 2.0], [52600.0, 1.0], [53400.0, 1.0]], "isOverall": false, "label": "List Orders", "isController": false}, {"data": [[2100.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1523.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 443.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1523.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 20.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.57798086E12, "maxY": 192.02316602316608, "series": [{"data": [[1.57798086E12, 1.0]], "isOverall": false, "label": "\u767B\u5F55", "isController": false}, {"data": [[1.57798134E12, 25.685714285714283], [1.57798104E12, 50.65217391304347], [1.57798116E12, 101.24499999999996], [1.57798092E12, 18.071770334928203], [1.57798128E12, 143.3548387096774], [1.5779811E12, 96.82926829268293], [1.57798098E12, 46.231404958677665], [1.57798122E12, 192.02316602316608], [1.57798086E12, 3.3000000000000007]], "isOverall": false, "label": "\u67E5\u770B\u6211\u7684\u8BA2\u5355", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798134E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 744.0, "minX": 1.0, "maxY": 60353.0, "series": [{"data": [[2.0, 6955.25], [3.0, 3624.6875], [4.0, 8303.285714285714], [5.0, 7846.428571428571], [6.0, 744.0], [7.0, 799.8571428571428], [8.0, 784.3333333333334], [9.0, 815.1666666666665], [10.0, 829.4545454545454], [11.0, 788.1428571428571], [12.0, 783.6153846153846], [13.0, 797.3888888888888], [14.0, 783.0000000000001], [15.0, 3396.3157894736837], [16.0, 3432.2631578947367], [17.0, 2621.6], [18.0, 2994.904761904762], [19.0, 3184.7368421052633], [20.0, 1956.423809523809], [21.0, 47091.0], [22.0, 14175.0], [23.0, 47051.0], [24.0, 22189.0], [25.0, 47426.0], [26.0, 49525.0], [27.0, 16535.2], [28.0, 16423.0], [29.0, 28658.5], [30.0, 17622.8], [31.0, 18995.0], [33.0, 17881.0], [32.0, 50301.0], [34.0, 14304.333333333334], [35.0, 24784.0], [36.0, 17583.8], [37.0, 21356.666666666664], [38.0, 16384.4], [39.0, 16736.833333333332], [41.0, 22028.0], [40.0, 50697.0], [42.0, 14512.5], [43.0, 22151.42857142857], [44.0, 18519.5], [45.0, 50393.0], [46.0, 18249.2], [47.0, 13656.900000000001], [48.0, 28808.0], [49.0, 18245.75], [50.0, 13887.198051948055], [51.0, 26836.624999999996], [52.0, 36664.5], [53.0, 49230.0], [55.0, 29361.0], [54.0, 49342.0], [57.0, 35020.5], [56.0, 50351.0], [58.0, 35528.0], [59.0, 49747.0], [61.0, 30917.0], [60.0, 53628.0], [62.0, 26994.0], [63.0, 37571.0], [66.0, 38455.5], [67.0, 26019.14285714286], [65.0, 49391.0], [64.0, 50039.0], [70.0, 38430.0], [71.0, 50432.0], [69.0, 50416.0], [68.0, 50415.0], [72.0, 38548.0], [74.0, 31170.0], [75.0, 52289.0], [73.0, 49081.0], [76.0, 34282.0], [78.0, 33973.5], [79.0, 51816.0], [77.0, 48094.0], [80.0, 28634.0], [83.0, 48849.0], [82.0, 51297.0], [81.0, 51277.0], [85.0, 31584.0], [87.0, 50722.0], [86.0, 48053.0], [84.0, 48137.0], [88.0, 34149.0], [89.0, 30831.666666666664], [91.0, 47889.0], [90.0, 47810.0], [92.0, 28085.142857142855], [93.0, 34471.0], [95.0, 24920.222222222223], [94.0, 47944.0], [96.0, 26332.2], [97.0, 44992.5], [98.0, 26040.2], [99.0, 36985.5], [100.0, 25536.997058823537], [101.0, 32737.75], [102.0, 27613.0], [103.0, 50027.0], [104.0, 36942.0], [107.0, 47605.0], [106.0, 48330.0], [105.0, 51434.0], [109.0, 38018.5], [111.0, 49450.0], [110.0, 49439.0], [108.0, 47642.0], [113.0, 38210.5], [114.0, 32339.666666666664], [115.0, 46048.0], [112.0, 46862.0], [118.0, 39596.0], [119.0, 46209.0], [117.0, 49486.0], [116.0, 46067.0], [122.0, 39739.0], [123.0, 49499.0], [121.0, 46203.0], [120.0, 49439.0], [126.0, 33879.0], [127.0, 46218.0], [125.0, 46308.0], [124.0, 46411.0], [131.0, 36154.25], [135.0, 47067.0], [133.0, 47071.0], [132.0, 47055.0], [130.0, 46363.0], [129.0, 46299.0], [128.0, 46365.0], [138.0, 39079.5], [139.0, 34512.166666666664], [140.0, 36682.0], [143.0, 47226.0], [142.0, 47180.0], [141.0, 46678.0], [137.0, 46645.0], [136.0, 48437.5], [144.0, 39486.5], [145.0, 39058.0], [149.0, 36481.666666666664], [150.0, 37085.666666666664], [151.0, 36558.666666666664], [148.0, 47175.5], [147.0, 47201.5], [153.0, 35783.75], [154.0, 39936.0], [158.0, 36433.333333333336], [159.0, 45382.0], [157.0, 45407.0], [156.0, 45337.0], [155.0, 45319.0], [152.0, 45326.0], [162.0, 37230.5], [163.0, 38023.0], [166.0, 35199.8], [167.0, 40362.0], [165.0, 45259.0], [164.0, 45200.0], [161.0, 45146.0], [160.0, 45118.0], [170.0, 32668.0], [172.0, 36012.5], [175.0, 44514.0], [174.0, 44499.0], [173.0, 44502.0], [171.0, 45090.5], [169.0, 45129.0], [168.0, 45080.0], [180.0, 37114.666666666664], [181.0, 39100.0], [183.0, 43165.0], [182.0, 43187.0], [179.0, 44168.0], [178.0, 48415.0], [177.0, 44527.0], [176.0, 44514.0], [184.0, 36730.0], [189.0, 36122.85714285714], [190.0, 38017.5], [188.0, 43165.0], [187.0, 43126.0], [186.0, 43269.0], [185.0, 47905.0], [194.0, 35108.25], [198.0, 35941.333333333336], [199.0, 45133.0], [197.0, 43081.0], [196.0, 43011.0], [195.0, 45197.0], [193.0, 42282.0], [192.0, 42276.0], [200.0, 36438.65267175574], [1.0, 60353.0]], "isOverall": false, "label": "List Orders", "isController": false}, {"data": [[76.86958710976835, 18743.027693857002]], "isOverall": false, "label": "List Orders-Aggregated", "isController": false}, {"data": [[3.0, 2113.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[3.0, 2113.0]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 194.83333333333334, "minX": 1.57798086E12, "maxY": 7043.3, "series": [{"data": [[1.57798134E12, 393.1666666666667], [1.57798104E12, 1808.5666666666666], [1.57798116E12, 2246.6666666666665], [1.57798092E12, 7043.3], [1.57798128E12, 2437.633333333333], [1.5779811E12, 2299.8333333333335], [1.57798098E12, 2718.4666666666667], [1.57798122E12, 2909.4333333333334], [1.57798086E12, 369.0833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57798134E12, 217.58333333333334], [1.57798104E12, 1000.8833333333333], [1.57798116E12, 1243.3333333333333], [1.57798092E12, 3897.85], [1.57798128E12, 1349.0166666666667], [1.5779811E12, 1274.4166666666667], [1.57798098E12, 1504.4333333333334], [1.57798122E12, 1610.1166666666666], [1.57798086E12, 194.83333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798134E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 444.6999999999999, "minX": 1.57798086E12, "maxY": 50120.428571428565, "series": [{"data": [[1.57798134E12, 50120.428571428565], [1.57798104E12, 17673.17391304348], [1.57798116E12, 27256.805000000004], [1.57798092E12, 1552.639553429026], [1.57798128E12, 45752.3041474654], [1.5779811E12, 23486.780487804874], [1.57798098E12, 10324.776859504129], [1.57798122E12, 34516.47490347488], [1.57798086E12, 444.6999999999999]], "isOverall": false, "label": "List Orders", "isController": false}, {"data": [[1.57798086E12, 2113.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798134E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 443.975, "minX": 1.57798086E12, "maxY": 50120.37142857142, "series": [{"data": [[1.57798134E12, 50120.37142857142], [1.57798104E12, 17673.105590062107], [1.57798116E12, 27256.684999999994], [1.57798092E12, 1552.5342902711322], [1.57798128E12, 45752.21658986175], [1.5779811E12, 23486.726829268297], [1.57798098E12, 10324.702479338841], [1.57798122E12, 34516.38996138993], [1.57798086E12, 443.975]], "isOverall": false, "label": "List Orders", "isController": false}, {"data": [[1.57798086E12, 2113.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798134E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 12.626728110599075, "minX": 1.57798086E12, "maxY": 142.0, "series": [{"data": [[1.57798134E12, 13.17142857142857], [1.57798104E12, 12.745341614906827], [1.57798116E12, 12.884999999999998], [1.57798092E12, 13.2822966507177], [1.57798128E12, 12.626728110599075], [1.5779811E12, 13.08780487804878], [1.57798098E12, 14.140495867768593], [1.57798122E12, 12.984555984555987], [1.57798086E12, 13.6]], "isOverall": false, "label": "List Orders", "isController": false}, {"data": [[1.57798086E12, 142.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798134E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 464.0, "minX": 1.57798086E12, "maxY": 60353.0, "series": [{"data": [[1.57798134E12, 60353.0], [1.57798104E12, 30766.0], [1.57798116E12, 38700.0], [1.57798092E12, 7528.0], [1.57798128E12, 54708.0], [1.5779811E12, 37235.0], [1.57798098E12, 27561.0], [1.57798122E12, 44781.0], [1.57798086E12, 2113.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57798134E12, 46339.0], [1.57798104E12, 11788.0], [1.57798116E12, 23338.0], [1.57798092E12, 464.0], [1.57798128E12, 36627.0], [1.5779811E12, 19540.0], [1.57798098E12, 6614.0], [1.57798122E12, 30901.0], [1.57798086E12, 694.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57798134E12, 54072.6], [1.57798104E12, 23828.000000000015], [1.57798116E12, 29666.5], [1.57798092E12, 3145.200000000001], [1.57798128E12, 50397.4], [1.5779811E12, 28383.5], [1.57798098E12, 14574.400000000001], [1.57798122E12, 38020.0], [1.57798086E12, 904.1999999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57798134E12, 60353.0], [1.57798104E12, 30684.16], [1.57798116E12, 33338.93], [1.57798092E12, 5988.840000000001], [1.57798128E12, 53935.5], [1.5779811E12, 34534.24999999997], [1.57798098E12, 23904.71999999996], [1.57798122E12, 43509.39999999996], [1.57798086E12, 2113.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57798134E12, 55943.39999999998], [1.57798104E12, 24370.0], [1.57798116E12, 31528.549999999992], [1.57798092E12, 4468.200000000001], [1.57798128E12, 51310.7], [1.5779811E12, 28989.25], [1.57798098E12, 15600.85], [1.57798122E12, 39129.0], [1.57798086E12, 1933.7499999999975]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798134E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 45356.5, "series": [{"data": [[2.0, 26126.5], [3.0, 21760.0], [4.0, 23827.5], [5.0, 21490.0], [6.0, 28139.0], [7.0, 21705.0], [8.0, 24399.0], [9.0, 10738.5], [10.0, 45356.5], [11.0, 2891.0], [12.0, 23598.0], [13.0, 1978.0], [15.0, 788.0], [16.0, 1906.0], [1.0, 27540.0], [17.0, 974.0], [18.0, 913.0], [19.0, 969.0], [20.0, 835.5], [21.0, 763.0], [22.0, 842.5], [23.0, 888.0], [25.0, 776.0], [26.0, 848.5], [31.0, 761.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120.5], [16.0, 39.0], [12.0, 41839.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 45356.0, "series": [{"data": [[2.0, 26126.5], [3.0, 21760.0], [4.0, 23827.5], [5.0, 21490.0], [6.0, 28139.0], [7.0, 21705.0], [8.0, 24399.0], [9.0, 10738.5], [10.0, 45356.0], [11.0, 2891.0], [12.0, 23598.0], [13.0, 1978.0], [15.0, 788.0], [16.0, 1906.0], [1.0, 27539.5], [17.0, 974.0], [18.0, 913.0], [19.0, 969.0], [20.0, 835.5], [21.0, 763.0], [22.0, 842.0], [23.0, 887.5], [25.0, 776.0], [26.0, 848.5], [31.0, 761.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 110.0], [16.0, 39.0], [12.0, 41839.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 31.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.7833333333333333, "minX": 1.57798086E12, "maxY": 10.783333333333333, "series": [{"data": [[1.57798104E12, 2.9], [1.57798116E12, 3.75], [1.57798092E12, 10.783333333333333], [1.57798128E12, 0.9666666666666667], [1.5779811E12, 4.0], [1.57798098E12, 4.433333333333334], [1.57798122E12, 5.5], [1.57798086E12, 0.7833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798128E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.57798086E12, "maxY": 10.45, "series": [{"data": [[1.57798134E12, 0.5833333333333334], [1.57798104E12, 2.683333333333333], [1.57798116E12, 3.3333333333333335], [1.57798092E12, 10.45], [1.57798128E12, 3.6166666666666667], [1.5779811E12, 3.4166666666666665], [1.57798098E12, 4.033333333333333], [1.57798122E12, 4.316666666666666], [1.57798086E12, 0.6833333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798134E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57798086E12, "maxY": 10.45, "series": [{"data": [[1.57798134E12, 0.5833333333333334], [1.57798104E12, 2.683333333333333], [1.57798116E12, 3.3333333333333335], [1.57798092E12, 10.45], [1.57798128E12, 3.6166666666666667], [1.5779811E12, 3.4], [1.57798098E12, 4.033333333333333], [1.57798122E12, 4.316666666666666], [1.57798086E12, 0.35]], "isOverall": false, "label": "List Orders-success", "isController": false}, {"data": [[1.57798086E12, 0.016666666666666666]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.5779811E12, 0.016666666666666666], [1.57798086E12, 0.31666666666666665]], "isOverall": false, "label": "List Orders-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798134E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57798086E12, "maxY": 10.45, "series": [{"data": [[1.57798134E12, 0.5833333333333334], [1.57798104E12, 2.683333333333333], [1.57798116E12, 3.3333333333333335], [1.57798092E12, 10.45], [1.57798128E12, 3.6166666666666667], [1.5779811E12, 3.4], [1.57798098E12, 4.033333333333333], [1.57798122E12, 4.316666666666666], [1.57798086E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5779811E12, 0.016666666666666666], [1.57798086E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798134E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

