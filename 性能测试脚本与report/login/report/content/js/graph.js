/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 130.0, "minX": 0.0, "maxY": 34964.0, "series": [{"data": [[0.0, 130.0], [0.1, 131.0], [0.2, 132.0], [0.3, 132.0], [0.4, 132.0], [0.5, 132.0], [0.6, 133.0], [0.7, 133.0], [0.8, 133.0], [0.9, 134.0], [1.0, 134.0], [1.1, 134.0], [1.2, 135.0], [1.3, 135.0], [1.4, 135.0], [1.5, 135.0], [1.6, 135.0], [1.7, 136.0], [1.8, 136.0], [1.9, 136.0], [2.0, 136.0], [2.1, 136.0], [2.2, 136.0], [2.3, 137.0], [2.4, 137.0], [2.5, 137.0], [2.6, 137.0], [2.7, 138.0], [2.8, 138.0], [2.9, 139.0], [3.0, 140.0], [3.1, 141.0], [3.2, 142.0], [3.3, 144.0], [3.4, 157.0], [3.5, 185.0], [3.6, 215.0], [3.7, 239.0], [3.8, 320.0], [3.9, 341.0], [4.0, 420.0], [4.1, 476.0], [4.2, 519.0], [4.3, 584.0], [4.4, 644.0], [4.5, 709.0], [4.6, 760.0], [4.7, 791.0], [4.8, 855.0], [4.9, 866.0], [5.0, 897.0], [5.1, 914.0], [5.2, 921.0], [5.3, 925.0], [5.4, 931.0], [5.5, 942.0], [5.6, 949.0], [5.7, 956.0], [5.8, 959.0], [5.9, 963.0], [6.0, 967.0], [6.1, 969.0], [6.2, 975.0], [6.3, 983.0], [6.4, 987.0], [6.5, 994.0], [6.6, 1000.0], [6.7, 1006.0], [6.8, 1010.0], [6.9, 1014.0], [7.0, 1019.0], [7.1, 1022.0], [7.2, 1029.0], [7.3, 1033.0], [7.4, 1038.0], [7.5, 1039.0], [7.6, 1042.0], [7.7, 1044.0], [7.8, 1046.0], [7.9, 1049.0], [8.0, 1050.0], [8.1, 1054.0], [8.2, 1056.0], [8.3, 1058.0], [8.4, 1060.0], [8.5, 1062.0], [8.6, 1064.0], [8.7, 1065.0], [8.8, 1070.0], [8.9, 1071.0], [9.0, 1073.0], [9.1, 1073.0], [9.2, 1075.0], [9.3, 1076.0], [9.4, 1077.0], [9.5, 1079.0], [9.6, 1081.0], [9.7, 1081.0], [9.8, 1082.0], [9.9, 1083.0], [10.0, 1085.0], [10.1, 1086.0], [10.2, 1088.0], [10.3, 1089.0], [10.4, 1090.0], [10.5, 1092.0], [10.6, 1094.0], [10.7, 1096.0], [10.8, 1099.0], [10.9, 1100.0], [11.0, 1104.0], [11.1, 1106.0], [11.2, 1108.0], [11.3, 1108.0], [11.4, 1110.0], [11.5, 1111.0], [11.6, 1111.0], [11.7, 1113.0], [11.8, 1113.0], [11.9, 1114.0], [12.0, 1116.0], [12.1, 1118.0], [12.2, 1119.0], [12.3, 1120.0], [12.4, 1123.0], [12.5, 1124.0], [12.6, 1125.0], [12.7, 1127.0], [12.8, 1129.0], [12.9, 1131.0], [13.0, 1132.0], [13.1, 1133.0], [13.2, 1135.0], [13.3, 1136.0], [13.4, 1138.0], [13.5, 1138.0], [13.6, 1139.0], [13.7, 1141.0], [13.8, 1142.0], [13.9, 1146.0], [14.0, 1148.0], [14.1, 1150.0], [14.2, 1152.0], [14.3, 1154.0], [14.4, 1156.0], [14.5, 1157.0], [14.6, 1159.0], [14.7, 1168.0], [14.8, 1170.0], [14.9, 1171.0], [15.0, 1175.0], [15.1, 1178.0], [15.2, 1184.0], [15.3, 1188.0], [15.4, 1192.0], [15.5, 1195.0], [15.6, 1200.0], [15.7, 1208.0], [15.8, 1212.0], [15.9, 1218.0], [16.0, 1223.0], [16.1, 1229.0], [16.2, 1240.0], [16.3, 1253.0], [16.4, 1274.0], [16.5, 1287.0], [16.6, 1304.0], [16.7, 1328.0], [16.8, 1347.0], [16.9, 1364.0], [17.0, 1390.0], [17.1, 1506.0], [17.2, 1550.0], [17.3, 1593.0], [17.4, 1620.0], [17.5, 1639.0], [17.6, 1658.0], [17.7, 1699.0], [17.8, 1735.0], [17.9, 1788.0], [18.0, 1809.0], [18.1, 1840.0], [18.2, 1866.0], [18.3, 1885.0], [18.4, 1920.0], [18.5, 1926.0], [18.6, 1932.0], [18.7, 1952.0], [18.8, 1978.0], [18.9, 1989.0], [19.0, 2003.0], [19.1, 2022.0], [19.2, 2036.0], [19.3, 2046.0], [19.4, 2053.0], [19.5, 2063.0], [19.6, 2068.0], [19.7, 2073.0], [19.8, 2086.0], [19.9, 2091.0], [20.0, 2098.0], [20.1, 2103.0], [20.2, 2108.0], [20.3, 2112.0], [20.4, 2116.0], [20.5, 2121.0], [20.6, 2127.0], [20.7, 2132.0], [20.8, 2138.0], [20.9, 2141.0], [21.0, 2144.0], [21.1, 2147.0], [21.2, 2151.0], [21.3, 2154.0], [21.4, 2157.0], [21.5, 2158.0], [21.6, 2161.0], [21.7, 2165.0], [21.8, 2168.0], [21.9, 2175.0], [22.0, 2176.0], [22.1, 2179.0], [22.2, 2185.0], [22.3, 2187.0], [22.4, 2188.0], [22.5, 2188.0], [22.6, 2190.0], [22.7, 2192.0], [22.8, 2197.0], [22.9, 2201.0], [23.0, 2204.0], [23.1, 2211.0], [23.2, 2214.0], [23.3, 2218.0], [23.4, 2221.0], [23.5, 2225.0], [23.6, 2230.0], [23.7, 2231.0], [23.8, 2232.0], [23.9, 2234.0], [24.0, 2235.0], [24.1, 2236.0], [24.2, 2239.0], [24.3, 2246.0], [24.4, 2251.0], [24.5, 2253.0], [24.6, 2255.0], [24.7, 2258.0], [24.8, 2260.0], [24.9, 2262.0], [25.0, 2264.0], [25.1, 2265.0], [25.2, 2267.0], [25.3, 2269.0], [25.4, 2272.0], [25.5, 2277.0], [25.6, 2281.0], [25.7, 2283.0], [25.8, 2286.0], [25.9, 2289.0], [26.0, 2290.0], [26.1, 2292.0], [26.2, 2296.0], [26.3, 2298.0], [26.4, 2301.0], [26.5, 2304.0], [26.6, 2310.0], [26.7, 2315.0], [26.8, 2320.0], [26.9, 2321.0], [27.0, 2327.0], [27.1, 2331.0], [27.2, 2335.0], [27.3, 2339.0], [27.4, 2348.0], [27.5, 2359.0], [27.6, 2363.0], [27.7, 2369.0], [27.8, 2375.0], [27.9, 2379.0], [28.0, 2384.0], [28.1, 2387.0], [28.2, 2392.0], [28.3, 2396.0], [28.4, 2399.0], [28.5, 2407.0], [28.6, 2414.0], [28.7, 2418.0], [28.8, 2433.0], [28.9, 2438.0], [29.0, 2447.0], [29.1, 2455.0], [29.2, 2468.0], [29.3, 2478.0], [29.4, 2489.0], [29.5, 2496.0], [29.6, 2506.0], [29.7, 2515.0], [29.8, 2520.0], [29.9, 2556.0], [30.0, 2571.0], [30.1, 2578.0], [30.2, 2625.0], [30.3, 2658.0], [30.4, 2686.0], [30.5, 2727.0], [30.6, 2787.0], [30.7, 2815.0], [30.8, 2878.0], [30.9, 2907.0], [31.0, 2996.0], [31.1, 3019.0], [31.2, 3087.0], [31.3, 3104.0], [31.4, 3119.0], [31.5, 3163.0], [31.6, 3199.0], [31.7, 3239.0], [31.8, 3263.0], [31.9, 3276.0], [32.0, 3299.0], [32.1, 3317.0], [32.2, 3345.0], [32.3, 3384.0], [32.4, 3425.0], [32.5, 3465.0], [32.6, 3506.0], [32.7, 3568.0], [32.8, 3602.0], [32.9, 3618.0], [33.0, 3640.0], [33.1, 3653.0], [33.2, 3692.0], [33.3, 3729.0], [33.4, 3759.0], [33.5, 3783.0], [33.6, 3796.0], [33.7, 3840.0], [33.8, 3890.0], [33.9, 3936.0], [34.0, 4044.0], [34.1, 4075.0], [34.2, 4128.0], [34.3, 4187.0], [34.4, 4244.0], [34.5, 4301.0], [34.6, 4356.0], [34.7, 4392.0], [34.8, 4445.0], [34.9, 4473.0], [35.0, 4490.0], [35.1, 4510.0], [35.2, 4532.0], [35.3, 4571.0], [35.4, 4587.0], [35.5, 4598.0], [35.6, 4643.0], [35.7, 4676.0], [35.8, 4686.0], [35.9, 4705.0], [36.0, 4713.0], [36.1, 4743.0], [36.2, 4765.0], [36.3, 4777.0], [36.4, 4792.0], [36.5, 4803.0], [36.6, 4817.0], [36.7, 4829.0], [36.8, 4848.0], [36.9, 4859.0], [37.0, 4883.0], [37.1, 4888.0], [37.2, 4910.0], [37.3, 4920.0], [37.4, 4928.0], [37.5, 4946.0], [37.6, 4964.0], [37.7, 4967.0], [37.8, 4974.0], [37.9, 4977.0], [38.0, 4984.0], [38.1, 4996.0], [38.2, 5004.0], [38.3, 5010.0], [38.4, 5018.0], [38.5, 5026.0], [38.6, 5028.0], [38.7, 5039.0], [38.8, 5048.0], [38.9, 5058.0], [39.0, 5071.0], [39.1, 5087.0], [39.2, 5090.0], [39.3, 5097.0], [39.4, 5110.0], [39.5, 5117.0], [39.6, 5120.0], [39.7, 5124.0], [39.8, 5127.0], [39.9, 5136.0], [40.0, 5138.0], [40.1, 5141.0], [40.2, 5143.0], [40.3, 5172.0], [40.4, 5183.0], [40.5, 5187.0], [40.6, 5194.0], [40.7, 5196.0], [40.8, 5203.0], [40.9, 5211.0], [41.0, 5215.0], [41.1, 5222.0], [41.2, 5227.0], [41.3, 5230.0], [41.4, 5241.0], [41.5, 5247.0], [41.6, 5252.0], [41.7, 5256.0], [41.8, 5262.0], [41.9, 5276.0], [42.0, 5282.0], [42.1, 5285.0], [42.2, 5289.0], [42.3, 5293.0], [42.4, 5296.0], [42.5, 5306.0], [42.6, 5310.0], [42.7, 5316.0], [42.8, 5325.0], [42.9, 5328.0], [43.0, 5332.0], [43.1, 5335.0], [43.2, 5339.0], [43.3, 5346.0], [43.4, 5352.0], [43.5, 5355.0], [43.6, 5360.0], [43.7, 5363.0], [43.8, 5367.0], [43.9, 5368.0], [44.0, 5373.0], [44.1, 5376.0], [44.2, 5379.0], [44.3, 5381.0], [44.4, 5384.0], [44.5, 5387.0], [44.6, 5392.0], [44.7, 5393.0], [44.8, 5399.0], [44.9, 5401.0], [45.0, 5404.0], [45.1, 5409.0], [45.2, 5416.0], [45.3, 5421.0], [45.4, 5423.0], [45.5, 5429.0], [45.6, 5437.0], [45.7, 5441.0], [45.8, 5444.0], [45.9, 5451.0], [46.0, 5459.0], [46.1, 5469.0], [46.2, 5472.0], [46.3, 5476.0], [46.4, 5479.0], [46.5, 5482.0], [46.6, 5485.0], [46.7, 5488.0], [46.8, 5491.0], [46.9, 5497.0], [47.0, 5500.0], [47.1, 5507.0], [47.2, 5514.0], [47.3, 5516.0], [47.4, 5523.0], [47.5, 5530.0], [47.6, 5534.0], [47.7, 5538.0], [47.8, 5540.0], [47.9, 5545.0], [48.0, 5547.0], [48.1, 5553.0], [48.2, 5558.0], [48.3, 5561.0], [48.4, 5566.0], [48.5, 5572.0], [48.6, 5574.0], [48.7, 5580.0], [48.8, 5581.0], [48.9, 5588.0], [49.0, 5593.0], [49.1, 5599.0], [49.2, 5601.0], [49.3, 5605.0], [49.4, 5607.0], [49.5, 5612.0], [49.6, 5617.0], [49.7, 5623.0], [49.8, 5633.0], [49.9, 5634.0], [50.0, 5637.0], [50.1, 5648.0], [50.2, 5651.0], [50.3, 5652.0], [50.4, 5655.0], [50.5, 5659.0], [50.6, 5662.0], [50.7, 5664.0], [50.8, 5668.0], [50.9, 5670.0], [51.0, 5675.0], [51.1, 5684.0], [51.2, 5692.0], [51.3, 5698.0], [51.4, 5703.0], [51.5, 5711.0], [51.6, 5715.0], [51.7, 5718.0], [51.8, 5720.0], [51.9, 5725.0], [52.0, 5731.0], [52.1, 5738.0], [52.2, 5746.0], [52.3, 5748.0], [52.4, 5756.0], [52.5, 5759.0], [52.6, 5764.0], [52.7, 5772.0], [52.8, 5788.0], [52.9, 5789.0], [53.0, 5797.0], [53.1, 5800.0], [53.2, 5807.0], [53.3, 5810.0], [53.4, 5814.0], [53.5, 5827.0], [53.6, 5834.0], [53.7, 5841.0], [53.8, 5855.0], [53.9, 5865.0], [54.0, 5871.0], [54.1, 5881.0], [54.2, 5888.0], [54.3, 5897.0], [54.4, 5911.0], [54.5, 5914.0], [54.6, 5923.0], [54.7, 5937.0], [54.8, 5944.0], [54.9, 5946.0], [55.0, 5964.0], [55.1, 5971.0], [55.2, 5994.0], [55.3, 5997.0], [55.4, 6006.0], [55.5, 6019.0], [55.6, 6029.0], [55.7, 6036.0], [55.8, 6040.0], [55.9, 6048.0], [56.0, 6061.0], [56.1, 6073.0], [56.2, 6075.0], [56.3, 6080.0], [56.4, 6095.0], [56.5, 6114.0], [56.6, 6131.0], [56.7, 6134.0], [56.8, 6154.0], [56.9, 6174.0], [57.0, 6181.0], [57.1, 6221.0], [57.2, 6232.0], [57.3, 6243.0], [57.4, 6260.0], [57.5, 6277.0], [57.6, 6290.0], [57.7, 6318.0], [57.8, 6345.0], [57.9, 6373.0], [58.0, 6381.0], [58.1, 6399.0], [58.2, 6432.0], [58.3, 6461.0], [58.4, 6481.0], [58.5, 6508.0], [58.6, 6545.0], [58.7, 6574.0], [58.8, 6598.0], [58.9, 6613.0], [59.0, 6659.0], [59.1, 6691.0], [59.2, 6751.0], [59.3, 6766.0], [59.4, 6808.0], [59.5, 6878.0], [59.6, 6927.0], [59.7, 6971.0], [59.8, 7072.0], [59.9, 7098.0], [60.0, 7181.0], [60.1, 7203.0], [60.2, 7249.0], [60.3, 7318.0], [60.4, 7340.0], [60.5, 7369.0], [60.6, 7404.0], [60.7, 7451.0], [60.8, 7480.0], [60.9, 7547.0], [61.0, 7582.0], [61.1, 7641.0], [61.2, 7678.0], [61.3, 7723.0], [61.4, 7794.0], [61.5, 7817.0], [61.6, 7826.0], [61.7, 7911.0], [61.8, 7948.0], [61.9, 7956.0], [62.0, 7989.0], [62.1, 8011.0], [62.2, 8042.0], [62.3, 8068.0], [62.4, 8111.0], [62.5, 8147.0], [62.6, 8158.0], [62.7, 8170.0], [62.8, 8191.0], [62.9, 8213.0], [63.0, 8234.0], [63.1, 8263.0], [63.2, 8309.0], [63.3, 8346.0], [63.4, 8379.0], [63.5, 8405.0], [63.6, 8440.0], [63.7, 8455.0], [63.8, 8466.0], [63.9, 8508.0], [64.0, 8567.0], [64.1, 8592.0], [64.2, 8613.0], [64.3, 8626.0], [64.4, 8662.0], [64.5, 8686.0], [64.6, 8716.0], [64.7, 8723.0], [64.8, 8762.0], [64.9, 8771.0], [65.0, 8785.0], [65.1, 8793.0], [65.2, 8834.0], [65.3, 8846.0], [65.4, 8868.0], [65.5, 8880.0], [65.6, 8906.0], [65.7, 8915.0], [65.8, 8929.0], [65.9, 8952.0], [66.0, 8962.0], [66.1, 8970.0], [66.2, 8999.0], [66.3, 9015.0], [66.4, 9034.0], [66.5, 9041.0], [66.6, 9065.0], [66.7, 9078.0], [66.8, 9093.0], [66.9, 9113.0], [67.0, 9137.0], [67.1, 9149.0], [67.2, 9181.0], [67.3, 9203.0], [67.4, 9213.0], [67.5, 9235.0], [67.6, 9253.0], [67.7, 9278.0], [67.8, 9299.0], [67.9, 9319.0], [68.0, 9344.0], [68.1, 9352.0], [68.2, 9381.0], [68.3, 9406.0], [68.4, 9422.0], [68.5, 9448.0], [68.6, 9508.0], [68.7, 9530.0], [68.8, 9556.0], [68.9, 9588.0], [69.0, 9602.0], [69.1, 9626.0], [69.2, 9650.0], [69.3, 9656.0], [69.4, 9661.0], [69.5, 9696.0], [69.6, 9718.0], [69.7, 9763.0], [69.8, 9776.0], [69.9, 9808.0], [70.0, 9826.0], [70.1, 9840.0], [70.2, 9857.0], [70.3, 9860.0], [70.4, 9870.0], [70.5, 9896.0], [70.6, 9911.0], [70.7, 9950.0], [70.8, 9971.0], [70.9, 9988.0], [71.0, 10016.0], [71.1, 10038.0], [71.2, 10051.0], [71.3, 10063.0], [71.4, 10071.0], [71.5, 10082.0], [71.6, 10108.0], [71.7, 10120.0], [71.8, 10127.0], [71.9, 10135.0], [72.0, 10154.0], [72.1, 10172.0], [72.2, 10189.0], [72.3, 10219.0], [72.4, 10238.0], [72.5, 10265.0], [72.6, 10283.0], [72.7, 10309.0], [72.8, 10346.0], [72.9, 10359.0], [73.0, 10375.0], [73.1, 10382.0], [73.2, 10394.0], [73.3, 10408.0], [73.4, 10445.0], [73.5, 10481.0], [73.6, 10506.0], [73.7, 10529.0], [73.8, 10575.0], [73.9, 10595.0], [74.0, 10630.0], [74.1, 10649.0], [74.2, 10668.0], [74.3, 10689.0], [74.4, 10708.0], [74.5, 10749.0], [74.6, 10779.0], [74.7, 10788.0], [74.8, 10811.0], [74.9, 10847.0], [75.0, 10877.0], [75.1, 10905.0], [75.2, 10918.0], [75.3, 10950.0], [75.4, 10962.0], [75.5, 10985.0], [75.6, 10992.0], [75.7, 11015.0], [75.8, 11019.0], [75.9, 11025.0], [76.0, 11062.0], [76.1, 11085.0], [76.2, 11098.0], [76.3, 11110.0], [76.4, 11124.0], [76.5, 11132.0], [76.6, 11167.0], [76.7, 11190.0], [76.8, 11211.0], [76.9, 11229.0], [77.0, 11255.0], [77.1, 11288.0], [77.2, 11310.0], [77.3, 11348.0], [77.4, 11381.0], [77.5, 11418.0], [77.6, 11465.0], [77.7, 11487.0], [77.8, 11530.0], [77.9, 11565.0], [78.0, 11582.0], [78.1, 11613.0], [78.2, 11630.0], [78.3, 11655.0], [78.4, 11697.0], [78.5, 11732.0], [78.6, 11749.0], [78.7, 11846.0], [78.8, 11860.0], [78.9, 11883.0], [79.0, 11905.0], [79.1, 11917.0], [79.2, 11962.0], [79.3, 11981.0], [79.4, 12000.0], [79.5, 12045.0], [79.6, 12055.0], [79.7, 12090.0], [79.8, 12140.0], [79.9, 12201.0], [80.0, 12249.0], [80.1, 12295.0], [80.2, 12327.0], [80.3, 12344.0], [80.4, 12364.0], [80.5, 12402.0], [80.6, 12464.0], [80.7, 12545.0], [80.8, 12602.0], [80.9, 12627.0], [81.0, 12653.0], [81.1, 12686.0], [81.2, 12721.0], [81.3, 12740.0], [81.4, 12768.0], [81.5, 12810.0], [81.6, 12846.0], [81.7, 12892.0], [81.8, 13070.0], [81.9, 13194.0], [82.0, 13314.0], [82.1, 13335.0], [82.2, 13357.0], [82.3, 13380.0], [82.4, 13447.0], [82.5, 13542.0], [82.6, 13622.0], [82.7, 13695.0], [82.8, 13791.0], [82.9, 13867.0], [83.0, 13971.0], [83.1, 14216.0], [83.2, 14329.0], [83.3, 14398.0], [83.4, 14453.0], [83.5, 14609.0], [83.6, 14672.0], [83.7, 14712.0], [83.8, 14867.0], [83.9, 14989.0], [84.0, 15280.0], [84.1, 15428.0], [84.2, 15539.0], [84.3, 15616.0], [84.4, 15709.0], [84.5, 15920.0], [84.6, 15939.0], [84.7, 15943.0], [84.8, 16077.0], [84.9, 16279.0], [85.0, 16286.0], [85.1, 16289.0], [85.2, 16367.0], [85.3, 16473.0], [85.4, 16745.0], [85.5, 16841.0], [85.6, 16909.0], [85.7, 17025.0], [85.8, 17143.0], [85.9, 17175.0], [86.0, 17229.0], [86.1, 17343.0], [86.2, 17523.0], [86.3, 17827.0], [86.4, 17888.0], [86.5, 18052.0], [86.6, 18067.0], [86.7, 18093.0], [86.8, 18238.0], [86.9, 18326.0], [87.0, 18426.0], [87.1, 18548.0], [87.2, 18634.0], [87.3, 18843.0], [87.4, 19001.0], [87.5, 19178.0], [87.6, 19276.0], [87.7, 19378.0], [87.8, 19447.0], [87.9, 19521.0], [88.0, 19589.0], [88.1, 19623.0], [88.2, 19678.0], [88.3, 19761.0], [88.4, 19777.0], [88.5, 19784.0], [88.6, 19803.0], [88.7, 19845.0], [88.8, 19890.0], [88.9, 19969.0], [89.0, 19992.0], [89.1, 20104.0], [89.2, 20167.0], [89.3, 20214.0], [89.4, 20289.0], [89.5, 20346.0], [89.6, 20462.0], [89.7, 20514.0], [89.8, 20547.0], [89.9, 20701.0], [90.0, 20761.0], [90.1, 20838.0], [90.2, 20873.0], [90.3, 20918.0], [90.4, 20998.0], [90.5, 21025.0], [90.6, 21041.0], [90.7, 21054.0], [90.8, 21079.0], [90.9, 21174.0], [91.0, 21196.0], [91.1, 21259.0], [91.2, 21309.0], [91.3, 21335.0], [91.4, 21384.0], [91.5, 21466.0], [91.6, 21538.0], [91.7, 21631.0], [91.8, 21646.0], [91.9, 21666.0], [92.0, 21685.0], [92.1, 21724.0], [92.2, 21779.0], [92.3, 21873.0], [92.4, 22013.0], [92.5, 22169.0], [92.6, 22232.0], [92.7, 22401.0], [92.8, 22434.0], [92.9, 22629.0], [93.0, 22678.0], [93.1, 22750.0], [93.2, 22832.0], [93.3, 22903.0], [93.4, 22963.0], [93.5, 23197.0], [93.6, 23214.0], [93.7, 23230.0], [93.8, 23266.0], [93.9, 23311.0], [94.0, 23445.0], [94.1, 23549.0], [94.2, 23563.0], [94.3, 23647.0], [94.4, 23766.0], [94.5, 23923.0], [94.6, 23997.0], [94.7, 24112.0], [94.8, 24248.0], [94.9, 24440.0], [95.0, 24601.0], [95.1, 24689.0], [95.2, 24775.0], [95.3, 24870.0], [95.4, 25037.0], [95.5, 25141.0], [95.6, 25163.0], [95.7, 25193.0], [95.8, 25262.0], [95.9, 25306.0], [96.0, 25368.0], [96.1, 25512.0], [96.2, 25609.0], [96.3, 25763.0], [96.4, 25819.0], [96.5, 25900.0], [96.6, 25940.0], [96.7, 26015.0], [96.8, 26449.0], [96.9, 26554.0], [97.0, 26647.0], [97.1, 26663.0], [97.2, 26897.0], [97.3, 26981.0], [97.4, 27056.0], [97.5, 27110.0], [97.6, 27350.0], [97.7, 27491.0], [97.8, 27648.0], [97.9, 27690.0], [98.0, 27799.0], [98.1, 27912.0], [98.2, 27976.0], [98.3, 28017.0], [98.4, 28110.0], [98.5, 28236.0], [98.6, 28539.0], [98.7, 28725.0], [98.8, 28920.0], [98.9, 29051.0], [99.0, 29280.0], [99.1, 29308.0], [99.2, 29435.0], [99.3, 29687.0], [99.4, 29734.0], [99.5, 30301.0], [99.6, 30624.0], [99.7, 31526.0], [99.8, 32289.0], [99.9, 33136.0], [100.0, 34964.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 199.0, "series": [{"data": [[100.0, 149.0], [33700.0, 1.0], [34900.0, 1.0], [200.0, 10.0], [300.0, 9.0], [400.0, 7.0], [500.0, 10.0], [600.0, 4.0], [700.0, 9.0], [800.0, 13.0], [900.0, 66.0], [1000.0, 180.0], [1100.0, 199.0], [1200.0, 42.0], [1300.0, 19.0], [1400.0, 2.0], [1500.0, 10.0], [1600.0, 17.0], [1700.0, 10.0], [1800.0, 15.0], [1900.0, 29.0], [2000.0, 44.0], [2100.0, 120.0], [2200.0, 144.0], [2300.0, 89.0], [2400.0, 46.0], [2500.0, 25.0], [2600.0, 14.0], [2700.0, 8.0], [2800.0, 9.0], [2900.0, 7.0], [3000.0, 11.0], [3100.0, 14.0], [3200.0, 17.0], [3300.0, 14.0], [3400.0, 9.0], [3500.0, 9.0], [3700.0, 14.0], [3600.0, 21.0], [3800.0, 10.0], [3900.0, 5.0], [4000.0, 7.0], [4100.0, 9.0], [4200.0, 6.0], [4300.0, 11.0], [4600.0, 15.0], [4500.0, 19.0], [4400.0, 14.0], [4700.0, 25.0], [4800.0, 30.0], [4900.0, 40.0], [5100.0, 60.0], [5000.0, 49.0], [5300.0, 100.0], [5200.0, 72.0], [5400.0, 91.0], [5600.0, 93.0], [5500.0, 91.0], [5700.0, 74.0], [5800.0, 51.0], [5900.0, 43.0], [6100.0, 26.0], [6000.0, 47.0], [6200.0, 24.0], [6300.0, 20.0], [6500.0, 16.0], [6400.0, 14.0], [6600.0, 12.0], [6700.0, 11.0], [6800.0, 6.0], [6900.0, 9.0], [7000.0, 8.0], [7100.0, 5.0], [7300.0, 13.0], [7200.0, 10.0], [7400.0, 11.0], [7500.0, 8.0], [7600.0, 10.0], [7800.0, 11.0], [7700.0, 6.0], [7900.0, 16.0], [8000.0, 14.0], [8100.0, 19.0], [8700.0, 24.0], [8500.0, 14.0], [8400.0, 16.0], [8200.0, 14.0], [8600.0, 15.0], [8300.0, 13.0], [8800.0, 17.0], [8900.0, 29.0], [9200.0, 23.0], [9100.0, 19.0], [9000.0, 26.0], [9300.0, 20.0], [9400.0, 12.0], [9500.0, 17.0], [9600.0, 23.0], [9700.0, 13.0], [9800.0, 28.0], [9900.0, 20.0], [10000.0, 22.0], [10200.0, 18.0], [10100.0, 31.0], [10700.0, 16.0], [10400.0, 15.0], [10600.0, 19.0], [10500.0, 13.0], [10300.0, 24.0], [11000.0, 24.0], [11200.0, 17.0], [11100.0, 23.0], [10900.0, 24.0], [10800.0, 14.0], [11400.0, 12.0], [11700.0, 10.0], [11600.0, 16.0], [11500.0, 12.0], [11300.0, 13.0], [11900.0, 18.0], [12100.0, 5.0], [11800.0, 13.0], [12200.0, 11.0], [12000.0, 15.0], [12600.0, 14.0], [12500.0, 7.0], [12700.0, 15.0], [12400.0, 6.0], [12300.0, 15.0], [13100.0, 4.0], [13300.0, 14.0], [12900.0, 1.0], [13200.0, 4.0], [12800.0, 10.0], [13000.0, 3.0], [13600.0, 7.0], [13700.0, 5.0], [13800.0, 4.0], [13400.0, 5.0], [13500.0, 4.0], [14300.0, 6.0], [13900.0, 5.0], [14000.0, 1.0], [14100.0, 1.0], [14200.0, 3.0], [14700.0, 4.0], [14400.0, 7.0], [14600.0, 7.0], [14500.0, 1.0], [14800.0, 2.0], [15300.0, 2.0], [15200.0, 2.0], [15000.0, 1.0], [14900.0, 5.0], [15100.0, 1.0], [15700.0, 2.0], [15500.0, 5.0], [15400.0, 4.0], [15800.0, 2.0], [15600.0, 4.0], [16100.0, 2.0], [16000.0, 3.0], [16300.0, 5.0], [15900.0, 11.0], [16200.0, 12.0], [16800.0, 5.0], [16600.0, 3.0], [17000.0, 5.0], [17400.0, 2.0], [16400.0, 2.0], [17200.0, 3.0], [17800.0, 7.0], [17600.0, 1.0], [18400.0, 2.0], [18200.0, 3.0], [18000.0, 9.0], [19400.0, 5.0], [19000.0, 3.0], [19200.0, 4.0], [18600.0, 3.0], [18800.0, 3.0], [19600.0, 10.0], [19800.0, 11.0], [20200.0, 7.0], [20400.0, 6.0], [20000.0, 3.0], [20800.0, 8.0], [21400.0, 5.0], [21000.0, 17.0], [20600.0, 2.0], [21200.0, 6.0], [21800.0, 2.0], [21600.0, 19.0], [22400.0, 8.0], [22000.0, 5.0], [22200.0, 4.0], [23000.0, 3.0], [23400.0, 3.0], [23200.0, 14.0], [22600.0, 6.0], [22800.0, 4.0], [24200.0, 4.0], [24000.0, 2.0], [23600.0, 3.0], [23800.0, 1.0], [24400.0, 3.0], [24800.0, 4.0], [25000.0, 5.0], [24600.0, 6.0], [25200.0, 6.0], [25600.0, 3.0], [25800.0, 5.0], [26000.0, 3.0], [26600.0, 6.0], [26400.0, 2.0], [27600.0, 6.0], [27200.0, 2.0], [27000.0, 6.0], [26800.0, 1.0], [27400.0, 2.0], [27800.0, 3.0], [28000.0, 5.0], [28200.0, 3.0], [28600.0, 2.0], [29400.0, 2.0], [29000.0, 2.0], [28800.0, 1.0], [29200.0, 4.0], [29600.0, 1.0], [30400.0, 1.0], [30600.0, 1.0], [30000.0, 1.0], [31000.0, 1.0], [30800.0, 1.0], [32200.0, 1.0], [33200.0, 1.0], [32800.0, 1.0], [33100.0, 1.0], [34700.0, 1.0], [16700.0, 3.0], [16500.0, 1.0], [16900.0, 3.0], [17100.0, 8.0], [17300.0, 3.0], [18100.0, 4.0], [18300.0, 5.0], [17500.0, 2.0], [17900.0, 3.0], [17700.0, 1.0], [18900.0, 3.0], [18700.0, 1.0], [18500.0, 5.0], [19300.0, 6.0], [19100.0, 2.0], [20100.0, 7.0], [20300.0, 3.0], [19500.0, 7.0], [19900.0, 8.0], [19700.0, 13.0], [21100.0, 10.0], [20500.0, 8.0], [20700.0, 7.0], [20900.0, 7.0], [21300.0, 9.0], [21500.0, 5.0], [22300.0, 2.0], [21700.0, 8.0], [22100.0, 3.0], [21900.0, 1.0], [22500.0, 1.0], [22700.0, 6.0], [23100.0, 1.0], [22900.0, 6.0], [23300.0, 5.0], [23500.0, 9.0], [23700.0, 5.0], [23900.0, 6.0], [24300.0, 3.0], [24100.0, 3.0], [24500.0, 1.0], [25300.0, 7.0], [25100.0, 13.0], [24700.0, 4.0], [25500.0, 5.0], [26500.0, 5.0], [26300.0, 1.0], [25900.0, 9.0], [25700.0, 4.0], [26100.0, 1.0], [26900.0, 4.0], [27300.0, 5.0], [26700.0, 4.0], [27500.0, 2.0], [27100.0, 2.0], [27700.0, 4.0], [27900.0, 8.0], [28100.0, 4.0], [28300.0, 1.0], [28500.0, 2.0], [28700.0, 4.0], [28900.0, 4.0], [29100.0, 1.0], [29300.0, 6.0], [29500.0, 2.0], [30300.0, 1.0], [29700.0, 6.0], [30500.0, 3.0], [30900.0, 1.0], [31500.0, 3.0], [31700.0, 1.0], [32700.0, 1.0], [32300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 175.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3492.0, "series": [{"data": [[0.0, 175.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 544.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3492.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.004889975550119, "minX": 1.57797204E12, "maxY": 172.9470588235295, "series": [{"data": [[1.57797216E12, 27.08506616257087], [1.57797234E12, 96.35294117647057], [1.57797204E12, 6.004889975550119], [1.57797222E12, 50.0], [1.5779724E12, 125.66090712742987], [1.5779721E12, 14.033707865168541], [1.57797228E12, 56.72744721689061], [1.57797246E12, 172.9470588235295]], "isOverall": false, "label": "\u767B\u5F55", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57797246E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 137.15540540540536, "minX": 1.0, "maxY": 23392.5, "series": [{"data": [[2.0, 217.33333333333334], [3.0, 319.85714285714283], [4.0, 411.5], [5.0, 1983.4444444444443], [6.0, 1605.6], [7.0, 1979.625], [8.0, 801.375], [9.0, 947.375], [10.0, 1157.8538622129443], [11.0, 2291.25], [12.0, 1199.3333333333335], [13.0, 1362.2222222222222], [14.0, 1515.6249999999998], [15.0, 4858.727272727272], [16.0, 2528.2307692307695], [17.0, 1771.857142857143], [18.0, 1807.8000000000002], [19.0, 3109.5714285714284], [20.0, 2271.4369565217403], [21.0, 4203.444444444444], [22.0, 3318.6363636363635], [23.0, 3619.666666666667], [24.0, 2386.357142857142], [25.0, 2490.2], [26.0, 2706.333333333333], [27.0, 5600.916666666668], [28.0, 3807.625], [29.0, 3747.3999999999996], [30.0, 3264.5], [31.0, 3485.5555555555557], [32.0, 5235.0625], [33.0, 4908.5], [34.0, 4146.2], [35.0, 5237.0], [36.0, 4946.181818181818], [37.0, 3839.6666666666665], [38.0, 5638.090909090909], [39.0, 4919.5], [40.0, 3986.6000000000004], [41.0, 5210.888888888889], [42.0, 6044.4], [43.0, 6378.0], [44.0, 5697.375], [45.0, 5469.444444444444], [46.0, 5951.875], [47.0, 4647.333333333333], [48.0, 6617.7692307692305], [49.0, 6728.666666666667], [50.0, 5516.221822541973], [51.0, 5444.166666666666], [52.0, 5492.666666666667], [53.0, 5769.25], [54.0, 5987.625000000001], [55.0, 5064.777777777777], [56.0, 5841.25], [57.0, 5755.384615384616], [58.0, 6093.857142857143], [59.0, 6332.166666666667], [60.0, 5961.166666666666], [61.0, 6359.666666666667], [62.0, 6346.0625], [63.0, 5994.0], [64.0, 7074.55], [65.0, 5515.000000000001], [66.0, 5826.333333333332], [67.0, 6055.4], [68.0, 6488.25], [69.0, 7003.833333333333], [71.0, 8416.222222222223], [72.0, 8349.666666666666], [73.0, 8845.875000000002], [74.0, 9406.0], [75.0, 8770.75], [76.0, 8780.888888888889], [77.0, 11823.75], [78.0, 7199.0], [79.0, 9572.111111111111], [80.0, 7401.222222222223], [81.0, 8437.0], [82.0, 12327.72972972973], [83.0, 8205.714285714284], [84.0, 9498.999999999998], [85.0, 12447.857142857143], [86.0, 9502.0], [87.0, 8576.25], [88.0, 11656.888888888887], [89.0, 9981.8], [90.0, 8255.1], [91.0, 9063.57142857143], [92.0, 9522.999999999998], [93.0, 10356.75], [94.0, 10487.076923076922], [95.0, 10919.555555555557], [96.0, 10974.714285714286], [97.0, 10934.076923076924], [98.0, 9375.785714285714], [99.0, 9369.625], [100.0, 11244.960720130945], [102.0, 11046.8], [103.0, 19004.5], [101.0, 21336.5], [107.0, 14609.833333333334], [105.0, 15698.0], [111.0, 11327.888888888889], [109.0, 17165.333333333332], [108.0, 17162.666666666668], [112.0, 12667.625], [113.0, 8417.0], [114.0, 15033.25], [115.0, 14539.5], [116.0, 11141.666666666666], [117.0, 12560.2], [118.0, 11984.333333333334], [121.0, 11990.0], [122.0, 11208.5], [123.0, 16507.333333333332], [120.0, 17468.0], [124.0, 11427.5], [125.0, 14593.0], [126.0, 13074.25], [127.0, 13971.0], [128.0, 12943.142857142857], [133.0, 11566.857142857143], [132.0, 18829.0], [129.0, 19001.0], [139.0, 11897.0], [140.0, 12149.333333333334], [142.0, 21828.5], [141.0, 21518.0], [138.0, 19870.0], [136.0, 19031.666666666668], [145.0, 12965.25], [151.0, 13479.6], [150.0, 21538.0], [149.0, 20696.0], [148.0, 21636.0], [147.0, 23392.5], [153.0, 12271.75], [156.0, 15318.625], [158.0, 18519.0], [155.0, 20462.0], [154.0, 21228.2], [160.0, 10640.0], [161.0, 17172.5], [164.0, 12144.5], [167.0, 15242.5], [166.0, 19674.0], [165.0, 19787.0], [163.0, 19784.0], [162.0, 21664.0], [175.0, 16473.0], [174.0, 19276.0], [173.0, 18164.0], [171.0, 19746.0], [170.0, 19556.0], [169.0, 17880.0], [168.0, 19606.0], [177.0, 13824.333333333334], [179.0, 15757.5], [181.0, 18112.0], [176.0, 19977.0], [184.0, 3107.0], [185.0, 2819.0], [186.0, 2535.5], [187.0, 2568.0], [188.0, 11863.5], [190.0, 12467.2], [191.0, 3618.0], [192.0, 16196.57142857143], [194.0, 3136.0], [196.0, 3590.0], [198.0, 10868.8], [199.0, 3177.25], [193.0, 18062.0], [200.0, 21952.40181818181], [1.0, 137.15540540540536]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[73.0933270007124, 8074.242460223215]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1656.45, "minX": 1.57797204E12, "maxY": 7874.466666666666, "series": [{"data": [[1.57797216E12, 6125.816666666667], [1.57797234E12, 6102.733333333334], [1.57797204E12, 4736.216666666666], [1.57797222E12, 6345.833333333333], [1.5779724E12, 5361.466666666666], [1.5779721E12, 6183.65], [1.57797228E12, 6033.266666666666], [1.57797246E12, 7874.466666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57797216E12, 2142.45], [1.57797234E12, 2134.35], [1.57797204E12, 1656.45], [1.57797222E12, 2219.4], [1.5779724E12, 1875.15], [1.5779721E12, 2162.7], [1.57797228E12, 2110.05], [1.57797246E12, 2754.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57797246E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 664.816625916871, "minX": 1.57797204E12, "maxY": 21265.522058823488, "series": [{"data": [[1.57797216E12, 2889.7372400756162], [1.57797234E12, 10589.485768500947], [1.57797204E12, 664.816625916871], [1.57797222E12, 5490.740875912401], [1.5779724E12, 11133.233261339106], [1.5779721E12, 1533.6516853932585], [1.57797228E12, 6096.4625719769665], [1.57797246E12, 21265.522058823488]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57797246E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 663.1026894865529, "minX": 1.57797204E12, "maxY": 21172.944117647065, "series": [{"data": [[1.57797216E12, 2886.4423440453716], [1.57797234E12, 10578.96394686907], [1.57797204E12, 663.1026894865529], [1.57797222E12, 5483.76277372263], [1.5779724E12, 11127.233261339099], [1.5779721E12, 1531.4737827715358], [1.57797228E12, 6090.909788867568], [1.57797246E12, 21172.944117647065]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57797246E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13.149905123339652, "minX": 1.57797204E12, "maxY": 13.973105134474327, "series": [{"data": [[1.57797216E12, 13.249527410207946], [1.57797234E12, 13.149905123339652], [1.57797204E12, 13.973105134474327], [1.57797222E12, 13.441605839416066], [1.5779724E12, 13.630669546436279], [1.5779721E12, 13.608614232209746], [1.57797228E12, 13.316698656429946], [1.57797246E12, 13.45735294117646]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57797246E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 130.0, "minX": 1.57797204E12, "maxY": 34964.0, "series": [{"data": [[1.57797216E12, 5956.0], [1.57797234E12, 30494.0], [1.57797204E12, 1347.0], [1.57797222E12, 7320.0], [1.5779724E12, 26310.0], [1.5779721E12, 2908.0], [1.57797228E12, 11996.0], [1.57797246E12, 34964.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57797216E12, 1763.0], [1.57797234E12, 5881.0], [1.57797204E12, 130.0], [1.57797222E12, 2809.0], [1.5779724E12, 1724.0], [1.5779721E12, 803.0], [1.57797228E12, 1533.0], [1.57797246E12, 8929.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57797216E12, 4530.0], [1.57797234E12, 12727.199999999999], [1.57797204E12, 1152.0], [1.57797222E12, 6037.1], [1.5779724E12, 14588.2], [1.5779721E12, 2280.5], [1.57797228E12, 7956.0], [1.57797246E12, 28016.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57797216E12, 5446.100000000004], [1.57797234E12, 27737.52], [1.57797204E12, 1310.2999999999997], [1.57797222E12, 6785.95], [1.5779724E12, 24876.880000000005], [1.5779721E12, 2634.9499999999994], [1.57797228E12, 9875.319999999998], [1.57797246E12, 32751.29999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57797216E12, 4928.5], [1.57797234E12, 19678.6], [1.57797204E12, 1193.0], [1.57797222E12, 6184.2], [1.5779724E12, 21618.599999999988], [1.5779721E12, 2392.0], [1.57797228E12, 8775.899999999998], [1.57797246E12, 29360.299999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57797246E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2195.0, "minX": 1.0, "maxY": 29297.0, "series": [{"data": [[2.0, 10024.5], [34.0, 23238.5], [44.0, 22553.0], [3.0, 7137.5], [53.0, 25932.0], [4.0, 9277.5], [5.0, 6247.0], [86.0, 16278.5], [6.0, 4978.0], [7.0, 2195.0], [8.0, 2219.0], [9.0, 4579.0], [10.0, 2265.5], [11.0, 5569.0], [12.0, 5605.0], [13.0, 5544.0], [14.0, 5876.0], [15.0, 10844.0], [16.0, 13047.0], [1.0, 11777.0], [17.0, 8771.0], [18.0, 10240.0], [19.0, 11978.5], [20.0, 11312.0], [21.0, 12660.0], [24.0, 18068.0], [25.0, 29297.0], [26.0, 10492.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2195.0, "minX": 1.0, "maxY": 29297.0, "series": [{"data": [[2.0, 10024.5], [34.0, 23238.5], [44.0, 21848.0], [3.0, 7137.5], [53.0, 25906.0], [4.0, 9277.5], [5.0, 6247.0], [86.0, 16278.5], [6.0, 4977.5], [7.0, 2195.0], [8.0, 2219.0], [9.0, 4579.0], [10.0, 2265.5], [11.0, 5569.0], [12.0, 5605.0], [13.0, 5544.0], [14.0, 5876.0], [15.0, 10844.0], [16.0, 13047.0], [1.0, 11777.0], [17.0, 8771.0], [18.0, 10240.0], [19.0, 11940.0], [20.0, 11312.0], [21.0, 12660.0], [24.0, 18068.0], [25.0, 29297.0], [26.0, 10492.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.983333333333333, "minX": 1.57797204E12, "maxY": 9.35, "series": [{"data": [[1.57797216E12, 9.316666666666666], [1.57797234E12, 9.116666666666667], [1.57797204E12, 6.983333333333333], [1.57797222E12, 9.133333333333333], [1.5779724E12, 9.35], [1.5779721E12, 9.066666666666666], [1.57797228E12, 9.183333333333334], [1.57797246E12, 8.033333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57797246E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.816666666666666, "minX": 1.57797204E12, "maxY": 11.333333333333334, "series": [{"data": [[1.57797216E12, 8.816666666666666], [1.57797234E12, 8.783333333333333], [1.57797204E12, 6.816666666666666], [1.57797222E12, 9.133333333333333], [1.5779724E12, 7.716666666666667], [1.5779721E12, 8.9], [1.57797228E12, 8.683333333333334], [1.57797246E12, 11.333333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57797246E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.816666666666666, "minX": 1.57797204E12, "maxY": 11.333333333333334, "series": [{"data": [[1.57797216E12, 8.816666666666666], [1.57797234E12, 8.783333333333333], [1.57797204E12, 6.816666666666666], [1.57797222E12, 9.133333333333333], [1.5779724E12, 7.716666666666667], [1.5779721E12, 8.9], [1.57797228E12, 8.683333333333334], [1.57797246E12, 11.333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57797246E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.816666666666666, "minX": 1.57797204E12, "maxY": 11.333333333333334, "series": [{"data": [[1.57797216E12, 8.816666666666666], [1.57797234E12, 8.783333333333333], [1.57797204E12, 6.816666666666666], [1.57797222E12, 9.133333333333333], [1.5779724E12, 7.716666666666667], [1.5779721E12, 8.9], [1.57797228E12, 8.683333333333334], [1.57797246E12, 11.333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57797246E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

