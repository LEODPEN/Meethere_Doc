/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 131.0, "minX": 0.0, "maxY": 53223.0, "series": [{"data": [[0.0, 131.0], [0.1, 133.0], [0.2, 137.0], [0.3, 142.0], [0.4, 158.0], [0.5, 164.0], [0.6, 168.0], [0.7, 178.0], [0.8, 212.0], [0.9, 221.0], [1.0, 224.0], [1.1, 244.0], [1.2, 247.0], [1.3, 270.0], [1.4, 277.0], [1.5, 294.0], [1.6, 301.0], [1.7, 311.0], [1.8, 354.0], [1.9, 371.0], [2.0, 377.0], [2.1, 409.0], [2.2, 421.0], [2.3, 457.0], [2.4, 460.0], [2.5, 486.0], [2.6, 490.0], [2.7, 503.0], [2.8, 511.0], [2.9, 536.0], [3.0, 545.0], [3.1, 548.0], [3.2, 562.0], [3.3, 573.0], [3.4, 584.0], [3.5, 590.0], [3.6, 616.0], [3.7, 625.0], [3.8, 660.0], [3.9, 665.0], [4.0, 674.0], [4.1, 694.0], [4.2, 699.0], [4.3, 703.0], [4.4, 709.0], [4.5, 713.0], [4.6, 718.0], [4.7, 722.0], [4.8, 726.0], [4.9, 743.0], [5.0, 765.0], [5.1, 768.0], [5.2, 782.0], [5.3, 788.0], [5.4, 800.0], [5.5, 805.0], [5.6, 821.0], [5.7, 834.0], [5.8, 839.0], [5.9, 848.0], [6.0, 850.0], [6.1, 851.0], [6.2, 891.0], [6.3, 901.0], [6.4, 903.0], [6.5, 922.0], [6.6, 926.0], [6.7, 944.0], [6.8, 963.0], [6.9, 984.0], [7.0, 988.0], [7.1, 996.0], [7.2, 1005.0], [7.3, 1013.0], [7.4, 1019.0], [7.5, 1029.0], [7.6, 1036.0], [7.7, 1045.0], [7.8, 1078.0], [7.9, 1124.0], [8.0, 1135.0], [8.1, 1149.0], [8.2, 1157.0], [8.3, 1170.0], [8.4, 1173.0], [8.5, 1193.0], [8.6, 1203.0], [8.7, 1231.0], [8.8, 1252.0], [8.9, 1258.0], [9.0, 1270.0], [9.1, 1275.0], [9.2, 1293.0], [9.3, 1303.0], [9.4, 1305.0], [9.5, 1305.0], [9.6, 1320.0], [9.7, 1324.0], [9.8, 1325.0], [9.9, 1332.0], [10.0, 1335.0], [10.1, 1338.0], [10.2, 1345.0], [10.3, 1349.0], [10.4, 1353.0], [10.5, 1355.0], [10.6, 1357.0], [10.7, 1359.0], [10.8, 1365.0], [10.9, 1365.0], [11.0, 1371.0], [11.1, 1371.0], [11.2, 1376.0], [11.3, 1377.0], [11.4, 1380.0], [11.5, 1383.0], [11.6, 1386.0], [11.7, 1391.0], [11.8, 1391.0], [11.9, 1393.0], [12.0, 1396.0], [12.1, 1399.0], [12.2, 1399.0], [12.3, 1402.0], [12.4, 1404.0], [12.5, 1405.0], [12.6, 1407.0], [12.7, 1409.0], [12.8, 1410.0], [12.9, 1410.0], [13.0, 1411.0], [13.1, 1411.0], [13.2, 1412.0], [13.3, 1414.0], [13.4, 1414.0], [13.5, 1415.0], [13.6, 1415.0], [13.7, 1416.0], [13.8, 1417.0], [13.9, 1417.0], [14.0, 1418.0], [14.1, 1418.0], [14.2, 1419.0], [14.3, 1419.0], [14.4, 1420.0], [14.5, 1421.0], [14.6, 1422.0], [14.7, 1423.0], [14.8, 1424.0], [14.9, 1425.0], [15.0, 1426.0], [15.1, 1427.0], [15.2, 1428.0], [15.3, 1428.0], [15.4, 1428.0], [15.5, 1429.0], [15.6, 1430.0], [15.7, 1430.0], [15.8, 1431.0], [15.9, 1432.0], [16.0, 1433.0], [16.1, 1434.0], [16.2, 1434.0], [16.3, 1435.0], [16.4, 1436.0], [16.5, 1437.0], [16.6, 1437.0], [16.7, 1439.0], [16.8, 1439.0], [16.9, 1441.0], [17.0, 1441.0], [17.1, 1442.0], [17.2, 1443.0], [17.3, 1443.0], [17.4, 1443.0], [17.5, 1444.0], [17.6, 1444.0], [17.7, 1445.0], [17.8, 1445.0], [17.9, 1445.0], [18.0, 1445.0], [18.1, 1446.0], [18.2, 1446.0], [18.3, 1447.0], [18.4, 1447.0], [18.5, 1447.0], [18.6, 1448.0], [18.7, 1449.0], [18.8, 1449.0], [18.9, 1450.0], [19.0, 1450.0], [19.1, 1451.0], [19.2, 1451.0], [19.3, 1451.0], [19.4, 1452.0], [19.5, 1452.0], [19.6, 1452.0], [19.7, 1453.0], [19.8, 1453.0], [19.9, 1453.0], [20.0, 1453.0], [20.1, 1454.0], [20.2, 1454.0], [20.3, 1455.0], [20.4, 1455.0], [20.5, 1456.0], [20.6, 1456.0], [20.7, 1457.0], [20.8, 1457.0], [20.9, 1457.0], [21.0, 1457.0], [21.1, 1458.0], [21.2, 1459.0], [21.3, 1460.0], [21.4, 1461.0], [21.5, 1461.0], [21.6, 1462.0], [21.7, 1462.0], [21.8, 1463.0], [21.9, 1465.0], [22.0, 1466.0], [22.1, 1467.0], [22.2, 1467.0], [22.3, 1468.0], [22.4, 1468.0], [22.5, 1469.0], [22.6, 1469.0], [22.7, 1469.0], [22.8, 1469.0], [22.9, 1470.0], [23.0, 1472.0], [23.1, 1473.0], [23.2, 1473.0], [23.3, 1474.0], [23.4, 1475.0], [23.5, 1475.0], [23.6, 1476.0], [23.7, 1476.0], [23.8, 1478.0], [23.9, 1478.0], [24.0, 1479.0], [24.1, 1480.0], [24.2, 1481.0], [24.3, 1481.0], [24.4, 1481.0], [24.5, 1482.0], [24.6, 1483.0], [24.7, 1484.0], [24.8, 1485.0], [24.9, 1486.0], [25.0, 1486.0], [25.1, 1487.0], [25.2, 1487.0], [25.3, 1488.0], [25.4, 1490.0], [25.5, 1490.0], [25.6, 1491.0], [25.7, 1492.0], [25.8, 1493.0], [25.9, 1495.0], [26.0, 1497.0], [26.1, 1498.0], [26.2, 1498.0], [26.3, 1499.0], [26.4, 1501.0], [26.5, 1501.0], [26.6, 1504.0], [26.7, 1506.0], [26.8, 1506.0], [26.9, 1507.0], [27.0, 1510.0], [27.1, 1511.0], [27.2, 1511.0], [27.3, 1512.0], [27.4, 1513.0], [27.5, 1514.0], [27.6, 1515.0], [27.7, 1515.0], [27.8, 1516.0], [27.9, 1517.0], [28.0, 1519.0], [28.1, 1520.0], [28.2, 1523.0], [28.3, 1524.0], [28.4, 1527.0], [28.5, 1528.0], [28.6, 1529.0], [28.7, 1531.0], [28.8, 1533.0], [28.9, 1534.0], [29.0, 1538.0], [29.1, 1539.0], [29.2, 1540.0], [29.3, 1541.0], [29.4, 1541.0], [29.5, 1543.0], [29.6, 1545.0], [29.7, 1549.0], [29.8, 1551.0], [29.9, 1553.0], [30.0, 1557.0], [30.1, 1559.0], [30.2, 1564.0], [30.3, 1575.0], [30.4, 1576.0], [30.5, 1586.0], [30.6, 1590.0], [30.7, 1592.0], [30.8, 1598.0], [30.9, 1603.0], [31.0, 1606.0], [31.1, 1613.0], [31.2, 1615.0], [31.3, 1627.0], [31.4, 1631.0], [31.5, 1646.0], [31.6, 1651.0], [31.7, 1659.0], [31.8, 1669.0], [31.9, 1678.0], [32.0, 1690.0], [32.1, 1692.0], [32.2, 1712.0], [32.3, 1725.0], [32.4, 1735.0], [32.5, 1748.0], [32.6, 1760.0], [32.7, 1787.0], [32.8, 1794.0], [32.9, 1807.0], [33.0, 1818.0], [33.1, 1827.0], [33.2, 1841.0], [33.3, 1866.0], [33.4, 1895.0], [33.5, 1922.0], [33.6, 1951.0], [33.7, 1959.0], [33.8, 2029.0], [33.9, 2052.0], [34.0, 2077.0], [34.1, 2111.0], [34.2, 2199.0], [34.3, 2246.0], [34.4, 2290.0], [34.5, 2309.0], [34.6, 2342.0], [34.7, 2389.0], [34.8, 2447.0], [34.9, 2486.0], [35.0, 2520.0], [35.1, 2555.0], [35.2, 2625.0], [35.3, 2639.0], [35.4, 2659.0], [35.5, 2737.0], [35.6, 2772.0], [35.7, 2789.0], [35.8, 2808.0], [35.9, 2837.0], [36.0, 2864.0], [36.1, 2875.0], [36.2, 2882.0], [36.3, 2909.0], [36.4, 2917.0], [36.5, 2936.0], [36.6, 2942.0], [36.7, 2969.0], [36.8, 2972.0], [36.9, 3009.0], [37.0, 3029.0], [37.1, 3042.0], [37.2, 3064.0], [37.3, 3074.0], [37.4, 3103.0], [37.5, 3122.0], [37.6, 3135.0], [37.7, 3165.0], [37.8, 3240.0], [37.9, 3252.0], [38.0, 3280.0], [38.1, 3315.0], [38.2, 3317.0], [38.3, 3378.0], [38.4, 3406.0], [38.5, 3468.0], [38.6, 3510.0], [38.7, 3511.0], [38.8, 3527.0], [38.9, 3564.0], [39.0, 3601.0], [39.1, 3630.0], [39.2, 3645.0], [39.3, 3666.0], [39.4, 3672.0], [39.5, 3692.0], [39.6, 3736.0], [39.7, 3739.0], [39.8, 3747.0], [39.9, 3759.0], [40.0, 3767.0], [40.1, 3788.0], [40.2, 3811.0], [40.3, 3844.0], [40.4, 3847.0], [40.5, 3849.0], [40.6, 3861.0], [40.7, 3869.0], [40.8, 3892.0], [40.9, 3893.0], [41.0, 3904.0], [41.1, 3924.0], [41.2, 3941.0], [41.3, 4000.0], [41.4, 4005.0], [41.5, 4030.0], [41.6, 4051.0], [41.7, 4077.0], [41.8, 4092.0], [41.9, 4112.0], [42.0, 4141.0], [42.1, 4154.0], [42.2, 4230.0], [42.3, 4299.0], [42.4, 4404.0], [42.5, 4505.0], [42.6, 4577.0], [42.7, 4586.0], [42.8, 4633.0], [42.9, 4638.0], [43.0, 4755.0], [43.1, 4851.0], [43.2, 4867.0], [43.3, 4939.0], [43.4, 4990.0], [43.5, 5061.0], [43.6, 5090.0], [43.7, 5137.0], [43.8, 5170.0], [43.9, 5243.0], [44.0, 5398.0], [44.1, 5420.0], [44.2, 5453.0], [44.3, 5493.0], [44.4, 5562.0], [44.5, 5600.0], [44.6, 5662.0], [44.7, 5690.0], [44.8, 5746.0], [44.9, 5752.0], [45.0, 5863.0], [45.1, 6009.0], [45.2, 6079.0], [45.3, 6153.0], [45.4, 6176.0], [45.5, 6573.0], [45.6, 6839.0], [45.7, 6950.0], [45.8, 7033.0], [45.9, 7180.0], [46.0, 7484.0], [46.1, 7666.0], [46.2, 7848.0], [46.3, 7937.0], [46.4, 8267.0], [46.5, 8396.0], [46.6, 8414.0], [46.7, 8451.0], [46.8, 8471.0], [46.9, 8562.0], [47.0, 8661.0], [47.1, 8700.0], [47.2, 8733.0], [47.3, 8800.0], [47.4, 8826.0], [47.5, 8846.0], [47.6, 8913.0], [47.7, 8920.0], [47.8, 8949.0], [47.9, 9017.0], [48.0, 9082.0], [48.1, 9136.0], [48.2, 9157.0], [48.3, 9177.0], [48.4, 9181.0], [48.5, 9206.0], [48.6, 9229.0], [48.7, 9294.0], [48.8, 9301.0], [48.9, 9303.0], [49.0, 9341.0], [49.1, 9352.0], [49.2, 9357.0], [49.3, 9372.0], [49.4, 9459.0], [49.5, 9461.0], [49.6, 9558.0], [49.7, 9565.0], [49.8, 9647.0], [49.9, 9659.0], [50.0, 9687.0], [50.1, 9730.0], [50.2, 9750.0], [50.3, 9799.0], [50.4, 9803.0], [50.5, 9850.0], [50.6, 9877.0], [50.7, 9915.0], [50.8, 9928.0], [50.9, 9981.0], [51.0, 10045.0], [51.1, 10090.0], [51.2, 10176.0], [51.3, 10207.0], [51.4, 10337.0], [51.5, 10377.0], [51.6, 10573.0], [51.7, 10658.0], [51.8, 10690.0], [51.9, 10734.0], [52.0, 10749.0], [52.1, 10785.0], [52.2, 10791.0], [52.3, 10877.0], [52.4, 10905.0], [52.5, 11025.0], [52.6, 11070.0], [52.7, 11170.0], [52.8, 11296.0], [52.9, 11349.0], [53.0, 11390.0], [53.1, 11398.0], [53.2, 11431.0], [53.3, 11568.0], [53.4, 11615.0], [53.5, 11862.0], [53.6, 11921.0], [53.7, 12017.0], [53.8, 12092.0], [53.9, 12197.0], [54.0, 12559.0], [54.1, 12681.0], [54.2, 12716.0], [54.3, 12935.0], [54.4, 13080.0], [54.5, 13365.0], [54.6, 13398.0], [54.7, 13525.0], [54.8, 13715.0], [54.9, 13805.0], [55.0, 14529.0], [55.1, 14562.0], [55.2, 14778.0], [55.3, 14904.0], [55.4, 14932.0], [55.5, 14987.0], [55.6, 15075.0], [55.7, 15205.0], [55.8, 15222.0], [55.9, 15337.0], [56.0, 15372.0], [56.1, 15413.0], [56.2, 15535.0], [56.3, 15553.0], [56.4, 15576.0], [56.5, 15624.0], [56.6, 15629.0], [56.7, 15664.0], [56.8, 15692.0], [56.9, 15711.0], [57.0, 15758.0], [57.1, 15824.0], [57.2, 15874.0], [57.3, 16034.0], [57.4, 16129.0], [57.5, 16298.0], [57.6, 16342.0], [57.7, 16548.0], [57.8, 16589.0], [57.9, 16712.0], [58.0, 17030.0], [58.1, 17100.0], [58.2, 17245.0], [58.3, 17285.0], [58.4, 17440.0], [58.5, 17506.0], [58.6, 17707.0], [58.7, 17781.0], [58.8, 17827.0], [58.9, 17863.0], [59.0, 17928.0], [59.1, 17988.0], [59.2, 18059.0], [59.3, 18164.0], [59.4, 18262.0], [59.5, 18322.0], [59.6, 18430.0], [59.7, 18600.0], [59.8, 18744.0], [59.9, 18774.0], [60.0, 18902.0], [60.1, 18924.0], [60.2, 19062.0], [60.3, 19091.0], [60.4, 19116.0], [60.5, 19156.0], [60.6, 19225.0], [60.7, 19290.0], [60.8, 19368.0], [60.9, 19433.0], [61.0, 19520.0], [61.1, 19597.0], [61.2, 19615.0], [61.3, 19709.0], [61.4, 19713.0], [61.5, 19784.0], [61.6, 19827.0], [61.7, 19828.0], [61.8, 19861.0], [61.9, 19889.0], [62.0, 19930.0], [62.1, 19937.0], [62.2, 19989.0], [62.3, 20053.0], [62.4, 20105.0], [62.5, 20192.0], [62.6, 20224.0], [62.7, 20242.0], [62.8, 20325.0], [62.9, 20361.0], [63.0, 20483.0], [63.1, 20522.0], [63.2, 20530.0], [63.3, 20552.0], [63.4, 20631.0], [63.5, 20644.0], [63.6, 20776.0], [63.7, 20796.0], [63.8, 20850.0], [63.9, 20925.0], [64.0, 20965.0], [64.1, 21024.0], [64.2, 21076.0], [64.3, 21166.0], [64.4, 21205.0], [64.5, 21295.0], [64.6, 21349.0], [64.7, 21370.0], [64.8, 21387.0], [64.9, 21471.0], [65.0, 21657.0], [65.1, 21677.0], [65.2, 21683.0], [65.3, 21714.0], [65.4, 21813.0], [65.5, 21943.0], [65.6, 21994.0], [65.7, 22032.0], [65.8, 22065.0], [65.9, 22091.0], [66.0, 22100.0], [66.1, 22110.0], [66.2, 22154.0], [66.3, 22217.0], [66.4, 22240.0], [66.5, 22265.0], [66.6, 22364.0], [66.7, 22409.0], [66.8, 22440.0], [66.9, 22457.0], [67.0, 22483.0], [67.1, 22509.0], [67.2, 22527.0], [67.3, 22543.0], [67.4, 22564.0], [67.5, 22623.0], [67.6, 22681.0], [67.7, 22740.0], [67.8, 22787.0], [67.9, 22833.0], [68.0, 22900.0], [68.1, 23073.0], [68.2, 23112.0], [68.3, 23133.0], [68.4, 23139.0], [68.5, 23167.0], [68.6, 23208.0], [68.7, 23265.0], [68.8, 23291.0], [68.9, 23328.0], [69.0, 23361.0], [69.1, 23379.0], [69.2, 23418.0], [69.3, 23447.0], [69.4, 23452.0], [69.5, 23478.0], [69.6, 23534.0], [69.7, 23578.0], [69.8, 23591.0], [69.9, 23627.0], [70.0, 23765.0], [70.1, 23867.0], [70.2, 23930.0], [70.3, 23975.0], [70.4, 24014.0], [70.5, 24017.0], [70.6, 24098.0], [70.7, 24131.0], [70.8, 24165.0], [70.9, 24206.0], [71.0, 24284.0], [71.1, 24334.0], [71.2, 24337.0], [71.3, 24343.0], [71.4, 24374.0], [71.5, 24484.0], [71.6, 24521.0], [71.7, 24527.0], [71.8, 24687.0], [71.9, 24725.0], [72.0, 24803.0], [72.1, 25062.0], [72.2, 25165.0], [72.3, 25272.0], [72.4, 25382.0], [72.5, 25389.0], [72.6, 25425.0], [72.7, 25429.0], [72.8, 25465.0], [72.9, 25493.0], [73.0, 25505.0], [73.1, 25647.0], [73.2, 25733.0], [73.3, 25834.0], [73.4, 25838.0], [73.5, 25847.0], [73.6, 25877.0], [73.7, 25944.0], [73.8, 25993.0], [73.9, 26046.0], [74.0, 26362.0], [74.1, 26363.0], [74.2, 26497.0], [74.3, 26568.0], [74.4, 26634.0], [74.5, 26725.0], [74.6, 26840.0], [74.7, 26925.0], [74.8, 27010.0], [74.9, 27136.0], [75.0, 27164.0], [75.1, 27170.0], [75.2, 27260.0], [75.3, 27457.0], [75.4, 27468.0], [75.5, 27583.0], [75.6, 27650.0], [75.7, 27660.0], [75.8, 27906.0], [75.9, 27937.0], [76.0, 27975.0], [76.1, 27977.0], [76.2, 28060.0], [76.3, 28085.0], [76.4, 28098.0], [76.5, 28172.0], [76.6, 28186.0], [76.7, 28193.0], [76.8, 28210.0], [76.9, 28219.0], [77.0, 28226.0], [77.1, 28235.0], [77.2, 28266.0], [77.3, 28289.0], [77.4, 28333.0], [77.5, 28347.0], [77.6, 28467.0], [77.7, 28478.0], [77.8, 28554.0], [77.9, 28569.0], [78.0, 28579.0], [78.1, 28627.0], [78.2, 28632.0], [78.3, 28659.0], [78.4, 28660.0], [78.5, 28673.0], [78.6, 28726.0], [78.7, 28802.0], [78.8, 28848.0], [78.9, 28894.0], [79.0, 28950.0], [79.1, 28975.0], [79.2, 29004.0], [79.3, 29071.0], [79.4, 29076.0], [79.5, 29099.0], [79.6, 29173.0], [79.7, 29218.0], [79.8, 29313.0], [79.9, 29372.0], [80.0, 29402.0], [80.1, 29435.0], [80.2, 29522.0], [80.3, 29584.0], [80.4, 29646.0], [80.5, 29703.0], [80.6, 29796.0], [80.7, 29830.0], [80.8, 29985.0], [80.9, 30131.0], [81.0, 30202.0], [81.1, 30209.0], [81.2, 30285.0], [81.3, 30321.0], [81.4, 30353.0], [81.5, 30550.0], [81.6, 30674.0], [81.7, 30758.0], [81.8, 30816.0], [81.9, 30868.0], [82.0, 30960.0], [82.1, 31175.0], [82.2, 31574.0], [82.3, 31686.0], [82.4, 31697.0], [82.5, 31770.0], [82.6, 31826.0], [82.7, 31833.0], [82.8, 31881.0], [82.9, 32015.0], [83.0, 32241.0], [83.1, 32309.0], [83.2, 32346.0], [83.3, 32351.0], [83.4, 32419.0], [83.5, 32507.0], [83.6, 32603.0], [83.7, 32680.0], [83.8, 32708.0], [83.9, 32754.0], [84.0, 32863.0], [84.1, 32879.0], [84.2, 32916.0], [84.3, 32964.0], [84.4, 32976.0], [84.5, 32989.0], [84.6, 33063.0], [84.7, 33227.0], [84.8, 33431.0], [84.9, 33595.0], [85.0, 33608.0], [85.1, 33645.0], [85.2, 33656.0], [85.3, 33703.0], [85.4, 33709.0], [85.5, 33720.0], [85.6, 33730.0], [85.7, 33787.0], [85.8, 33803.0], [85.9, 33830.0], [86.0, 33842.0], [86.1, 33859.0], [86.2, 33925.0], [86.3, 33967.0], [86.4, 34005.0], [86.5, 34027.0], [86.6, 34088.0], [86.7, 34104.0], [86.8, 34184.0], [86.9, 34240.0], [87.0, 34242.0], [87.1, 34349.0], [87.2, 34373.0], [87.3, 34510.0], [87.4, 34534.0], [87.5, 34592.0], [87.6, 34659.0], [87.7, 34668.0], [87.8, 34699.0], [87.9, 34711.0], [88.0, 34733.0], [88.1, 34746.0], [88.2, 34768.0], [88.3, 34793.0], [88.4, 34812.0], [88.5, 34827.0], [88.6, 34869.0], [88.7, 34903.0], [88.8, 34923.0], [88.9, 34951.0], [89.0, 34962.0], [89.1, 35016.0], [89.2, 35035.0], [89.3, 35049.0], [89.4, 35079.0], [89.5, 35142.0], [89.6, 35198.0], [89.7, 35223.0], [89.8, 35244.0], [89.9, 35255.0], [90.0, 35291.0], [90.1, 35302.0], [90.2, 35313.0], [90.3, 35326.0], [90.4, 35367.0], [90.5, 35410.0], [90.6, 35433.0], [90.7, 35439.0], [90.8, 35463.0], [90.9, 35501.0], [91.0, 35518.0], [91.1, 35526.0], [91.2, 35528.0], [91.3, 35540.0], [91.4, 35627.0], [91.5, 35650.0], [91.6, 35700.0], [91.7, 35731.0], [91.8, 35759.0], [91.9, 35837.0], [92.0, 35903.0], [92.1, 35928.0], [92.2, 35980.0], [92.3, 36066.0], [92.4, 36125.0], [92.5, 36222.0], [92.6, 36531.0], [92.7, 36696.0], [92.8, 36696.0], [92.9, 36777.0], [93.0, 37181.0], [93.1, 37252.0], [93.2, 37278.0], [93.3, 37299.0], [93.4, 37333.0], [93.5, 37358.0], [93.6, 37512.0], [93.7, 37629.0], [93.8, 37707.0], [93.9, 37738.0], [94.0, 37885.0], [94.1, 37924.0], [94.2, 38018.0], [94.3, 38095.0], [94.4, 38335.0], [94.5, 38548.0], [94.6, 38609.0], [94.7, 39025.0], [94.8, 39070.0], [94.9, 39164.0], [95.0, 39262.0], [95.1, 39357.0], [95.2, 39452.0], [95.3, 39634.0], [95.4, 39973.0], [95.5, 40011.0], [95.6, 40097.0], [95.7, 40284.0], [95.8, 40396.0], [95.9, 40462.0], [96.0, 40604.0], [96.1, 41020.0], [96.2, 41055.0], [96.3, 41074.0], [96.4, 41096.0], [96.5, 41382.0], [96.6, 41448.0], [96.7, 41478.0], [96.8, 41496.0], [96.9, 41518.0], [97.0, 41632.0], [97.1, 41649.0], [97.2, 42134.0], [97.3, 42406.0], [97.4, 42697.0], [97.5, 42793.0], [97.6, 42820.0], [97.7, 43193.0], [97.8, 43215.0], [97.9, 43634.0], [98.0, 43909.0], [98.1, 44173.0], [98.2, 44351.0], [98.3, 44557.0], [98.4, 45173.0], [98.5, 45223.0], [98.6, 45269.0], [98.7, 45323.0], [98.8, 45420.0], [98.9, 45497.0], [99.0, 45572.0], [99.1, 45883.0], [99.2, 46234.0], [99.3, 46272.0], [99.4, 46300.0], [99.5, 46376.0], [99.6, 46424.0], [99.7, 48561.0], [99.8, 49519.0], [99.9, 50579.0]], "isOverall": false, "label": "Search Gyms", "isController": false}, {"data": [[0.0, 135.0], [0.1, 135.0], [0.2, 135.0], [0.3, 135.0], [0.4, 135.0], [0.5, 135.0], [0.6, 135.0], [0.7, 135.0], [0.8, 135.0], [0.9, 135.0], [1.0, 135.0], [1.1, 135.0], [1.2, 135.0], [1.3, 135.0], [1.4, 135.0], [1.5, 135.0], [1.6, 135.0], [1.7, 135.0], [1.8, 135.0], [1.9, 135.0], [2.0, 135.0], [2.1, 135.0], [2.2, 135.0], [2.3, 135.0], [2.4, 135.0], [2.5, 135.0], [2.6, 135.0], [2.7, 135.0], [2.8, 135.0], [2.9, 135.0], [3.0, 135.0], [3.1, 135.0], [3.2, 135.0], [3.3, 135.0], [3.4, 135.0], [3.5, 135.0], [3.6, 135.0], [3.7, 135.0], [3.8, 135.0], [3.9, 135.0], [4.0, 135.0], [4.1, 135.0], [4.2, 135.0], [4.3, 135.0], [4.4, 135.0], [4.5, 135.0], [4.6, 135.0], [4.7, 135.0], [4.8, 135.0], [4.9, 135.0], [5.0, 135.0], [5.1, 135.0], [5.2, 135.0], [5.3, 135.0], [5.4, 135.0], [5.5, 135.0], [5.6, 135.0], [5.7, 135.0], [5.8, 135.0], [5.9, 135.0], [6.0, 135.0], [6.1, 135.0], [6.2, 135.0], [6.3, 135.0], [6.4, 135.0], [6.5, 135.0], [6.6, 135.0], [6.7, 135.0], [6.8, 135.0], [6.9, 135.0], [7.0, 135.0], [7.1, 135.0], [7.2, 135.0], [7.3, 135.0], [7.4, 135.0], [7.5, 135.0], [7.6, 135.0], [7.7, 135.0], [7.8, 135.0], [7.9, 135.0], [8.0, 135.0], [8.1, 135.0], [8.2, 135.0], [8.3, 135.0], [8.4, 135.0], [8.5, 135.0], [8.6, 135.0], [8.7, 135.0], [8.8, 135.0], [8.9, 135.0], [9.0, 135.0], [9.1, 135.0], [9.2, 135.0], [9.3, 135.0], [9.4, 135.0], [9.5, 135.0], [9.6, 135.0], [9.7, 135.0], [9.8, 135.0], [9.9, 135.0], [10.0, 135.0], [10.1, 135.0], [10.2, 135.0], [10.3, 135.0], [10.4, 135.0], [10.5, 135.0], [10.6, 135.0], [10.7, 135.0], [10.8, 135.0], [10.9, 135.0], [11.0, 135.0], [11.1, 135.0], [11.2, 135.0], [11.3, 135.0], [11.4, 135.0], [11.5, 135.0], [11.6, 135.0], [11.7, 135.0], [11.8, 135.0], [11.9, 135.0], [12.0, 135.0], [12.1, 135.0], [12.2, 135.0], [12.3, 135.0], [12.4, 135.0], [12.5, 135.0], [12.6, 135.0], [12.7, 135.0], [12.8, 135.0], [12.9, 135.0], [13.0, 135.0], [13.1, 135.0], [13.2, 135.0], [13.3, 135.0], [13.4, 135.0], [13.5, 135.0], [13.6, 135.0], [13.7, 135.0], [13.8, 135.0], [13.9, 135.0], [14.0, 135.0], [14.1, 135.0], [14.2, 135.0], [14.3, 135.0], [14.4, 135.0], [14.5, 135.0], [14.6, 135.0], [14.7, 135.0], [14.8, 135.0], [14.9, 135.0], [15.0, 135.0], [15.1, 135.0], [15.2, 135.0], [15.3, 135.0], [15.4, 135.0], [15.5, 135.0], [15.6, 135.0], [15.7, 135.0], [15.8, 135.0], [15.9, 135.0], [16.0, 135.0], [16.1, 135.0], [16.2, 135.0], [16.3, 135.0], [16.4, 135.0], [16.5, 135.0], [16.6, 135.0], [16.7, 135.0], [16.8, 135.0], [16.9, 135.0], [17.0, 135.0], [17.1, 135.0], [17.2, 135.0], [17.3, 135.0], [17.4, 135.0], [17.5, 135.0], [17.6, 135.0], [17.7, 135.0], [17.8, 135.0], [17.9, 135.0], [18.0, 135.0], [18.1, 135.0], [18.2, 135.0], [18.3, 135.0], [18.4, 135.0], [18.5, 135.0], [18.6, 135.0], [18.7, 135.0], [18.8, 135.0], [18.9, 135.0], [19.0, 135.0], [19.1, 135.0], [19.2, 135.0], [19.3, 135.0], [19.4, 135.0], [19.5, 135.0], [19.6, 135.0], [19.7, 135.0], [19.8, 135.0], [19.9, 135.0], [20.0, 135.0], [20.1, 135.0], [20.2, 135.0], [20.3, 135.0], [20.4, 135.0], [20.5, 135.0], [20.6, 135.0], [20.7, 135.0], [20.8, 135.0], [20.9, 135.0], [21.0, 135.0], [21.1, 135.0], [21.2, 135.0], [21.3, 135.0], [21.4, 135.0], [21.5, 135.0], [21.6, 135.0], [21.7, 135.0], [21.8, 135.0], [21.9, 135.0], [22.0, 135.0], [22.1, 135.0], [22.2, 135.0], [22.3, 135.0], [22.4, 135.0], [22.5, 135.0], [22.6, 135.0], [22.7, 135.0], [22.8, 135.0], [22.9, 135.0], [23.0, 135.0], [23.1, 135.0], [23.2, 135.0], [23.3, 135.0], [23.4, 135.0], [23.5, 135.0], [23.6, 135.0], [23.7, 135.0], [23.8, 135.0], [23.9, 135.0], [24.0, 135.0], [24.1, 135.0], [24.2, 135.0], [24.3, 135.0], [24.4, 135.0], [24.5, 135.0], [24.6, 135.0], [24.7, 135.0], [24.8, 135.0], [24.9, 135.0], [25.0, 135.0], [25.1, 135.0], [25.2, 135.0], [25.3, 135.0], [25.4, 135.0], [25.5, 135.0], [25.6, 135.0], [25.7, 135.0], [25.8, 135.0], [25.9, 135.0], [26.0, 135.0], [26.1, 135.0], [26.2, 135.0], [26.3, 135.0], [26.4, 135.0], [26.5, 135.0], [26.6, 135.0], [26.7, 135.0], [26.8, 135.0], [26.9, 135.0], [27.0, 135.0], [27.1, 135.0], [27.2, 135.0], [27.3, 135.0], [27.4, 135.0], [27.5, 135.0], [27.6, 135.0], [27.7, 135.0], [27.8, 135.0], [27.9, 135.0], [28.0, 135.0], [28.1, 135.0], [28.2, 135.0], [28.3, 135.0], [28.4, 135.0], [28.5, 135.0], [28.6, 135.0], [28.7, 135.0], [28.8, 135.0], [28.9, 135.0], [29.0, 135.0], [29.1, 135.0], [29.2, 135.0], [29.3, 135.0], [29.4, 135.0], [29.5, 135.0], [29.6, 135.0], [29.7, 135.0], [29.8, 135.0], [29.9, 135.0], [30.0, 135.0], [30.1, 135.0], [30.2, 135.0], [30.3, 135.0], [30.4, 135.0], [30.5, 135.0], [30.6, 135.0], [30.7, 135.0], [30.8, 135.0], [30.9, 135.0], [31.0, 135.0], [31.1, 135.0], [31.2, 135.0], [31.3, 135.0], [31.4, 135.0], [31.5, 135.0], [31.6, 135.0], [31.7, 135.0], [31.8, 135.0], [31.9, 135.0], [32.0, 135.0], [32.1, 135.0], [32.2, 135.0], [32.3, 135.0], [32.4, 135.0], [32.5, 135.0], [32.6, 135.0], [32.7, 135.0], [32.8, 135.0], [32.9, 135.0], [33.0, 135.0], [33.1, 135.0], [33.2, 135.0], [33.3, 135.0], [33.4, 148.0], [33.5, 148.0], [33.6, 148.0], [33.7, 148.0], [33.8, 148.0], [33.9, 148.0], [34.0, 148.0], [34.1, 148.0], [34.2, 148.0], [34.3, 148.0], [34.4, 148.0], [34.5, 148.0], [34.6, 148.0], [34.7, 148.0], [34.8, 148.0], [34.9, 148.0], [35.0, 148.0], [35.1, 148.0], [35.2, 148.0], [35.3, 148.0], [35.4, 148.0], [35.5, 148.0], [35.6, 148.0], [35.7, 148.0], [35.8, 148.0], [35.9, 148.0], [36.0, 148.0], [36.1, 148.0], [36.2, 148.0], [36.3, 148.0], [36.4, 148.0], [36.5, 148.0], [36.6, 148.0], [36.7, 148.0], [36.8, 148.0], [36.9, 148.0], [37.0, 148.0], [37.1, 148.0], [37.2, 148.0], [37.3, 148.0], [37.4, 148.0], [37.5, 148.0], [37.6, 148.0], [37.7, 148.0], [37.8, 148.0], [37.9, 148.0], [38.0, 148.0], [38.1, 148.0], [38.2, 148.0], [38.3, 148.0], [38.4, 148.0], [38.5, 148.0], [38.6, 148.0], [38.7, 148.0], [38.8, 148.0], [38.9, 148.0], [39.0, 148.0], [39.1, 148.0], [39.2, 148.0], [39.3, 148.0], [39.4, 148.0], [39.5, 148.0], [39.6, 148.0], [39.7, 148.0], [39.8, 148.0], [39.9, 148.0], [40.0, 148.0], [40.1, 148.0], [40.2, 148.0], [40.3, 148.0], [40.4, 148.0], [40.5, 148.0], [40.6, 148.0], [40.7, 148.0], [40.8, 148.0], [40.9, 148.0], [41.0, 148.0], [41.1, 148.0], [41.2, 148.0], [41.3, 148.0], [41.4, 148.0], [41.5, 148.0], [41.6, 148.0], [41.7, 148.0], [41.8, 148.0], [41.9, 148.0], [42.0, 148.0], [42.1, 148.0], [42.2, 148.0], [42.3, 148.0], [42.4, 148.0], [42.5, 148.0], [42.6, 148.0], [42.7, 148.0], [42.8, 148.0], [42.9, 148.0], [43.0, 148.0], [43.1, 148.0], [43.2, 148.0], [43.3, 148.0], [43.4, 148.0], [43.5, 148.0], [43.6, 148.0], [43.7, 148.0], [43.8, 148.0], [43.9, 148.0], [44.0, 148.0], [44.1, 148.0], [44.2, 148.0], [44.3, 148.0], [44.4, 148.0], [44.5, 148.0], [44.6, 148.0], [44.7, 148.0], [44.8, 148.0], [44.9, 148.0], [45.0, 148.0], [45.1, 148.0], [45.2, 148.0], [45.3, 148.0], [45.4, 148.0], [45.5, 148.0], [45.6, 148.0], [45.7, 148.0], [45.8, 148.0], [45.9, 148.0], [46.0, 148.0], [46.1, 148.0], [46.2, 148.0], [46.3, 148.0], [46.4, 148.0], [46.5, 148.0], [46.6, 148.0], [46.7, 148.0], [46.8, 148.0], [46.9, 148.0], [47.0, 148.0], [47.1, 148.0], [47.2, 148.0], [47.3, 148.0], [47.4, 148.0], [47.5, 148.0], [47.6, 148.0], [47.7, 148.0], [47.8, 148.0], [47.9, 148.0], [48.0, 148.0], [48.1, 148.0], [48.2, 148.0], [48.3, 148.0], [48.4, 148.0], [48.5, 148.0], [48.6, 148.0], [48.7, 148.0], [48.8, 148.0], [48.9, 148.0], [49.0, 148.0], [49.1, 148.0], [49.2, 148.0], [49.3, 148.0], [49.4, 148.0], [49.5, 148.0], [49.6, 148.0], [49.7, 148.0], [49.8, 148.0], [49.9, 148.0], [50.0, 148.0], [50.1, 148.0], [50.2, 148.0], [50.3, 148.0], [50.4, 148.0], [50.5, 148.0], [50.6, 148.0], [50.7, 148.0], [50.8, 148.0], [50.9, 148.0], [51.0, 148.0], [51.1, 148.0], [51.2, 148.0], [51.3, 148.0], [51.4, 148.0], [51.5, 148.0], [51.6, 148.0], [51.7, 148.0], [51.8, 148.0], [51.9, 148.0], [52.0, 148.0], [52.1, 148.0], [52.2, 148.0], [52.3, 148.0], [52.4, 148.0], [52.5, 148.0], [52.6, 148.0], [52.7, 148.0], [52.8, 148.0], [52.9, 148.0], [53.0, 148.0], [53.1, 148.0], [53.2, 148.0], [53.3, 148.0], [53.4, 148.0], [53.5, 148.0], [53.6, 148.0], [53.7, 148.0], [53.8, 148.0], [53.9, 148.0], [54.0, 148.0], [54.1, 148.0], [54.2, 148.0], [54.3, 148.0], [54.4, 148.0], [54.5, 148.0], [54.6, 148.0], [54.7, 148.0], [54.8, 148.0], [54.9, 148.0], [55.0, 148.0], [55.1, 148.0], [55.2, 148.0], [55.3, 148.0], [55.4, 148.0], [55.5, 148.0], [55.6, 148.0], [55.7, 148.0], [55.8, 148.0], [55.9, 148.0], [56.0, 148.0], [56.1, 148.0], [56.2, 148.0], [56.3, 148.0], [56.4, 148.0], [56.5, 148.0], [56.6, 148.0], [56.7, 148.0], [56.8, 148.0], [56.9, 148.0], [57.0, 148.0], [57.1, 148.0], [57.2, 148.0], [57.3, 148.0], [57.4, 148.0], [57.5, 148.0], [57.6, 148.0], [57.7, 148.0], [57.8, 148.0], [57.9, 148.0], [58.0, 148.0], [58.1, 148.0], [58.2, 148.0], [58.3, 148.0], [58.4, 148.0], [58.5, 148.0], [58.6, 148.0], [58.7, 148.0], [58.8, 148.0], [58.9, 148.0], [59.0, 148.0], [59.1, 148.0], [59.2, 148.0], [59.3, 148.0], [59.4, 148.0], [59.5, 148.0], [59.6, 148.0], [59.7, 148.0], [59.8, 148.0], [59.9, 148.0], [60.0, 148.0], [60.1, 148.0], [60.2, 148.0], [60.3, 148.0], [60.4, 148.0], [60.5, 148.0], [60.6, 148.0], [60.7, 148.0], [60.8, 148.0], [60.9, 148.0], [61.0, 148.0], [61.1, 148.0], [61.2, 148.0], [61.3, 148.0], [61.4, 148.0], [61.5, 148.0], [61.6, 148.0], [61.7, 148.0], [61.8, 148.0], [61.9, 148.0], [62.0, 148.0], [62.1, 148.0], [62.2, 148.0], [62.3, 148.0], [62.4, 148.0], [62.5, 148.0], [62.6, 148.0], [62.7, 148.0], [62.8, 148.0], [62.9, 148.0], [63.0, 148.0], [63.1, 148.0], [63.2, 148.0], [63.3, 148.0], [63.4, 148.0], [63.5, 148.0], [63.6, 148.0], [63.7, 148.0], [63.8, 148.0], [63.9, 148.0], [64.0, 148.0], [64.1, 148.0], [64.2, 148.0], [64.3, 148.0], [64.4, 148.0], [64.5, 148.0], [64.6, 148.0], [64.7, 148.0], [64.8, 148.0], [64.9, 148.0], [65.0, 148.0], [65.1, 148.0], [65.2, 148.0], [65.3, 148.0], [65.4, 148.0], [65.5, 148.0], [65.6, 148.0], [65.7, 148.0], [65.8, 148.0], [65.9, 148.0], [66.0, 148.0], [66.1, 148.0], [66.2, 148.0], [66.3, 148.0], [66.4, 148.0], [66.5, 148.0], [66.6, 148.0], [66.7, 211.0], [66.8, 211.0], [66.9, 211.0], [67.0, 211.0], [67.1, 211.0], [67.2, 211.0], [67.3, 211.0], [67.4, 211.0], [67.5, 211.0], [67.6, 211.0], [67.7, 211.0], [67.8, 211.0], [67.9, 211.0], [68.0, 211.0], [68.1, 211.0], [68.2, 211.0], [68.3, 211.0], [68.4, 211.0], [68.5, 211.0], [68.6, 211.0], [68.7, 211.0], [68.8, 211.0], [68.9, 211.0], [69.0, 211.0], [69.1, 211.0], [69.2, 211.0], [69.3, 211.0], [69.4, 211.0], [69.5, 211.0], [69.6, 211.0], [69.7, 211.0], [69.8, 211.0], [69.9, 211.0], [70.0, 211.0], [70.1, 211.0], [70.2, 211.0], [70.3, 211.0], [70.4, 211.0], [70.5, 211.0], [70.6, 211.0], [70.7, 211.0], [70.8, 211.0], [70.9, 211.0], [71.0, 211.0], [71.1, 211.0], [71.2, 211.0], [71.3, 211.0], [71.4, 211.0], [71.5, 211.0], [71.6, 211.0], [71.7, 211.0], [71.8, 211.0], [71.9, 211.0], [72.0, 211.0], [72.1, 211.0], [72.2, 211.0], [72.3, 211.0], [72.4, 211.0], [72.5, 211.0], [72.6, 211.0], [72.7, 211.0], [72.8, 211.0], [72.9, 211.0], [73.0, 211.0], [73.1, 211.0], [73.2, 211.0], [73.3, 211.0], [73.4, 211.0], [73.5, 211.0], [73.6, 211.0], [73.7, 211.0], [73.8, 211.0], [73.9, 211.0], [74.0, 211.0], [74.1, 211.0], [74.2, 211.0], [74.3, 211.0], [74.4, 211.0], [74.5, 211.0], [74.6, 211.0], [74.7, 211.0], [74.8, 211.0], [74.9, 211.0], [75.0, 211.0], [75.1, 211.0], [75.2, 211.0], [75.3, 211.0], [75.4, 211.0], [75.5, 211.0], [75.6, 211.0], [75.7, 211.0], [75.8, 211.0], [75.9, 211.0], [76.0, 211.0], [76.1, 211.0], [76.2, 211.0], [76.3, 211.0], [76.4, 211.0], [76.5, 211.0], [76.6, 211.0], [76.7, 211.0], [76.8, 211.0], [76.9, 211.0], [77.0, 211.0], [77.1, 211.0], [77.2, 211.0], [77.3, 211.0], [77.4, 211.0], [77.5, 211.0], [77.6, 211.0], [77.7, 211.0], [77.8, 211.0], [77.9, 211.0], [78.0, 211.0], [78.1, 211.0], [78.2, 211.0], [78.3, 211.0], [78.4, 211.0], [78.5, 211.0], [78.6, 211.0], [78.7, 211.0], [78.8, 211.0], [78.9, 211.0], [79.0, 211.0], [79.1, 211.0], [79.2, 211.0], [79.3, 211.0], [79.4, 211.0], [79.5, 211.0], [79.6, 211.0], [79.7, 211.0], [79.8, 211.0], [79.9, 211.0], [80.0, 211.0], [80.1, 211.0], [80.2, 211.0], [80.3, 211.0], [80.4, 211.0], [80.5, 211.0], [80.6, 211.0], [80.7, 211.0], [80.8, 211.0], [80.9, 211.0], [81.0, 211.0], [81.1, 211.0], [81.2, 211.0], [81.3, 211.0], [81.4, 211.0], [81.5, 211.0], [81.6, 211.0], [81.7, 211.0], [81.8, 211.0], [81.9, 211.0], [82.0, 211.0], [82.1, 211.0], [82.2, 211.0], [82.3, 211.0], [82.4, 211.0], [82.5, 211.0], [82.6, 211.0], [82.7, 211.0], [82.8, 211.0], [82.9, 211.0], [83.0, 211.0], [83.1, 211.0], [83.2, 211.0], [83.3, 211.0], [83.4, 211.0], [83.5, 211.0], [83.6, 211.0], [83.7, 211.0], [83.8, 211.0], [83.9, 211.0], [84.0, 211.0], [84.1, 211.0], [84.2, 211.0], [84.3, 211.0], [84.4, 211.0], [84.5, 211.0], [84.6, 211.0], [84.7, 211.0], [84.8, 211.0], [84.9, 211.0], [85.0, 211.0], [85.1, 211.0], [85.2, 211.0], [85.3, 211.0], [85.4, 211.0], [85.5, 211.0], [85.6, 211.0], [85.7, 211.0], [85.8, 211.0], [85.9, 211.0], [86.0, 211.0], [86.1, 211.0], [86.2, 211.0], [86.3, 211.0], [86.4, 211.0], [86.5, 211.0], [86.6, 211.0], [86.7, 211.0], [86.8, 211.0], [86.9, 211.0], [87.0, 211.0], [87.1, 211.0], [87.2, 211.0], [87.3, 211.0], [87.4, 211.0], [87.5, 211.0], [87.6, 211.0], [87.7, 211.0], [87.8, 211.0], [87.9, 211.0], [88.0, 211.0], [88.1, 211.0], [88.2, 211.0], [88.3, 211.0], [88.4, 211.0], [88.5, 211.0], [88.6, 211.0], [88.7, 211.0], [88.8, 211.0], [88.9, 211.0], [89.0, 211.0], [89.1, 211.0], [89.2, 211.0], [89.3, 211.0], [89.4, 211.0], [89.5, 211.0], [89.6, 211.0], [89.7, 211.0], [89.8, 211.0], [89.9, 211.0], [90.0, 211.0], [90.1, 211.0], [90.2, 211.0], [90.3, 211.0], [90.4, 211.0], [90.5, 211.0], [90.6, 211.0], [90.7, 211.0], [90.8, 211.0], [90.9, 211.0], [91.0, 211.0], [91.1, 211.0], [91.2, 211.0], [91.3, 211.0], [91.4, 211.0], [91.5, 211.0], [91.6, 211.0], [91.7, 211.0], [91.8, 211.0], [91.9, 211.0], [92.0, 211.0], [92.1, 211.0], [92.2, 211.0], [92.3, 211.0], [92.4, 211.0], [92.5, 211.0], [92.6, 211.0], [92.7, 211.0], [92.8, 211.0], [92.9, 211.0], [93.0, 211.0], [93.1, 211.0], [93.2, 211.0], [93.3, 211.0], [93.4, 211.0], [93.5, 211.0], [93.6, 211.0], [93.7, 211.0], [93.8, 211.0], [93.9, 211.0], [94.0, 211.0], [94.1, 211.0], [94.2, 211.0], [94.3, 211.0], [94.4, 211.0], [94.5, 211.0], [94.6, 211.0], [94.7, 211.0], [94.8, 211.0], [94.9, 211.0], [95.0, 211.0], [95.1, 211.0], [95.2, 211.0], [95.3, 211.0], [95.4, 211.0], [95.5, 211.0], [95.6, 211.0], [95.7, 211.0], [95.8, 211.0], [95.9, 211.0], [96.0, 211.0], [96.1, 211.0], [96.2, 211.0], [96.3, 211.0], [96.4, 211.0], [96.5, 211.0], [96.6, 211.0], [96.7, 211.0], [96.8, 211.0], [96.9, 211.0], [97.0, 211.0], [97.1, 211.0], [97.2, 211.0], [97.3, 211.0], [97.4, 211.0], [97.5, 211.0], [97.6, 211.0], [97.7, 211.0], [97.8, 211.0], [97.9, 211.0], [98.0, 211.0], [98.1, 211.0], [98.2, 211.0], [98.3, 211.0], [98.4, 211.0], [98.5, 211.0], [98.6, 211.0], [98.7, 211.0], [98.8, 211.0], [98.9, 211.0], [99.0, 211.0], [99.1, 211.0], [99.2, 211.0], [99.3, 211.0], [99.4, 211.0], [99.5, 211.0], [99.6, 211.0], [99.7, 211.0], [99.8, 211.0], [99.9, 211.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 362.0, "series": [{"data": [[100.0, 20.0], [32900.0, 9.0], [33700.0, 11.0], [34500.0, 6.0], [35300.0, 11.0], [36100.0, 4.0], [37700.0, 5.0], [38500.0, 2.0], [40100.0, 1.0], [39300.0, 2.0], [41700.0, 1.0], [43300.0, 2.0], [44100.0, 2.0], [45700.0, 1.0], [50500.0, 1.0], [200.0, 20.0], [300.0, 13.0], [400.0, 16.0], [500.0, 22.0], [600.0, 17.0], [700.0, 30.0], [800.0, 23.0], [900.0, 22.0], [1000.0, 18.0], [1100.0, 18.0], [1200.0, 18.0], [1300.0, 75.0], [1400.0, 362.0], [1500.0, 115.0], [1600.0, 32.0], [1700.0, 19.0], [1800.0, 16.0], [1900.0, 6.0], [2000.0, 9.0], [2100.0, 4.0], [2300.0, 7.0], [2200.0, 7.0], [2400.0, 4.0], [2500.0, 6.0], [2600.0, 8.0], [2700.0, 7.0], [2800.0, 14.0], [2900.0, 15.0], [3000.0, 13.0], [3100.0, 9.0], [3300.0, 8.0], [3200.0, 8.0], [3400.0, 6.0], [3500.0, 10.0], [3700.0, 15.0], [3600.0, 15.0], [3800.0, 21.0], [3900.0, 8.0], [4000.0, 13.0], [4100.0, 8.0], [4200.0, 5.0], [4300.0, 1.0], [4500.0, 6.0], [4400.0, 3.0], [4600.0, 7.0], [4700.0, 3.0], [4800.0, 4.0], [4900.0, 4.0], [5000.0, 5.0], [5100.0, 6.0], [5300.0, 2.0], [5200.0, 3.0], [5400.0, 8.0], [5500.0, 3.0], [5600.0, 7.0], [5700.0, 6.0], [5800.0, 2.0], [6000.0, 3.0], [6100.0, 5.0], [5900.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6500.0, 1.0], [6700.0, 1.0], [6900.0, 3.0], [6800.0, 3.0], [7000.0, 1.0], [7100.0, 2.0], [7400.0, 3.0], [7600.0, 1.0], [7500.0, 1.0], [7900.0, 1.0], [7700.0, 2.0], [7800.0, 2.0], [8000.0, 1.0], [8200.0, 3.0], [8400.0, 9.0], [8600.0, 4.0], [8800.0, 8.0], [9000.0, 5.0], [9200.0, 8.0], [9600.0, 9.0], [9400.0, 7.0], [10000.0, 5.0], [9800.0, 9.0], [10200.0, 1.0], [10400.0, 2.0], [10600.0, 5.0], [10800.0, 4.0], [11000.0, 5.0], [11200.0, 3.0], [11400.0, 3.0], [11600.0, 1.0], [11800.0, 2.0], [12000.0, 3.0], [12600.0, 2.0], [13000.0, 3.0], [13800.0, 1.0], [13600.0, 1.0], [13400.0, 1.0], [14800.0, 2.0], [15200.0, 3.0], [15000.0, 3.0], [15800.0, 5.0], [15600.0, 11.0], [15400.0, 2.0], [16000.0, 1.0], [16200.0, 1.0], [17200.0, 4.0], [16400.0, 1.0], [18400.0, 1.0], [18000.0, 2.0], [17600.0, 1.0], [18800.0, 2.0], [19200.0, 5.0], [19600.0, 3.0], [20000.0, 3.0], [20400.0, 1.0], [20800.0, 2.0], [21200.0, 5.0], [21600.0, 7.0], [22400.0, 10.0], [22000.0, 8.0], [23200.0, 6.0], [22800.0, 4.0], [24000.0, 9.0], [23600.0, 3.0], [24400.0, 3.0], [25200.0, 3.0], [24800.0, 1.0], [26000.0, 2.0], [25600.0, 2.0], [26400.0, 3.0], [27200.0, 2.0], [26800.0, 4.0], [27600.0, 5.0], [28000.0, 8.0], [28400.0, 4.0], [28800.0, 6.0], [29600.0, 4.0], [29200.0, 3.0], [30000.0, 1.0], [31200.0, 1.0], [30800.0, 5.0], [31600.0, 5.0], [32400.0, 4.0], [32000.0, 2.0], [32800.0, 5.0], [33600.0, 8.0], [34400.0, 1.0], [35200.0, 11.0], [36000.0, 2.0], [37600.0, 3.0], [39200.0, 4.0], [40000.0, 5.0], [41600.0, 5.0], [42400.0, 3.0], [44000.0, 1.0], [43200.0, 1.0], [46400.0, 1.0], [34700.0, 12.0], [33100.0, 1.0], [33900.0, 4.0], [35500.0, 12.0], [37100.0, 2.0], [37900.0, 4.0], [40300.0, 1.0], [42700.0, 2.0], [44300.0, 1.0], [45900.0, 1.0], [45100.0, 1.0], [47500.0, 1.0], [17300.0, 1.0], [16500.0, 4.0], [17700.0, 3.0], [18100.0, 4.0], [18900.0, 5.0], [18500.0, 2.0], [19300.0, 4.0], [20100.0, 4.0], [19700.0, 6.0], [20900.0, 5.0], [20500.0, 10.0], [21300.0, 8.0], [21700.0, 3.0], [22500.0, 10.0], [22100.0, 7.0], [23300.0, 8.0], [22900.0, 2.0], [24100.0, 5.0], [24500.0, 6.0], [23700.0, 1.0], [25300.0, 5.0], [24900.0, 1.0], [26500.0, 3.0], [25700.0, 3.0], [26900.0, 3.0], [27300.0, 1.0], [28100.0, 8.0], [28500.0, 9.0], [27700.0, 1.0], [28900.0, 7.0], [29300.0, 5.0], [30100.0, 3.0], [29700.0, 3.0], [30500.0, 1.0], [30900.0, 2.0], [31700.0, 3.0], [32500.0, 2.0], [32100.0, 1.0], [33000.0, 3.0], [33800.0, 12.0], [34600.0, 8.0], [35400.0, 10.0], [36200.0, 2.0], [37000.0, 2.0], [38600.0, 1.0], [37800.0, 2.0], [39400.0, 2.0], [40200.0, 3.0], [41000.0, 10.0], [42600.0, 2.0], [45800.0, 1.0], [49800.0, 2.0], [51400.0, 1.0], [33300.0, 1.0], [34100.0, 5.0], [34900.0, 10.0], [35700.0, 7.0], [36500.0, 1.0], [37300.0, 5.0], [38900.0, 2.0], [40500.0, 1.0], [39700.0, 1.0], [41300.0, 2.0], [42100.0, 2.0], [44500.0, 2.0], [45300.0, 4.0], [48500.0, 1.0], [8700.0, 5.0], [8300.0, 2.0], [8500.0, 1.0], [9100.0, 10.0], [8900.0, 7.0], [9300.0, 14.0], [9500.0, 3.0], [9700.0, 7.0], [9900.0, 6.0], [10100.0, 4.0], [10300.0, 5.0], [10700.0, 9.0], [10500.0, 2.0], [10900.0, 2.0], [11100.0, 2.0], [11700.0, 1.0], [11500.0, 4.0], [11300.0, 7.0], [11900.0, 4.0], [12100.0, 3.0], [12500.0, 2.0], [12700.0, 4.0], [12300.0, 1.0], [12900.0, 1.0], [13100.0, 1.0], [13300.0, 4.0], [13700.0, 2.0], [13500.0, 2.0], [14300.0, 2.0], [14700.0, 3.0], [14500.0, 3.0], [15300.0, 6.0], [15100.0, 1.0], [14900.0, 6.0], [15500.0, 8.0], [15700.0, 5.0], [16100.0, 4.0], [16300.0, 3.0], [15900.0, 1.0], [17000.0, 4.0], [16600.0, 1.0], [17400.0, 3.0], [17800.0, 7.0], [18200.0, 1.0], [19000.0, 4.0], [19400.0, 2.0], [18600.0, 2.0], [20200.0, 6.0], [19800.0, 11.0], [21400.0, 3.0], [20600.0, 4.0], [21000.0, 5.0], [22200.0, 8.0], [21800.0, 2.0], [22600.0, 4.0], [23400.0, 11.0], [23000.0, 2.0], [24200.0, 4.0], [23800.0, 4.0], [25400.0, 11.0], [24600.0, 3.0], [25000.0, 3.0], [25800.0, 8.0], [26600.0, 3.0], [26200.0, 2.0], [27000.0, 3.0], [27400.0, 3.0], [28600.0, 12.0], [28200.0, 15.0], [27800.0, 1.0], [29000.0, 8.0], [29400.0, 5.0], [30600.0, 4.0], [29800.0, 4.0], [30200.0, 6.0], [31000.0, 1.0], [31800.0, 7.0], [32600.0, 5.0], [32200.0, 2.0], [33200.0, 1.0], [34000.0, 7.0], [34800.0, 10.0], [35600.0, 6.0], [37200.0, 6.0], [38000.0, 4.0], [39600.0, 2.0], [40400.0, 3.0], [41200.0, 1.0], [42800.0, 3.0], [44400.0, 1.0], [43600.0, 1.0], [46000.0, 1.0], [45200.0, 5.0], [53200.0, 1.0], [34300.0, 5.0], [33500.0, 4.0], [35900.0, 8.0], [35100.0, 6.0], [36700.0, 3.0], [37500.0, 1.0], [38300.0, 4.0], [39100.0, 1.0], [39900.0, 2.0], [41500.0, 2.0], [44700.0, 1.0], [43900.0, 2.0], [43100.0, 3.0], [46300.0, 5.0], [45500.0, 3.0], [49500.0, 1.0], [16700.0, 1.0], [17100.0, 2.0], [17900.0, 4.0], [18300.0, 4.0], [17500.0, 2.0], [19100.0, 5.0], [18700.0, 4.0], [19900.0, 8.0], [19500.0, 5.0], [20300.0, 5.0], [20700.0, 5.0], [21100.0, 3.0], [21500.0, 1.0], [22300.0, 3.0], [21900.0, 5.0], [23500.0, 7.0], [22700.0, 5.0], [23100.0, 12.0], [23900.0, 4.0], [24300.0, 10.0], [24700.0, 3.0], [25100.0, 1.0], [25500.0, 3.0], [26300.0, 3.0], [25900.0, 6.0], [26700.0, 1.0], [27500.0, 3.0], [27100.0, 7.0], [27900.0, 8.0], [28300.0, 6.0], [29500.0, 4.0], [28700.0, 4.0], [29100.0, 4.0], [30300.0, 6.0], [29900.0, 2.0], [30700.0, 2.0], [31500.0, 2.0], [31100.0, 2.0], [32300.0, 7.0], [32700.0, 5.0], [31900.0, 1.0], [34200.0, 6.0], [33400.0, 2.0], [35000.0, 8.0], [36600.0, 5.0], [35800.0, 2.0], [37400.0, 2.0], [39000.0, 5.0], [40600.0, 1.0], [41400.0, 9.0], [44600.0, 1.0], [43800.0, 1.0], [45400.0, 3.0], [46200.0, 5.0], [47800.0, 1.0], [49400.0, 1.0]], "isOverall": false, "label": "Search Gyms", "isController": false}, {"data": [[200.0, 1.0], [100.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 53200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 72.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1883.0, "series": [{"data": [[0.0, 72.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 605.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1883.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.57798086E12, "maxY": 186.54798761609894, "series": [{"data": [[1.57798104E12, 79.5096153846154], [1.57798116E12, 156.6963562753036], [1.57798092E12, 31.12960000000001], [1.57798128E12, 53.98113207547172], [1.5779811E12, 100.0], [1.57798098E12, 50.0], [1.57798122E12, 186.54798761609894], [1.57798086E12, 15.900178253119437]], "isOverall": false, "label": "\u641C\u7D22\u573A\u9986", "isController": false}, {"data": [[1.57798086E12, 1.0]], "isOverall": false, "label": "\u767B\u5F55", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798128E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 135.0, "minX": 1.0, "maxY": 51447.0, "series": [{"data": [[2.0, 3722.0], [3.0, 3780.9230769230767], [4.0, 3661.5], [5.0, 3829.769230769231], [6.0, 3922.5384615384614], [7.0, 4289.333333333334], [8.0, 3755.9333333333334], [9.0, 4347.666666666667], [10.0, 3506.6875], [11.0, 4010.142857142857], [12.0, 3976.5], [13.0, 3824.133333333333], [14.0, 4115.071428571428], [15.0, 3629.176470588235], [16.0, 1080.1666666666665], [17.0, 7114.2], [18.0, 1204.3529411764703], [19.0, 1291.181818181818], [20.0, 1715.2482014388497], [21.0, 1704.6153846153845], [22.0, 7259.375], [23.0, 1510.1333333333334], [24.0, 6083.736842105263], [25.0, 7478.25], [26.0, 5775.0], [27.0, 5755.153846153846], [28.0, 8454.0], [29.0, 6078.142857142857], [30.0, 5389.333333333333], [31.0, 6259.545454545454], [32.0, 2836.1000000000004], [33.0, 9493.307692307691], [34.0, 6673.272727272726], [35.0, 6920.272727272726], [36.0, 14015.5], [37.0, 7576.200000000001], [38.0, 7503.727272727272], [39.0, 8172.7], [40.0, 8199.0], [41.0, 6273.470588235294], [42.0, 11642.6], [43.0, 3965.8888888888887], [44.0, 10197.25], [45.0, 3752.75], [46.0, 8345.823529411766], [47.0, 8612.555555555555], [48.0, 4800.0], [49.0, 4308.7], [50.0, 10920.762499999993], [51.0, 44537.5], [53.0, 40968.0], [55.0, 21186.0], [56.0, 40862.0], [59.0, 20196.666666666668], [58.0, 41584.5], [62.0, 26631.333333333332], [63.0, 32692.5], [65.0, 22133.8], [66.0, 41074.0], [64.0, 43949.0], [69.0, 33595.666666666664], [70.0, 29877.5], [71.0, 41404.0], [68.0, 41068.0], [73.0, 23928.0], [74.0, 33778.0], [75.0, 26572.25], [76.0, 27377.666666666668], [79.0, 20883.333333333332], [77.0, 51447.0], [80.0, 19086.0], [83.0, 41256.0], [81.0, 42243.666666666664], [85.0, 21736.714285714286], [87.0, 41492.0], [86.0, 41483.0], [84.0, 43634.0], [88.0, 19508.666666666668], [89.0, 17511.25], [90.0, 18606.666666666668], [94.0, 28390.5], [95.0, 22464.4], [93.0, 41614.5], [96.0, 29320.0], [99.0, 26224.0], [98.0, 37705.0], [97.0, 40011.0], [100.0, 23507.100000000013], [103.0, 26549.0], [102.0, 37609.0], [101.0, 37629.0], [107.0, 37256.0], [106.0, 37430.25], [110.0, 28355.0], [111.0, 36765.0], [109.0, 37900.0], [115.0, 39945.0], [114.0, 37815.0], [113.0, 37970.0], [112.0, 36696.0], [116.0, 25877.0], [119.0, 41235.0], [117.0, 39388.0], [120.0, 32502.5], [123.0, 30946.333333333332], [122.0, 37676.0], [121.0, 37720.0], [127.0, 41248.0], [126.0, 36643.0], [125.0, 37924.0], [124.0, 37333.0], [128.0, 33075.0], [130.0, 32825.5], [131.0, 34030.0], [135.0, 37802.666666666664], [133.0, 39363.0], [129.0, 37049.0], [136.0, 29461.0], [140.0, 30553.666666666664], [142.0, 35935.5], [139.0, 35507.5], [146.0, 37605.5], [147.0, 29713.8], [151.0, 36696.0], [150.0, 36777.0], [149.0, 34534.0], [148.0, 34659.0], [145.0, 35537.0], [144.0, 34855.5], [152.0, 30413.6], [153.0, 32365.5], [154.0, 29173.0], [157.0, 31302.2], [159.0, 34633.0], [158.0, 35740.0], [156.0, 35657.0], [155.0, 37883.5], [162.0, 29803.0], [167.0, 31594.125], [166.0, 35050.0], [164.0, 38088.0], [163.0, 35635.0], [161.0, 37348.5], [175.0, 31228.2], [174.0, 38927.0], [173.0, 34722.5], [171.0, 35796.0], [170.0, 34803.0], [169.0, 34665.0], [168.0, 35534.0], [180.0, 30437.8], [182.0, 34840.0], [181.0, 34812.0], [179.0, 34944.0], [178.0, 35147.0], [177.0, 35730.0], [176.0, 34723.0], [185.0, 33988.57142857143], [189.0, 29978.25], [188.0, 35355.0], [187.0, 35518.0], [186.0, 35463.0], [184.0, 34719.5], [195.0, 33122.8], [199.0, 30647.75], [198.0, 37744.5], [194.0, 35380.0], [193.0, 35198.0], [192.0, 37944.666666666664], [200.0, 33521.23076923076], [1.0, 6348.25]], "isOverall": false, "label": "Search Gyms", "isController": false}, {"data": [[72.62221353148217, 14791.917481423541]], "isOverall": false, "label": "Search Gyms-Aggregated", "isController": false}, {"data": [[1.0, 179.5], [2.0, 135.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.3333333333333333, 164.66666666666666]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 655.4333333333333, "minX": 1.57798086E12, "maxY": 29510.416666666668, "series": [{"data": [[1.57798104E12, 9821.066666666668], [1.57798116E12, 11662.516666666666], [1.57798092E12, 29510.416666666668], [1.57798128E12, 5004.966666666666], [1.5779811E12, 11095.916666666666], [1.57798098E12, 11898.6], [1.57798122E12, 15250.983333333334], [1.57798086E12, 26523.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57798104E12, 1286.1333333333334], [1.57798116E12, 1527.2833333333333], [1.57798092E12, 3864.5833333333335], [1.57798128E12, 655.4333333333333], [1.5779811E12, 1453.0833333333333], [1.57798098E12, 1558.2], [1.57798122E12, 1997.2166666666667], [1.57798086E12, 3481.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798128E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 164.66666666666666, "minX": 1.57798086E12, "maxY": 43043.188679245264, "series": [{"data": [[1.57798104E12, 18565.451923076944], [1.57798116E12, 28461.578947368405], [1.57798092E12, 2838.2735999999977], [1.57798128E12, 43043.188679245264], [1.5779811E12, 23832.582978723418], [1.57798098E12, 11392.420634920638], [1.57798122E12, 35556.14860681115], [1.57798086E12, 1138.3725490196084]], "isOverall": false, "label": "Search Gyms", "isController": false}, {"data": [[1.57798086E12, 164.66666666666666]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798128E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 163.33333333333334, "minX": 1.57798086E12, "maxY": 43042.87735849054, "series": [{"data": [[1.57798104E12, 18565.42307692308], [1.57798116E12, 28461.506072874487], [1.57798092E12, 2838.1936000000005], [1.57798128E12, 43042.87735849054], [1.5779811E12, 23832.49361702128], [1.57798098E12, 11392.253968253966], [1.57798122E12, 35556.05572755418], [1.57798086E12, 1138.2620320855615]], "isOverall": false, "label": "Search Gyms", "isController": false}, {"data": [[1.57798086E12, 163.33333333333334]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798128E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 12.62019230769231, "minX": 1.57798086E12, "maxY": 31.0, "series": [{"data": [[1.57798104E12, 12.62019230769231], [1.57798116E12, 13.12145748987854], [1.57798092E12, 13.448000000000011], [1.57798128E12, 13.31132075471698], [1.5779811E12, 12.995744680851066], [1.57798098E12, 13.825396825396824], [1.57798122E12, 13.065015479876164], [1.57798086E12, 13.30659536541889]], "isOverall": false, "label": "Search Gyms", "isController": false}, {"data": [[1.57798086E12, 31.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798128E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 131.0, "minX": 1.57798086E12, "maxY": 53223.0, "series": [{"data": [[1.57798104E12, 31248.0], [1.57798116E12, 41677.0], [1.57798092E12, 8826.0], [1.57798128E12, 51447.0], [1.5779811E12, 35043.0], [1.57798098E12, 27260.0], [1.57798122E12, 53223.0], [1.57798086E12, 2625.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57798104E12, 12935.0], [1.57798116E12, 23765.0], [1.57798092E12, 1028.0], [1.57798128E12, 37277.0], [1.5779811E12, 19828.0], [1.57798098E12, 8009.0], [1.57798122E12, 29218.0], [1.57798086E12, 131.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57798104E12, 21471.4], [1.57798116E12, 32347.0], [1.57798092E12, 5296.199999999997], [1.57798128E12, 46339.2], [1.5779811E12, 28802.8], [1.57798098E12, 15602.7], [1.57798122E12, 39200.0], [1.57798086E12, 1480.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57798104E12, 30295.359999999986], [1.57798116E12, 39378.560000000005], [1.57798092E12, 7742.92], [1.57798128E12, 51386.23999999999], [1.5779811E12, 31773.519999999975], [1.57798098E12, 23303.75], [1.57798122E12, 49510.6], [1.57798086E12, 1590.2000000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57798104E12, 23422.949999999997], [1.57798116E12, 33814.2], [1.57798092E12, 6072.0999999999985], [1.57798128E12, 47747.799999999996], [1.5779811E12, 29558.0], [1.57798098E12, 17180.5], [1.57798122E12, 40438.4], [1.57798086E12, 1509.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798128E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1424.0, "minX": 1.0, "maxY": 28822.5, "series": [{"data": [[8.0, 16478.5], [2.0, 20609.0], [9.0, 20498.0], [10.0, 4038.0], [11.0, 1650.0], [12.0, 1480.5], [3.0, 25540.5], [13.0, 1441.0], [14.0, 1447.0], [15.0, 1443.0], [4.0, 24711.0], [16.0, 1457.5], [1.0, 19744.0], [17.0, 1424.0], [5.0, 26046.0], [6.0, 28822.5], [7.0, 28280.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1424.0, "minX": 1.0, "maxY": 28822.5, "series": [{"data": [[8.0, 16478.0], [2.0, 20609.0], [9.0, 20498.0], [10.0, 4038.0], [11.0, 1650.0], [12.0, 1480.5], [3.0, 25540.5], [13.0, 1441.0], [14.0, 1447.0], [15.0, 1443.0], [4.0, 24711.0], [16.0, 1457.5], [1.0, 19744.0], [17.0, 1424.0], [5.0, 26046.0], [6.0, 28822.5], [7.0, 28280.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.816666666666667, "minX": 1.57798086E12, "maxY": 10.916666666666666, "series": [{"data": [[1.57798104E12, 4.3], [1.57798116E12, 5.783333333333333], [1.57798092E12, 10.916666666666666], [1.5779811E12, 3.9166666666666665], [1.57798098E12, 4.2], [1.57798122E12, 3.816666666666667], [1.57798086E12, 9.733333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798122E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.7666666666666666, "minX": 1.57798086E12, "maxY": 10.416666666666666, "series": [{"data": [[1.57798104E12, 3.466666666666667], [1.57798116E12, 4.116666666666666], [1.57798092E12, 10.416666666666666], [1.57798128E12, 1.7666666666666666], [1.5779811E12, 3.9166666666666665], [1.57798098E12, 4.2], [1.57798122E12, 5.383333333333334], [1.57798086E12, 9.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57798128E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.57798086E12, "maxY": 10.416666666666666, "series": [{"data": [[1.57798104E12, 3.466666666666667], [1.57798116E12, 4.116666666666666], [1.57798092E12, 10.416666666666666], [1.57798128E12, 1.7666666666666666], [1.5779811E12, 3.9166666666666665], [1.57798098E12, 4.2], [1.57798122E12, 5.383333333333334], [1.57798086E12, 9.35]], "isOverall": false, "label": "Search Gyms-success", "isController": false}, {"data": [[1.57798086E12, 0.05]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798128E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.7666666666666666, "minX": 1.57798086E12, "maxY": 10.416666666666666, "series": [{"data": [[1.57798104E12, 3.466666666666667], [1.57798116E12, 4.116666666666666], [1.57798092E12, 10.416666666666666], [1.57798128E12, 1.7666666666666666], [1.5779811E12, 3.9166666666666665], [1.57798098E12, 4.2], [1.57798122E12, 5.383333333333334], [1.57798086E12, 9.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57798128E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

