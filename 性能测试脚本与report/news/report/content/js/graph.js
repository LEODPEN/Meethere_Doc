/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 132.0, "minX": 0.0, "maxY": 18052.0, "series": [{"data": [[0.0, 234.0], [0.1, 406.0], [0.2, 458.0], [0.3, 567.0], [0.4, 685.0], [0.5, 798.0], [0.6, 830.0], [0.7, 887.0], [0.8, 958.0], [0.9, 1107.0], [1.0, 1255.0], [1.1, 1328.0], [1.2, 1378.0], [1.3, 1386.0], [1.4, 1448.0], [1.5, 1548.0], [1.6, 1635.0], [1.7, 1791.0], [1.8, 1887.0], [1.9, 1934.0], [2.0, 1978.0], [2.1, 2063.0], [2.2, 2091.0], [2.3, 2113.0], [2.4, 2173.0], [2.5, 2206.0], [2.6, 2250.0], [2.7, 2293.0], [2.8, 2320.0], [2.9, 2334.0], [3.0, 2363.0], [3.1, 2390.0], [3.2, 2468.0], [3.3, 2530.0], [3.4, 2583.0], [3.5, 2598.0], [3.6, 2606.0], [3.7, 2637.0], [3.8, 2673.0], [3.9, 2689.0], [4.0, 2710.0], [4.1, 2747.0], [4.2, 2764.0], [4.3, 2771.0], [4.4, 2818.0], [4.5, 2840.0], [4.6, 2894.0], [4.7, 2906.0], [4.8, 2953.0], [4.9, 2963.0], [5.0, 2988.0], [5.1, 3003.0], [5.2, 3016.0], [5.3, 3020.0], [5.4, 3030.0], [5.5, 3041.0], [5.6, 3049.0], [5.7, 3059.0], [5.8, 3074.0], [5.9, 3084.0], [6.0, 3092.0], [6.1, 3103.0], [6.2, 3111.0], [6.3, 3114.0], [6.4, 3118.0], [6.5, 3121.0], [6.6, 3129.0], [6.7, 3132.0], [6.8, 3140.0], [6.9, 3152.0], [7.0, 3171.0], [7.1, 3181.0], [7.2, 3189.0], [7.3, 3193.0], [7.4, 3205.0], [7.5, 3210.0], [7.6, 3217.0], [7.7, 3228.0], [7.8, 3233.0], [7.9, 3245.0], [8.0, 3261.0], [8.1, 3275.0], [8.2, 3282.0], [8.3, 3291.0], [8.4, 3305.0], [8.5, 3313.0], [8.6, 3334.0], [8.7, 3341.0], [8.8, 3348.0], [8.9, 3364.0], [9.0, 3382.0], [9.1, 3400.0], [9.2, 3430.0], [9.3, 3450.0], [9.4, 3475.0], [9.5, 3498.0], [9.6, 3513.0], [9.7, 3525.0], [9.8, 3535.0], [9.9, 3552.0], [10.0, 3554.0], [10.1, 3566.0], [10.2, 3571.0], [10.3, 3573.0], [10.4, 3574.0], [10.5, 3577.0], [10.6, 3579.0], [10.7, 3581.0], [10.8, 3583.0], [10.9, 3585.0], [11.0, 3588.0], [11.1, 3589.0], [11.2, 3590.0], [11.3, 3591.0], [11.4, 3593.0], [11.5, 3594.0], [11.6, 3596.0], [11.7, 3598.0], [11.8, 3599.0], [11.9, 3601.0], [12.0, 3605.0], [12.1, 3606.0], [12.2, 3608.0], [12.3, 3609.0], [12.4, 3610.0], [12.5, 3611.0], [12.6, 3612.0], [12.7, 3614.0], [12.8, 3614.0], [12.9, 3616.0], [13.0, 3617.0], [13.1, 3618.0], [13.2, 3619.0], [13.3, 3621.0], [13.4, 3623.0], [13.5, 3625.0], [13.6, 3628.0], [13.7, 3629.0], [13.8, 3630.0], [13.9, 3631.0], [14.0, 3632.0], [14.1, 3633.0], [14.2, 3634.0], [14.3, 3635.0], [14.4, 3636.0], [14.5, 3638.0], [14.6, 3639.0], [14.7, 3641.0], [14.8, 3643.0], [14.9, 3644.0], [15.0, 3646.0], [15.1, 3648.0], [15.2, 3649.0], [15.3, 3650.0], [15.4, 3652.0], [15.5, 3654.0], [15.6, 3657.0], [15.7, 3659.0], [15.8, 3660.0], [15.9, 3662.0], [16.0, 3665.0], [16.1, 3667.0], [16.2, 3669.0], [16.3, 3669.0], [16.4, 3671.0], [16.5, 3674.0], [16.6, 3676.0], [16.7, 3679.0], [16.8, 3682.0], [16.9, 3685.0], [17.0, 3687.0], [17.1, 3691.0], [17.2, 3697.0], [17.3, 3702.0], [17.4, 3703.0], [17.5, 3704.0], [17.6, 3707.0], [17.7, 3708.0], [17.8, 3713.0], [17.9, 3717.0], [18.0, 3721.0], [18.1, 3725.0], [18.2, 3732.0], [18.3, 3734.0], [18.4, 3738.0], [18.5, 3742.0], [18.6, 3747.0], [18.7, 3753.0], [18.8, 3755.0], [18.9, 3762.0], [19.0, 3765.0], [19.1, 3768.0], [19.2, 3778.0], [19.3, 3784.0], [19.4, 3787.0], [19.5, 3795.0], [19.6, 3803.0], [19.7, 3804.0], [19.8, 3814.0], [19.9, 3818.0], [20.0, 3827.0], [20.1, 3832.0], [20.2, 3841.0], [20.3, 3847.0], [20.4, 3852.0], [20.5, 3864.0], [20.6, 3875.0], [20.7, 3889.0], [20.8, 3897.0], [20.9, 3901.0], [21.0, 3908.0], [21.1, 3911.0], [21.2, 3924.0], [21.3, 3928.0], [21.4, 3933.0], [21.5, 3943.0], [21.6, 3972.0], [21.7, 3981.0], [21.8, 3999.0], [21.9, 4010.0], [22.0, 4023.0], [22.1, 4026.0], [22.2, 4037.0], [22.3, 4053.0], [22.4, 4067.0], [22.5, 4085.0], [22.6, 4123.0], [22.7, 4133.0], [22.8, 4146.0], [22.9, 4164.0], [23.0, 4189.0], [23.1, 4201.0], [23.2, 4230.0], [23.3, 4243.0], [23.4, 4264.0], [23.5, 4292.0], [23.6, 4318.0], [23.7, 4342.0], [23.8, 4354.0], [23.9, 4377.0], [24.0, 4409.0], [24.1, 4433.0], [24.2, 4454.0], [24.3, 4479.0], [24.4, 4501.0], [24.5, 4515.0], [24.6, 4535.0], [24.7, 4541.0], [24.8, 4555.0], [24.9, 4560.0], [25.0, 4571.0], [25.1, 4594.0], [25.2, 4618.0], [25.3, 4631.0], [25.4, 4636.0], [25.5, 4646.0], [25.6, 4655.0], [25.7, 4669.0], [25.8, 4673.0], [25.9, 4706.0], [26.0, 4719.0], [26.1, 4740.0], [26.2, 4753.0], [26.3, 4762.0], [26.4, 4788.0], [26.5, 4807.0], [26.6, 4818.0], [26.7, 4831.0], [26.8, 4848.0], [26.9, 4866.0], [27.0, 4887.0], [27.1, 4905.0], [27.2, 4915.0], [27.3, 4942.0], [27.4, 4949.0], [27.5, 4970.0], [27.6, 4983.0], [27.7, 4991.0], [27.8, 5001.0], [27.9, 5014.0], [28.0, 5022.0], [28.1, 5036.0], [28.2, 5041.0], [28.3, 5050.0], [28.4, 5058.0], [28.5, 5064.0], [28.6, 5072.0], [28.7, 5079.0], [28.8, 5082.0], [28.9, 5086.0], [29.0, 5096.0], [29.1, 5099.0], [29.2, 5110.0], [29.3, 5118.0], [29.4, 5128.0], [29.5, 5143.0], [29.6, 5150.0], [29.7, 5154.0], [29.8, 5161.0], [29.9, 5170.0], [30.0, 5176.0], [30.1, 5180.0], [30.2, 5185.0], [30.3, 5191.0], [30.4, 5200.0], [30.5, 5208.0], [30.6, 5218.0], [30.7, 5223.0], [30.8, 5228.0], [30.9, 5233.0], [31.0, 5237.0], [31.1, 5245.0], [31.2, 5251.0], [31.3, 5257.0], [31.4, 5263.0], [31.5, 5274.0], [31.6, 5280.0], [31.7, 5297.0], [31.8, 5303.0], [31.9, 5307.0], [32.0, 5315.0], [32.1, 5320.0], [32.2, 5333.0], [32.3, 5336.0], [32.4, 5342.0], [32.5, 5352.0], [32.6, 5357.0], [32.7, 5361.0], [32.8, 5371.0], [32.9, 5391.0], [33.0, 5402.0], [33.1, 5421.0], [33.2, 5431.0], [33.3, 5453.0], [33.4, 5462.0], [33.5, 5468.0], [33.6, 5474.0], [33.7, 5479.0], [33.8, 5489.0], [33.9, 5500.0], [34.0, 5507.0], [34.1, 5520.0], [34.2, 5527.0], [34.3, 5535.0], [34.4, 5551.0], [34.5, 5560.0], [34.6, 5563.0], [34.7, 5575.0], [34.8, 5580.0], [34.9, 5583.0], [35.0, 5589.0], [35.1, 5597.0], [35.2, 5606.0], [35.3, 5608.0], [35.4, 5615.0], [35.5, 5623.0], [35.6, 5639.0], [35.7, 5653.0], [35.8, 5658.0], [35.9, 5667.0], [36.0, 5680.0], [36.1, 5702.0], [36.2, 5716.0], [36.3, 5729.0], [36.4, 5734.0], [36.5, 5745.0], [36.6, 5759.0], [36.7, 5770.0], [36.8, 5781.0], [36.9, 5795.0], [37.0, 5801.0], [37.1, 5807.0], [37.2, 5812.0], [37.3, 5822.0], [37.4, 5829.0], [37.5, 5834.0], [37.6, 5841.0], [37.7, 5849.0], [37.8, 5860.0], [37.9, 5865.0], [38.0, 5876.0], [38.1, 5892.0], [38.2, 5901.0], [38.3, 5905.0], [38.4, 5914.0], [38.5, 5926.0], [38.6, 5933.0], [38.7, 5938.0], [38.8, 5948.0], [38.9, 5952.0], [39.0, 5962.0], [39.1, 5967.0], [39.2, 5973.0], [39.3, 5987.0], [39.4, 6007.0], [39.5, 6013.0], [39.6, 6037.0], [39.7, 6050.0], [39.8, 6061.0], [39.9, 6072.0], [40.0, 6092.0], [40.1, 6109.0], [40.2, 6125.0], [40.3, 6136.0], [40.4, 6159.0], [40.5, 6169.0], [40.6, 6174.0], [40.7, 6210.0], [40.8, 6235.0], [40.9, 6259.0], [41.0, 6265.0], [41.1, 6285.0], [41.2, 6305.0], [41.3, 6345.0], [41.4, 6359.0], [41.5, 6372.0], [41.6, 6401.0], [41.7, 6409.0], [41.8, 6426.0], [41.9, 6456.0], [42.0, 6480.0], [42.1, 6490.0], [42.2, 6497.0], [42.3, 6504.0], [42.4, 6532.0], [42.5, 6556.0], [42.6, 6589.0], [42.7, 6604.0], [42.8, 6620.0], [42.9, 6647.0], [43.0, 6699.0], [43.1, 6772.0], [43.2, 6916.0], [43.3, 6946.0], [43.4, 6985.0], [43.5, 7068.0], [43.6, 7103.0], [43.7, 7106.0], [43.8, 7118.0], [43.9, 7125.0], [44.0, 7136.0], [44.1, 7145.0], [44.2, 7148.0], [44.3, 7154.0], [44.4, 7159.0], [44.5, 7164.0], [44.6, 7166.0], [44.7, 7169.0], [44.8, 7174.0], [44.9, 7177.0], [45.0, 7179.0], [45.1, 7183.0], [45.2, 7184.0], [45.3, 7186.0], [45.4, 7188.0], [45.5, 7190.0], [45.6, 7193.0], [45.7, 7194.0], [45.8, 7197.0], [45.9, 7199.0], [46.0, 7202.0], [46.1, 7203.0], [46.2, 7205.0], [46.3, 7207.0], [46.4, 7208.0], [46.5, 7209.0], [46.6, 7210.0], [46.7, 7211.0], [46.8, 7213.0], [46.9, 7215.0], [47.0, 7216.0], [47.1, 7217.0], [47.2, 7218.0], [47.3, 7219.0], [47.4, 7221.0], [47.5, 7221.0], [47.6, 7223.0], [47.7, 7224.0], [47.8, 7224.0], [47.9, 7226.0], [48.0, 7228.0], [48.1, 7230.0], [48.2, 7230.0], [48.3, 7231.0], [48.4, 7232.0], [48.5, 7233.0], [48.6, 7235.0], [48.7, 7236.0], [48.8, 7237.0], [48.9, 7238.0], [49.0, 7239.0], [49.1, 7240.0], [49.2, 7241.0], [49.3, 7243.0], [49.4, 7244.0], [49.5, 7245.0], [49.6, 7247.0], [49.7, 7249.0], [49.8, 7250.0], [49.9, 7251.0], [50.0, 7252.0], [50.1, 7253.0], [50.2, 7254.0], [50.3, 7254.0], [50.4, 7255.0], [50.5, 7256.0], [50.6, 7257.0], [50.7, 7257.0], [50.8, 7258.0], [50.9, 7259.0], [51.0, 7260.0], [51.1, 7260.0], [51.2, 7261.0], [51.3, 7263.0], [51.4, 7264.0], [51.5, 7265.0], [51.6, 7266.0], [51.7, 7267.0], [51.8, 7268.0], [51.9, 7268.0], [52.0, 7270.0], [52.1, 7272.0], [52.2, 7273.0], [52.3, 7274.0], [52.4, 7275.0], [52.5, 7275.0], [52.6, 7276.0], [52.7, 7276.0], [52.8, 7277.0], [52.9, 7279.0], [53.0, 7280.0], [53.1, 7280.0], [53.2, 7281.0], [53.3, 7282.0], [53.4, 7282.0], [53.5, 7283.0], [53.6, 7284.0], [53.7, 7285.0], [53.8, 7286.0], [53.9, 7286.0], [54.0, 7288.0], [54.1, 7289.0], [54.2, 7289.0], [54.3, 7290.0], [54.4, 7291.0], [54.5, 7292.0], [54.6, 7292.0], [54.7, 7293.0], [54.8, 7294.0], [54.9, 7294.0], [55.0, 7295.0], [55.1, 7296.0], [55.2, 7297.0], [55.3, 7298.0], [55.4, 7300.0], [55.5, 7301.0], [55.6, 7301.0], [55.7, 7302.0], [55.8, 7303.0], [55.9, 7304.0], [56.0, 7305.0], [56.1, 7307.0], [56.2, 7308.0], [56.3, 7309.0], [56.4, 7309.0], [56.5, 7311.0], [56.6, 7312.0], [56.7, 7312.0], [56.8, 7313.0], [56.9, 7314.0], [57.0, 7315.0], [57.1, 7317.0], [57.2, 7318.0], [57.3, 7320.0], [57.4, 7321.0], [57.5, 7322.0], [57.6, 7323.0], [57.7, 7324.0], [57.8, 7325.0], [57.9, 7326.0], [58.0, 7327.0], [58.1, 7329.0], [58.2, 7329.0], [58.3, 7330.0], [58.4, 7332.0], [58.5, 7332.0], [58.6, 7334.0], [58.7, 7336.0], [58.8, 7338.0], [58.9, 7339.0], [59.0, 7340.0], [59.1, 7341.0], [59.2, 7343.0], [59.3, 7343.0], [59.4, 7344.0], [59.5, 7344.0], [59.6, 7345.0], [59.7, 7346.0], [59.8, 7346.0], [59.9, 7348.0], [60.0, 7350.0], [60.1, 7351.0], [60.2, 7352.0], [60.3, 7355.0], [60.4, 7358.0], [60.5, 7360.0], [60.6, 7362.0], [60.7, 7362.0], [60.8, 7365.0], [60.9, 7366.0], [61.0, 7369.0], [61.1, 7371.0], [61.2, 7373.0], [61.3, 7374.0], [61.4, 7375.0], [61.5, 7376.0], [61.6, 7377.0], [61.7, 7380.0], [61.8, 7381.0], [61.9, 7382.0], [62.0, 7384.0], [62.1, 7386.0], [62.2, 7387.0], [62.3, 7388.0], [62.4, 7389.0], [62.5, 7391.0], [62.6, 7392.0], [62.7, 7393.0], [62.8, 7395.0], [62.9, 7396.0], [63.0, 7397.0], [63.1, 7397.0], [63.2, 7399.0], [63.3, 7400.0], [63.4, 7402.0], [63.5, 7403.0], [63.6, 7404.0], [63.7, 7405.0], [63.8, 7407.0], [63.9, 7408.0], [64.0, 7411.0], [64.1, 7412.0], [64.2, 7413.0], [64.3, 7415.0], [64.4, 7417.0], [64.5, 7418.0], [64.6, 7420.0], [64.7, 7421.0], [64.8, 7422.0], [64.9, 7424.0], [65.0, 7425.0], [65.1, 7428.0], [65.2, 7429.0], [65.3, 7430.0], [65.4, 7431.0], [65.5, 7433.0], [65.6, 7435.0], [65.7, 7436.0], [65.8, 7438.0], [65.9, 7439.0], [66.0, 7443.0], [66.1, 7444.0], [66.2, 7446.0], [66.3, 7449.0], [66.4, 7451.0], [66.5, 7454.0], [66.6, 7455.0], [66.7, 7456.0], [66.8, 7459.0], [66.9, 7459.0], [67.0, 7461.0], [67.1, 7463.0], [67.2, 7465.0], [67.3, 7469.0], [67.4, 7471.0], [67.5, 7473.0], [67.6, 7475.0], [67.7, 7476.0], [67.8, 7482.0], [67.9, 7485.0], [68.0, 7486.0], [68.1, 7487.0], [68.2, 7489.0], [68.3, 7492.0], [68.4, 7494.0], [68.5, 7495.0], [68.6, 7497.0], [68.7, 7501.0], [68.8, 7504.0], [68.9, 7505.0], [69.0, 7507.0], [69.1, 7510.0], [69.2, 7512.0], [69.3, 7516.0], [69.4, 7516.0], [69.5, 7523.0], [69.6, 7528.0], [69.7, 7530.0], [69.8, 7536.0], [69.9, 7541.0], [70.0, 7543.0], [70.1, 7545.0], [70.2, 7551.0], [70.3, 7553.0], [70.4, 7558.0], [70.5, 7561.0], [70.6, 7563.0], [70.7, 7566.0], [70.8, 7568.0], [70.9, 7574.0], [71.0, 7581.0], [71.1, 7592.0], [71.2, 7603.0], [71.3, 7614.0], [71.4, 7618.0], [71.5, 7624.0], [71.6, 7631.0], [71.7, 7641.0], [71.8, 7645.0], [71.9, 7653.0], [72.0, 7667.0], [72.1, 7672.0], [72.2, 7680.0], [72.3, 7692.0], [72.4, 7707.0], [72.5, 7717.0], [72.6, 7731.0], [72.7, 7746.0], [72.8, 7784.0], [72.9, 7798.0], [73.0, 7823.0], [73.1, 7917.0], [73.2, 7976.0], [73.3, 8004.0], [73.4, 8067.0], [73.5, 8181.0], [73.6, 8220.0], [73.7, 8317.0], [73.8, 8352.0], [73.9, 8461.0], [74.0, 8530.0], [74.1, 8590.0], [74.2, 8626.0], [74.3, 8741.0], [74.4, 8926.0], [74.5, 9134.0], [74.6, 9263.0], [74.7, 9303.0], [74.8, 9331.0], [74.9, 9383.0], [75.0, 9419.0], [75.1, 9536.0], [75.2, 9576.0], [75.3, 9638.0], [75.4, 9709.0], [75.5, 9740.0], [75.6, 9866.0], [75.7, 9943.0], [75.8, 10012.0], [75.9, 10019.0], [76.0, 10051.0], [76.1, 10093.0], [76.2, 10155.0], [76.3, 10294.0], [76.4, 10353.0], [76.5, 10486.0], [76.6, 10548.0], [76.7, 10611.0], [76.8, 10692.0], [76.9, 10780.0], [77.0, 10830.0], [77.1, 10882.0], [77.2, 10920.0], [77.3, 11025.0], [77.4, 11084.0], [77.5, 11127.0], [77.6, 11167.0], [77.7, 11247.0], [77.8, 11291.0], [77.9, 11377.0], [78.0, 11435.0], [78.1, 11524.0], [78.2, 11600.0], [78.3, 11633.0], [78.4, 11659.0], [78.5, 11714.0], [78.6, 11762.0], [78.7, 11810.0], [78.8, 11927.0], [78.9, 11958.0], [79.0, 12080.0], [79.1, 12325.0], [79.2, 12525.0], [79.3, 12624.0], [79.4, 12703.0], [79.5, 12751.0], [79.6, 12814.0], [79.7, 12843.0], [79.8, 12957.0], [79.9, 13096.0], [80.0, 13142.0], [80.1, 13207.0], [80.2, 13243.0], [80.3, 13315.0], [80.4, 13366.0], [80.5, 13431.0], [80.6, 13527.0], [80.7, 13582.0], [80.8, 13720.0], [80.9, 13776.0], [81.0, 13846.0], [81.1, 13900.0], [81.2, 13947.0], [81.3, 13962.0], [81.4, 13981.0], [81.5, 14074.0], [81.6, 14122.0], [81.7, 14131.0], [81.8, 14144.0], [81.9, 14157.0], [82.0, 14173.0], [82.1, 14184.0], [82.2, 14201.0], [82.3, 14209.0], [82.4, 14216.0], [82.5, 14267.0], [82.6, 14271.0], [82.7, 14281.0], [82.8, 14300.0], [82.9, 14342.0], [83.0, 14398.0], [83.1, 14425.0], [83.2, 14439.0], [83.3, 14449.0], [83.4, 14463.0], [83.5, 14470.0], [83.6, 14476.0], [83.7, 14480.0], [83.8, 14482.0], [83.9, 14484.0], [84.0, 14491.0], [84.1, 14496.0], [84.2, 14500.0], [84.3, 14502.0], [84.4, 14509.0], [84.5, 14515.0], [84.6, 14518.0], [84.7, 14521.0], [84.8, 14526.0], [84.9, 14534.0], [85.0, 14537.0], [85.1, 14538.0], [85.2, 14547.0], [85.3, 14552.0], [85.4, 14555.0], [85.5, 14557.0], [85.6, 14562.0], [85.7, 14564.0], [85.8, 14565.0], [85.9, 14570.0], [86.0, 14572.0], [86.1, 14575.0], [86.2, 14578.0], [86.3, 14585.0], [86.4, 14587.0], [86.5, 14591.0], [86.6, 14592.0], [86.7, 14594.0], [86.8, 14600.0], [86.9, 14601.0], [87.0, 14606.0], [87.1, 14609.0], [87.2, 14615.0], [87.3, 14620.0], [87.4, 14622.0], [87.5, 14627.0], [87.6, 14633.0], [87.7, 14635.0], [87.8, 14639.0], [87.9, 14640.0], [88.0, 14646.0], [88.1, 14652.0], [88.2, 14662.0], [88.3, 14669.0], [88.4, 14672.0], [88.5, 14683.0], [88.6, 14688.0], [88.7, 14692.0], [88.8, 14695.0], [88.9, 14700.0], [89.0, 14707.0], [89.1, 14709.0], [89.2, 14719.0], [89.3, 14725.0], [89.4, 14731.0], [89.5, 14732.0], [89.6, 14737.0], [89.7, 14738.0], [89.8, 14742.0], [89.9, 14747.0], [90.0, 14749.0], [90.1, 14750.0], [90.2, 14754.0], [90.3, 14758.0], [90.4, 14759.0], [90.5, 14761.0], [90.6, 14767.0], [90.7, 14769.0], [90.8, 14771.0], [90.9, 14774.0], [91.0, 14776.0], [91.1, 14784.0], [91.2, 14787.0], [91.3, 14792.0], [91.4, 14798.0], [91.5, 14801.0], [91.6, 14804.0], [91.7, 14804.0], [91.8, 14806.0], [91.9, 14809.0], [92.0, 14814.0], [92.1, 14818.0], [92.2, 14822.0], [92.3, 14824.0], [92.4, 14827.0], [92.5, 14831.0], [92.6, 14838.0], [92.7, 14843.0], [92.8, 14852.0], [92.9, 14854.0], [93.0, 14857.0], [93.1, 14866.0], [93.2, 14872.0], [93.3, 14878.0], [93.4, 14886.0], [93.5, 14890.0], [93.6, 14902.0], [93.7, 14909.0], [93.8, 14918.0], [93.9, 14923.0], [94.0, 14937.0], [94.1, 14944.0], [94.2, 14958.0], [94.3, 14963.0], [94.4, 14972.0], [94.5, 14979.0], [94.6, 14992.0], [94.7, 14996.0], [94.8, 15002.0], [94.9, 15009.0], [95.0, 15021.0], [95.1, 15027.0], [95.2, 15033.0], [95.3, 15042.0], [95.4, 15051.0], [95.5, 15055.0], [95.6, 15060.0], [95.7, 15065.0], [95.8, 15071.0], [95.9, 15075.0], [96.0, 15085.0], [96.1, 15087.0], [96.2, 15095.0], [96.3, 15104.0], [96.4, 15114.0], [96.5, 15125.0], [96.6, 15131.0], [96.7, 15140.0], [96.8, 15146.0], [96.9, 15154.0], [97.0, 15158.0], [97.1, 15165.0], [97.2, 15180.0], [97.3, 15189.0], [97.4, 15193.0], [97.5, 15213.0], [97.6, 15222.0], [97.7, 15228.0], [97.8, 15233.0], [97.9, 15239.0], [98.0, 15242.0], [98.1, 15250.0], [98.2, 15259.0], [98.3, 15265.0], [98.4, 15270.0], [98.5, 15293.0], [98.6, 15307.0], [98.7, 15317.0], [98.8, 15333.0], [98.9, 15338.0], [99.0, 15350.0], [99.1, 15355.0], [99.2, 15387.0], [99.3, 15407.0], [99.4, 15423.0], [99.5, 15481.0], [99.6, 15495.0], [99.7, 15511.0], [99.8, 15530.0], [99.9, 15694.0]], "isOverall": false, "label": "List News", "isController": false}, {"data": [[0.0, 132.0], [0.1, 132.0], [0.2, 133.0], [0.3, 133.0], [0.4, 136.0], [0.5, 208.0], [0.6, 208.0], [0.7, 208.0], [0.8, 208.0], [0.9, 217.0], [1.0, 223.0], [1.1, 223.0], [1.2, 254.0], [1.3, 288.0], [1.4, 288.0], [1.5, 291.0], [1.6, 291.0], [1.7, 314.0], [1.8, 349.0], [1.9, 349.0], [2.0, 472.0], [2.1, 477.0], [2.2, 477.0], [2.3, 490.0], [2.4, 490.0], [2.5, 507.0], [2.6, 556.0], [2.7, 556.0], [2.8, 601.0], [2.9, 664.0], [3.0, 664.0], [3.1, 704.0], [3.2, 704.0], [3.3, 746.0], [3.4, 826.0], [3.5, 826.0], [3.6, 878.0], [3.7, 881.0], [3.8, 881.0], [3.9, 899.0], [4.0, 899.0], [4.1, 936.0], [4.2, 962.0], [4.3, 962.0], [4.4, 1012.0], [4.5, 1038.0], [4.6, 1038.0], [4.7, 1067.0], [4.8, 1067.0], [4.9, 1076.0], [5.0, 1177.0], [5.1, 1177.0], [5.2, 1199.0], [5.3, 1222.0], [5.4, 1222.0], [5.5, 1350.0], [5.6, 1350.0], [5.7, 1358.0], [5.8, 1398.0], [5.9, 1398.0], [6.0, 1441.0], [6.1, 1534.0], [6.2, 1534.0], [6.3, 1551.0], [6.4, 1551.0], [6.5, 1561.0], [6.6, 1642.0], [6.7, 1642.0], [6.8, 1653.0], [6.9, 1671.0], [7.0, 1671.0], [7.1, 1704.0], [7.2, 1704.0], [7.3, 1717.0], [7.4, 1751.0], [7.5, 1751.0], [7.6, 1765.0], [7.7, 1765.0], [7.8, 1765.0], [7.9, 1858.0], [8.0, 1858.0], [8.1, 1894.0], [8.2, 1898.0], [8.3, 1898.0], [8.4, 1900.0], [8.5, 1938.0], [8.6, 1938.0], [8.7, 1965.0], [8.8, 1965.0], [8.9, 1978.0], [9.0, 2002.0], [9.1, 2002.0], [9.2, 2007.0], [9.3, 2037.0], [9.4, 2037.0], [9.5, 2041.0], [9.6, 2041.0], [9.7, 2083.0], [9.8, 2137.0], [9.9, 2137.0], [10.0, 2157.0], [10.1, 2160.0], [10.2, 2160.0], [10.3, 2194.0], [10.4, 2194.0], [10.5, 2200.0], [10.6, 2221.0], [10.7, 2221.0], [10.8, 2236.0], [10.9, 2241.0], [11.0, 2241.0], [11.1, 2252.0], [11.2, 2252.0], [11.3, 2286.0], [11.4, 2306.0], [11.5, 2306.0], [11.6, 2310.0], [11.7, 2367.0], [11.8, 2367.0], [11.9, 2395.0], [12.0, 2395.0], [12.1, 2402.0], [12.2, 2407.0], [12.3, 2407.0], [12.4, 2417.0], [12.5, 2417.0], [12.6, 2426.0], [12.7, 2463.0], [12.8, 2463.0], [12.9, 2524.0], [13.0, 2545.0], [13.1, 2545.0], [13.2, 2586.0], [13.3, 2586.0], [13.4, 2602.0], [13.5, 2647.0], [13.6, 2647.0], [13.7, 2648.0], [13.8, 2676.0], [13.9, 2676.0], [14.0, 2688.0], [14.1, 2688.0], [14.2, 2692.0], [14.3, 2704.0], [14.4, 2704.0], [14.5, 2721.0], [14.6, 2825.0], [14.7, 2825.0], [14.8, 2834.0], [14.9, 2834.0], [15.0, 2879.0], [15.1, 2885.0], [15.2, 2885.0], [15.3, 2934.0], [15.4, 2970.0], [15.5, 2970.0], [15.6, 2986.0], [15.7, 2986.0], [15.8, 2998.0], [15.9, 3024.0], [16.0, 3024.0], [16.1, 3061.0], [16.2, 3076.0], [16.3, 3076.0], [16.4, 3082.0], [16.5, 3082.0], [16.6, 3091.0], [16.7, 3095.0], [16.8, 3095.0], [16.9, 3138.0], [17.0, 3163.0], [17.1, 3163.0], [17.2, 3180.0], [17.3, 3180.0], [17.4, 3203.0], [17.5, 3258.0], [17.6, 3258.0], [17.7, 3270.0], [17.8, 3270.0], [17.9, 3270.0], [18.0, 3282.0], [18.1, 3282.0], [18.2, 3299.0], [18.3, 3310.0], [18.4, 3310.0], [18.5, 3336.0], [18.6, 3350.0], [18.7, 3350.0], [18.8, 3370.0], [18.9, 3370.0], [19.0, 3374.0], [19.1, 3376.0], [19.2, 3376.0], [19.3, 3377.0], [19.4, 3377.0], [19.5, 3377.0], [19.6, 3387.0], [19.7, 3387.0], [19.8, 3390.0], [19.9, 3392.0], [20.0, 3392.0], [20.1, 3395.0], [20.2, 3395.0], [20.3, 3395.0], [20.4, 3396.0], [20.5, 3396.0], [20.6, 3416.0], [20.7, 3457.0], [20.8, 3457.0], [20.9, 3462.0], [21.0, 3463.0], [21.1, 3463.0], [21.2, 3475.0], [21.3, 3475.0], [21.4, 3526.0], [21.5, 3536.0], [21.6, 3536.0], [21.7, 3536.0], [21.8, 3546.0], [21.9, 3546.0], [22.0, 3569.0], [22.1, 3569.0], [22.2, 3573.0], [22.3, 3593.0], [22.4, 3593.0], [22.5, 3603.0], [22.6, 3606.0], [22.7, 3606.0], [22.8, 3609.0], [22.9, 3609.0], [23.0, 3611.0], [23.1, 3611.0], [23.2, 3611.0], [23.3, 3626.0], [23.4, 3630.0], [23.5, 3630.0], [23.6, 3633.0], [23.7, 3633.0], [23.8, 3641.0], [23.9, 3644.0], [24.0, 3644.0], [24.1, 3665.0], [24.2, 3670.0], [24.3, 3670.0], [24.4, 3685.0], [24.5, 3685.0], [24.6, 3692.0], [24.7, 3718.0], [24.8, 3718.0], [24.9, 3725.0], [25.0, 3727.0], [25.1, 3727.0], [25.2, 3727.0], [25.3, 3727.0], [25.4, 3730.0], [25.5, 3731.0], [25.6, 3731.0], [25.7, 3745.0], [25.8, 3745.0], [25.9, 3750.0], [26.0, 3750.0], [26.1, 3750.0], [26.2, 3763.0], [26.3, 3777.0], [26.4, 3777.0], [26.5, 3778.0], [26.6, 3778.0], [26.7, 3784.0], [26.8, 3791.0], [26.9, 3791.0], [27.0, 3792.0], [27.1, 3805.0], [27.2, 3805.0], [27.3, 3811.0], [27.4, 3811.0], [27.5, 3811.0], [27.6, 3813.0], [27.7, 3813.0], [27.8, 3818.0], [27.9, 3826.0], [28.0, 3826.0], [28.1, 3827.0], [28.2, 3827.0], [28.3, 3835.0], [28.4, 3838.0], [28.5, 3838.0], [28.6, 3842.0], [28.7, 3845.0], [28.8, 3845.0], [28.9, 3847.0], [29.0, 3847.0], [29.1, 3849.0], [29.2, 3849.0], [29.3, 3849.0], [29.4, 3849.0], [29.5, 3858.0], [29.6, 3858.0], [29.7, 3860.0], [29.8, 3860.0], [29.9, 3865.0], [30.0, 3868.0], [30.1, 3868.0], [30.2, 3869.0], [30.3, 3884.0], [30.4, 3884.0], [30.5, 3891.0], [30.6, 3891.0], [30.7, 3891.0], [30.8, 3904.0], [30.9, 3904.0], [31.0, 3904.0], [31.1, 3909.0], [31.2, 3909.0], [31.3, 3911.0], [31.4, 3911.0], [31.5, 3916.0], [31.6, 3921.0], [31.7, 3921.0], [31.8, 3924.0], [31.9, 3925.0], [32.0, 3925.0], [32.1, 3928.0], [32.2, 3928.0], [32.3, 3932.0], [32.4, 3944.0], [32.5, 3944.0], [32.6, 3945.0], [32.7, 3950.0], [32.8, 3950.0], [32.9, 3952.0], [33.0, 3952.0], [33.1, 3959.0], [33.2, 3961.0], [33.3, 3961.0], [33.4, 3966.0], [33.5, 3980.0], [33.6, 3980.0], [33.7, 3980.0], [33.8, 3980.0], [33.9, 3981.0], [34.0, 3996.0], [34.1, 3996.0], [34.2, 3998.0], [34.3, 4005.0], [34.4, 4005.0], [34.5, 4007.0], [34.6, 4007.0], [34.7, 4011.0], [34.8, 4020.0], [34.9, 4020.0], [35.0, 4026.0], [35.1, 4031.0], [35.2, 4031.0], [35.3, 4036.0], [35.4, 4036.0], [35.5, 4037.0], [35.6, 4043.0], [35.7, 4043.0], [35.8, 4044.0], [35.9, 4064.0], [36.0, 4064.0], [36.1, 4067.0], [36.2, 4067.0], [36.3, 4089.0], [36.4, 4090.0], [36.5, 4090.0], [36.6, 4090.0], [36.7, 4091.0], [36.8, 4091.0], [36.9, 4102.0], [37.0, 4102.0], [37.1, 4114.0], [37.2, 4114.0], [37.3, 4114.0], [37.4, 4115.0], [37.5, 4116.0], [37.6, 4116.0], [37.7, 4134.0], [37.8, 4134.0], [37.9, 4135.0], [38.0, 4136.0], [38.1, 4136.0], [38.2, 4143.0], [38.3, 4143.0], [38.4, 4144.0], [38.5, 4150.0], [38.6, 4150.0], [38.7, 4153.0], [38.8, 4154.0], [38.9, 4154.0], [39.0, 4154.0], [39.1, 4154.0], [39.2, 4159.0], [39.3, 4160.0], [39.4, 4160.0], [39.5, 4164.0], [39.6, 4172.0], [39.7, 4172.0], [39.8, 4184.0], [39.9, 4184.0], [40.0, 4186.0], [40.1, 4192.0], [40.2, 4192.0], [40.3, 4193.0], [40.4, 4194.0], [40.5, 4194.0], [40.6, 4201.0], [40.7, 4201.0], [40.8, 4205.0], [40.9, 4211.0], [41.0, 4211.0], [41.1, 4212.0], [41.2, 4215.0], [41.3, 4215.0], [41.4, 4217.0], [41.5, 4217.0], [41.6, 4218.0], [41.7, 4219.0], [41.8, 4219.0], [41.9, 4219.0], [42.0, 4221.0], [42.1, 4221.0], [42.2, 4237.0], [42.3, 4237.0], [42.4, 4237.0], [42.5, 4240.0], [42.6, 4240.0], [42.7, 4244.0], [42.8, 4246.0], [42.9, 4246.0], [43.0, 4248.0], [43.1, 4248.0], [43.2, 4250.0], [43.3, 4253.0], [43.4, 4253.0], [43.5, 4257.0], [43.6, 4266.0], [43.7, 4266.0], [43.8, 4266.0], [43.9, 4266.0], [44.0, 4270.0], [44.1, 4272.0], [44.2, 4272.0], [44.3, 4276.0], [44.4, 4278.0], [44.5, 4278.0], [44.6, 4280.0], [44.7, 4280.0], [44.8, 4287.0], [44.9, 4289.0], [45.0, 4289.0], [45.1, 4301.0], [45.2, 4303.0], [45.3, 4303.0], [45.4, 4308.0], [45.5, 4308.0], [45.6, 4309.0], [45.7, 4312.0], [45.8, 4312.0], [45.9, 4315.0], [46.0, 4316.0], [46.1, 4316.0], [46.2, 4321.0], [46.3, 4321.0], [46.4, 4324.0], [46.5, 4326.0], [46.6, 4326.0], [46.7, 4327.0], [46.8, 4327.0], [46.9, 4327.0], [47.0, 4328.0], [47.1, 4328.0], [47.2, 4330.0], [47.3, 4333.0], [47.4, 4333.0], [47.5, 4335.0], [47.6, 4336.0], [47.7, 4336.0], [47.8, 4339.0], [47.9, 4339.0], [48.0, 4340.0], [48.1, 4342.0], [48.2, 4342.0], [48.3, 4356.0], [48.4, 4360.0], [48.5, 4360.0], [48.6, 4368.0], [48.7, 4368.0], [48.8, 4370.0], [48.9, 4372.0], [49.0, 4372.0], [49.1, 4373.0], [49.2, 4382.0], [49.3, 4382.0], [49.4, 4383.0], [49.5, 4383.0], [49.6, 4399.0], [49.7, 4417.0], [49.8, 4417.0], [49.9, 4434.0], [50.0, 4435.0], [50.1, 4435.0], [50.2, 4436.0], [50.3, 4436.0], [50.4, 4436.0], [50.5, 4440.0], [50.6, 4440.0], [50.7, 4447.0], [50.8, 4447.0], [50.9, 4449.0], [51.0, 4451.0], [51.1, 4451.0], [51.2, 4453.0], [51.3, 4465.0], [51.4, 4465.0], [51.5, 4472.0], [51.6, 4472.0], [51.7, 4479.0], [51.8, 4481.0], [51.9, 4481.0], [52.0, 4482.0], [52.1, 4497.0], [52.2, 4497.0], [52.3, 4514.0], [52.4, 4514.0], [52.5, 4516.0], [52.6, 4520.0], [52.7, 4520.0], [52.8, 4523.0], [52.9, 4533.0], [53.0, 4533.0], [53.1, 4540.0], [53.2, 4540.0], [53.3, 4540.0], [53.4, 4540.0], [53.5, 4540.0], [53.6, 4543.0], [53.7, 4552.0], [53.8, 4552.0], [53.9, 4559.0], [54.0, 4559.0], [54.1, 4560.0], [54.2, 4563.0], [54.3, 4563.0], [54.4, 4565.0], [54.5, 4566.0], [54.6, 4566.0], [54.7, 4574.0], [54.8, 4574.0], [54.9, 4580.0], [55.0, 4598.0], [55.1, 4598.0], [55.2, 4599.0], [55.3, 4603.0], [55.4, 4603.0], [55.5, 4604.0], [55.6, 4604.0], [55.7, 4617.0], [55.8, 4617.0], [55.9, 4617.0], [56.0, 4617.0], [56.1, 4618.0], [56.2, 4618.0], [56.3, 4620.0], [56.4, 4620.0], [56.5, 4627.0], [56.6, 4627.0], [56.7, 4627.0], [56.8, 4641.0], [56.9, 4650.0], [57.0, 4650.0], [57.1, 4653.0], [57.2, 4653.0], [57.3, 4655.0], [57.4, 4655.0], [57.5, 4655.0], [57.6, 4656.0], [57.7, 4663.0], [57.8, 4663.0], [57.9, 4669.0], [58.0, 4669.0], [58.1, 4672.0], [58.2, 4674.0], [58.3, 4674.0], [58.4, 4689.0], [58.5, 4689.0], [58.6, 4689.0], [58.7, 4696.0], [58.8, 4696.0], [58.9, 4703.0], [59.0, 4714.0], [59.1, 4714.0], [59.2, 4718.0], [59.3, 4736.0], [59.4, 4736.0], [59.5, 4737.0], [59.6, 4737.0], [59.7, 4738.0], [59.8, 4738.0], [59.9, 4738.0], [60.0, 4738.0], [60.1, 4745.0], [60.2, 4745.0], [60.3, 4759.0], [60.4, 4759.0], [60.5, 4762.0], [60.6, 4774.0], [60.7, 4774.0], [60.8, 4778.0], [60.9, 4780.0], [61.0, 4780.0], [61.1, 4784.0], [61.2, 4784.0], [61.3, 4784.0], [61.4, 4794.0], [61.5, 4794.0], [61.6, 4796.0], [61.7, 4798.0], [61.8, 4798.0], [61.9, 4808.0], [62.0, 4808.0], [62.1, 4817.0], [62.2, 4832.0], [62.3, 4832.0], [62.4, 4842.0], [62.5, 4849.0], [62.6, 4849.0], [62.7, 4867.0], [62.8, 4867.0], [62.9, 4873.0], [63.0, 4876.0], [63.1, 4876.0], [63.2, 4959.0], [63.3, 4959.0], [63.4, 4961.0], [63.5, 4965.0], [63.6, 4965.0], [63.7, 4979.0], [63.8, 4984.0], [63.9, 4984.0], [64.0, 4984.0], [64.1, 4984.0], [64.2, 4985.0], [64.3, 5005.0], [64.4, 5005.0], [64.5, 5015.0], [64.6, 5020.0], [64.7, 5020.0], [64.8, 5033.0], [64.9, 5033.0], [65.0, 5083.0], [65.1, 5085.0], [65.2, 5085.0], [65.3, 5128.0], [65.4, 5147.0], [65.5, 5147.0], [65.6, 5180.0], [65.7, 5180.0], [65.8, 5201.0], [65.9, 5259.0], [66.0, 5259.0], [66.1, 5260.0], [66.2, 5283.0], [66.3, 5283.0], [66.4, 5307.0], [66.5, 5307.0], [66.6, 5327.0], [66.7, 5390.0], [66.8, 5390.0], [66.9, 5405.0], [67.0, 5470.0], [67.1, 5470.0], [67.2, 5487.0], [67.3, 5487.0], [67.4, 5490.0], [67.5, 5501.0], [67.6, 5501.0], [67.7, 5506.0], [67.8, 5507.0], [67.9, 5507.0], [68.0, 5512.0], [68.1, 5512.0], [68.2, 5513.0], [68.3, 5544.0], [68.4, 5544.0], [68.5, 5554.0], [68.6, 5573.0], [68.7, 5573.0], [68.8, 5589.0], [68.9, 5589.0], [69.0, 5619.0], [69.1, 5633.0], [69.2, 5633.0], [69.3, 5655.0], [69.4, 5678.0], [69.5, 5678.0], [69.6, 5686.0], [69.7, 5686.0], [69.8, 5689.0], [69.9, 5704.0], [70.0, 5704.0], [70.1, 5704.0], [70.2, 5706.0], [70.3, 5706.0], [70.4, 5708.0], [70.5, 5708.0], [70.6, 5710.0], [70.7, 5744.0], [70.8, 5744.0], [70.9, 5749.0], [71.0, 5753.0], [71.1, 5753.0], [71.2, 5760.0], [71.3, 5760.0], [71.4, 5761.0], [71.5, 5788.0], [71.6, 5788.0], [71.7, 5791.0], [71.8, 5794.0], [71.9, 5794.0], [72.0, 5800.0], [72.1, 5800.0], [72.2, 5802.0], [72.3, 5803.0], [72.4, 5803.0], [72.5, 5803.0], [72.6, 5820.0], [72.7, 5820.0], [72.8, 5832.0], [72.9, 5832.0], [73.0, 5834.0], [73.1, 5835.0], [73.2, 5835.0], [73.3, 5846.0], [73.4, 5850.0], [73.5, 5850.0], [73.6, 5877.0], [73.7, 5877.0], [73.8, 5920.0], [73.9, 5936.0], [74.0, 5936.0], [74.1, 5938.0], [74.2, 5946.0], [74.3, 5946.0], [74.4, 5982.0], [74.5, 5982.0], [74.6, 6026.0], [74.7, 6044.0], [74.8, 6044.0], [74.9, 6046.0], [75.0, 6046.0], [75.1, 6046.0], [75.2, 6047.0], [75.3, 6047.0], [75.4, 6050.0], [75.5, 6063.0], [75.6, 6063.0], [75.7, 6082.0], [75.8, 6082.0], [75.9, 6082.0], [76.0, 6086.0], [76.1, 6086.0], [76.2, 6098.0], [76.3, 6098.0], [76.4, 6098.0], [76.5, 6103.0], [76.6, 6103.0], [76.7, 6110.0], [76.8, 6117.0], [76.9, 6117.0], [77.0, 6120.0], [77.1, 6127.0], [77.2, 6127.0], [77.3, 6128.0], [77.4, 6128.0], [77.5, 6128.0], [77.6, 6135.0], [77.7, 6135.0], [77.8, 6139.0], [77.9, 6161.0], [78.0, 6161.0], [78.1, 6177.0], [78.2, 6177.0], [78.3, 6177.0], [78.4, 6180.0], [78.5, 6180.0], [78.6, 6181.0], [78.7, 6184.0], [78.8, 6184.0], [78.9, 6189.0], [79.0, 6189.0], [79.1, 6191.0], [79.2, 6198.0], [79.3, 6198.0], [79.4, 6198.0], [79.5, 6209.0], [79.6, 6209.0], [79.7, 6216.0], [79.8, 6216.0], [79.9, 6221.0], [80.0, 6234.0], [80.1, 6234.0], [80.2, 6258.0], [80.3, 6263.0], [80.4, 6263.0], [80.5, 6271.0], [80.6, 6271.0], [80.7, 6277.0], [80.8, 6283.0], [80.9, 6283.0], [81.0, 6285.0], [81.1, 6291.0], [81.2, 6291.0], [81.3, 6294.0], [81.4, 6294.0], [81.5, 6295.0], [81.6, 6295.0], [81.7, 6295.0], [81.8, 6297.0], [81.9, 6306.0], [82.0, 6306.0], [82.1, 6319.0], [82.2, 6319.0], [82.3, 6336.0], [82.4, 6340.0], [82.5, 6340.0], [82.6, 6342.0], [82.7, 6353.0], [82.8, 6353.0], [82.9, 6356.0], [83.0, 6356.0], [83.1, 6360.0], [83.2, 6361.0], [83.3, 6361.0], [83.4, 6362.0], [83.5, 6364.0], [83.6, 6364.0], [83.7, 6366.0], [83.8, 6366.0], [83.9, 6368.0], [84.0, 6375.0], [84.1, 6375.0], [84.2, 6382.0], [84.3, 6382.0], [84.4, 6382.0], [84.5, 6384.0], [84.6, 6384.0], [84.7, 6393.0], [84.8, 6397.0], [84.9, 6397.0], [85.0, 6398.0], [85.1, 6399.0], [85.2, 6399.0], [85.3, 6403.0], [85.4, 6403.0], [85.5, 6410.0], [85.6, 6411.0], [85.7, 6411.0], [85.8, 6413.0], [85.9, 6424.0], [86.0, 6424.0], [86.1, 6425.0], [86.2, 6425.0], [86.3, 6425.0], [86.4, 6435.0], [86.5, 6435.0], [86.6, 6435.0], [86.7, 6438.0], [86.8, 6438.0], [86.9, 6442.0], [87.0, 6442.0], [87.1, 6446.0], [87.2, 6446.0], [87.3, 6446.0], [87.4, 6459.0], [87.5, 6460.0], [87.6, 6460.0], [87.7, 6460.0], [87.8, 6460.0], [87.9, 6462.0], [88.0, 6463.0], [88.1, 6463.0], [88.2, 6468.0], [88.3, 6468.0], [88.4, 6480.0], [88.5, 6518.0], [88.6, 6518.0], [88.7, 6545.0], [88.8, 6548.0], [88.9, 6548.0], [89.0, 6550.0], [89.1, 6550.0], [89.2, 6550.0], [89.3, 6552.0], [89.4, 6552.0], [89.5, 6554.0], [89.6, 6554.0], [89.7, 6554.0], [89.8, 6557.0], [89.9, 6557.0], [90.0, 6563.0], [90.1, 6563.0], [90.2, 6563.0], [90.3, 6564.0], [90.4, 6566.0], [90.5, 6566.0], [90.6, 6577.0], [90.7, 6577.0], [90.8, 6580.0], [90.9, 6584.0], [91.0, 6584.0], [91.1, 6585.0], [91.2, 6585.0], [91.3, 6585.0], [91.4, 6586.0], [91.5, 6586.0], [91.6, 6591.0], [91.7, 6593.0], [91.8, 6593.0], [91.9, 6594.0], [92.0, 6594.0], [92.1, 6594.0], [92.2, 6594.0], [92.3, 6594.0], [92.4, 6601.0], [92.5, 6603.0], [92.6, 6603.0], [92.7, 6612.0], [92.8, 6623.0], [92.9, 6623.0], [93.0, 6637.0], [93.1, 6637.0], [93.2, 6686.0], [93.3, 6687.0], [93.4, 6687.0], [93.5, 6702.0], [93.6, 6703.0], [93.7, 6703.0], [93.8, 6705.0], [93.9, 6705.0], [94.0, 6712.0], [94.1, 6712.0], [94.2, 6712.0], [94.3, 6729.0], [94.4, 6740.0], [94.5, 6740.0], [94.6, 6741.0], [94.7, 6741.0], [94.8, 6742.0], [94.9, 6743.0], [95.0, 6743.0], [95.1, 6744.0], [95.2, 6753.0], [95.3, 6753.0], [95.4, 6765.0], [95.5, 6765.0], [95.6, 6773.0], [95.7, 6792.0], [95.8, 6792.0], [95.9, 6800.0], [96.0, 6809.0], [96.1, 6809.0], [96.2, 6827.0], [96.3, 6827.0], [96.4, 6850.0], [96.5, 6873.0], [96.6, 6873.0], [96.7, 6890.0], [96.8, 6893.0], [96.9, 6893.0], [97.0, 6895.0], [97.1, 6895.0], [97.2, 6914.0], [97.3, 6940.0], [97.4, 6940.0], [97.5, 6957.0], [97.6, 6960.0], [97.7, 6960.0], [97.8, 6961.0], [97.9, 6961.0], [98.0, 6979.0], [98.1, 7040.0], [98.2, 7040.0], [98.3, 7072.0], [98.4, 7089.0], [98.5, 7089.0], [98.6, 7091.0], [98.7, 7091.0], [98.8, 7125.0], [98.9, 7142.0], [99.0, 7142.0], [99.1, 7161.0], [99.2, 7173.0], [99.3, 7173.0], [99.4, 7200.0], [99.5, 7200.0], [99.6, 7202.0], [99.7, 7420.0], [99.8, 7420.0], [99.9, 10762.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 431.0, "series": [{"data": [[200.0, 3.0], [300.0, 1.0], [400.0, 7.0], [500.0, 6.0], [600.0, 2.0], [700.0, 4.0], [800.0, 11.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 4.0], [1200.0, 4.0], [1300.0, 14.0], [1400.0, 3.0], [1500.0, 5.0], [1600.0, 6.0], [1700.0, 2.0], [1800.0, 4.0], [1900.0, 11.0], [2000.0, 9.0], [2100.0, 9.0], [2300.0, 18.0], [2200.0, 13.0], [2400.0, 6.0], [2500.0, 13.0], [2600.0, 17.0], [2800.0, 15.0], [2700.0, 19.0], [2900.0, 19.0], [3000.0, 45.0], [3100.0, 58.0], [3200.0, 47.0], [3300.0, 32.0], [3400.0, 19.0], [3500.0, 105.0], [3600.0, 247.0], [3700.0, 105.0], [3800.0, 60.0], [3900.0, 43.0], [4000.0, 32.0], [4300.0, 19.0], [4100.0, 26.0], [4200.0, 21.0], [4400.0, 19.0], [4600.0, 35.0], [4500.0, 33.0], [4700.0, 25.0], [4800.0, 29.0], [5000.0, 60.0], [5100.0, 58.0], [4900.0, 32.0], [5200.0, 62.0], [5300.0, 55.0], [5400.0, 43.0], [5500.0, 55.0], [5600.0, 44.0], [5800.0, 53.0], [5700.0, 42.0], [5900.0, 54.0], [6000.0, 32.0], [6100.0, 29.0], [6300.0, 18.0], [6200.0, 22.0], [6500.0, 20.0], [6400.0, 30.0], [6600.0, 15.0], [6900.0, 10.0], [6800.0, 3.0], [6700.0, 5.0], [7100.0, 105.0], [7000.0, 9.0], [7400.0, 248.0], [7200.0, 431.0], [7300.0, 356.0], [7500.0, 114.0], [7600.0, 53.0], [7800.0, 7.0], [7700.0, 26.0], [7900.0, 9.0], [8000.0, 7.0], [8100.0, 5.0], [8200.0, 7.0], [8300.0, 7.0], [8400.0, 5.0], [8500.0, 8.0], [8600.0, 7.0], [8700.0, 3.0], [9000.0, 2.0], [8900.0, 3.0], [9200.0, 6.0], [8800.0, 1.0], [9100.0, 3.0], [9500.0, 7.0], [9400.0, 6.0], [9300.0, 13.0], [9600.0, 6.0], [9700.0, 8.0], [10100.0, 7.0], [9900.0, 7.0], [9800.0, 3.0], [10000.0, 15.0], [10200.0, 3.0], [10300.0, 6.0], [10600.0, 10.0], [10500.0, 5.0], [10400.0, 2.0], [10700.0, 5.0], [11000.0, 9.0], [10800.0, 10.0], [10900.0, 5.0], [11100.0, 7.0], [11200.0, 8.0], [11600.0, 11.0], [11300.0, 6.0], [11400.0, 7.0], [11500.0, 4.0], [11700.0, 12.0], [11800.0, 4.0], [11900.0, 6.0], [12100.0, 2.0], [12000.0, 5.0], [12200.0, 1.0], [12400.0, 2.0], [12300.0, 3.0], [12500.0, 4.0], [12600.0, 4.0], [12700.0, 8.0], [12800.0, 9.0], [12900.0, 5.0], [13100.0, 8.0], [13200.0, 8.0], [13000.0, 3.0], [13300.0, 7.0], [13400.0, 7.0], [13500.0, 6.0], [13600.0, 3.0], [13700.0, 6.0], [13800.0, 8.0], [13900.0, 15.0], [14100.0, 29.0], [14200.0, 28.0], [14000.0, 6.0], [14300.0, 10.0], [14400.0, 53.0], [14500.0, 118.0], [14700.0, 116.0], [14600.0, 96.0], [14800.0, 98.0], [14900.0, 53.0], [15000.0, 66.0], [15100.0, 55.0], [15200.0, 51.0], [15300.0, 32.0], [15400.0, 17.0], [15800.0, 1.0], [15600.0, 2.0], [15500.0, 11.0], [16100.0, 1.0], [18000.0, 1.0], [17500.0, 1.0]], "isOverall": false, "label": "List News", "isController": false}, {"data": [[600.0, 2.0], [700.0, 2.0], [800.0, 4.0], [900.0, 2.0], [1000.0, 4.0], [1100.0, 2.0], [1200.0, 1.0], [1300.0, 3.0], [1400.0, 1.0], [1500.0, 3.0], [1600.0, 3.0], [1700.0, 5.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 4.0], [2200.0, 6.0], [2300.0, 4.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 6.0], [2700.0, 2.0], [2800.0, 4.0], [2900.0, 4.0], [3000.0, 6.0], [3100.0, 3.0], [3200.0, 6.0], [3300.0, 14.0], [3400.0, 5.0], [3500.0, 7.0], [3600.0, 14.0], [3700.0, 15.0], [3800.0, 23.0], [3900.0, 22.0], [4000.0, 16.0], [4100.0, 23.0], [4200.0, 28.0], [4300.0, 29.0], [4500.0, 19.0], [4400.0, 16.0], [4600.0, 22.0], [4800.0, 8.0], [4700.0, 19.0], [4900.0, 7.0], [5000.0, 6.0], [5100.0, 3.0], [5200.0, 4.0], [5300.0, 3.0], [5500.0, 9.0], [5400.0, 4.0], [5600.0, 6.0], [5700.0, 13.0], [5800.0, 11.0], [5900.0, 5.0], [6100.0, 19.0], [6000.0, 12.0], [6300.0, 21.0], [6200.0, 15.0], [6500.0, 24.0], [6400.0, 20.0], [6600.0, 7.0], [6700.0, 15.0], [6800.0, 8.0], [6900.0, 6.0], [7100.0, 4.0], [7000.0, 4.0], [7200.0, 2.0], [7400.0, 1.0], [10700.0, 1.0], [100.0, 3.0], [200.0, 7.0], [300.0, 2.0], [400.0, 3.0], [500.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5067.0, "series": [{"data": [[0.0, 26.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 77.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5067.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.129729729729746, "minX": 1.57797534E12, "maxY": 177.72885572139285, "series": [{"data": [[1.57797534E12, 17.58503401360543], [1.57797546E12, 18.822222222222223], [1.5779754E12, 21.0]], "isOverall": false, "label": "\u767B\u5F55", "isController": false}, {"data": [[1.57797564E12, 177.72885572139285], [1.57797534E12, 17.129729729729746], [1.57797546E12, 50.0], [1.5779754E12, 42.57429718875501], [1.57797558E12, 100.0], [1.57797552E12, 88.99999999999997], [1.5779757E12, 163.69525547445278]], "isOverall": false, "label": "\u67E5\u770B\u65B0\u95FB", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5779757E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 156.0, "minX": 1.0, "maxY": 14843.0, "series": [{"data": [[2.0, 13969.0], [3.0, 4809.666666666667], [4.0, 7211.5], [5.0, 3794.0], [6.0, 5020.0], [7.0, 3909.25], [8.0, 5085.333333333333], [9.0, 4001.25], [10.0, 5275.333333333333], [11.0, 3519.2], [12.0, 7544.0], [13.0, 3545.2], [14.0, 4233.5], [15.0, 5367.333333333333], [16.0, 2502.0], [17.0, 14209.0], [18.0, 7627.0], [19.0, 2956.875], [20.0, 14300.0], [21.0, 4009.2], [22.0, 4079.8], [23.0, 4711.5], [24.0, 3425.5], [25.0, 3456.6666666666665], [26.0, 14237.0], [27.0, 3703.166666666667], [28.0, 4932.5], [29.0, 6261.333333333334], [30.0, 8387.5], [31.0, 3628.625], [32.0, 8048.0], [33.0, 6417.333333333334], [34.0, 4770.6], [35.0, 3260.1111111111113], [36.0, 8187.0], [37.0, 14173.0], [38.0, 4515.2], [39.0, 4385.142857142857], [41.0, 3096.133828996283], [40.0, 14416.0], [42.0, 3476.6363636363635], [43.0, 3825.2000000000007], [44.0, 6638.0], [45.0, 4372.888888888889], [46.0, 4083.5454545454545], [47.0, 4585.5], [48.0, 4617.200000000001], [49.0, 4211.1], [50.0, 3812.415094339622], [51.0, 4315.944444444444], [52.0, 4762.357142857143], [53.0, 4550.666666666667], [54.0, 4384.294117647059], [55.0, 4416.25], [56.0, 4704.074074074073], [57.0, 4644.125], [58.0, 4667.5], [59.0, 4248.95], [60.0, 4452.133333333333], [61.0, 5018.875], [62.0, 5114.375], [63.0, 4829.777777777778], [64.0, 4831.833333333333], [65.0, 5265.266666666666], [66.0, 5361.352941176469], [67.0, 5178.958333333333], [68.0, 5913.823529411764], [69.0, 5564.4], [70.0, 5436.684210526315], [71.0, 5552.691629955946], [72.0, 5841.0], [73.0, 5677.5], [74.0, 6761.2], [75.0, 5898.375], [76.0, 5946.555555555556], [77.0, 6479.166666666666], [78.0, 6198.75], [79.0, 6019.4], [80.0, 5077.0], [81.0, 7285.0], [82.0, 6227.333333333333], [83.0, 6662.714285714286], [84.0, 6637.857142857143], [85.0, 7103.0], [86.0, 7188.666666666666], [87.0, 6834.125], [88.0, 6927.875], [89.0, 6988.0], [90.0, 7760.5], [91.0, 7176.0], [92.0, 7143.555555555556], [93.0, 7637.5], [94.0, 7385.5], [95.0, 7159.599999999999], [96.0, 7390.375], [97.0, 7649.285714285715], [98.0, 7437.125], [99.0, 7105.90909090909], [100.0, 7332.92480620154], [101.0, 8416.42857142857], [102.0, 9766.0], [103.0, 9195.75], [104.0, 8368.57142857143], [105.0, 11015.0], [106.0, 9172.5], [107.0, 8416.42857142857], [108.0, 11108.5], [109.0, 9160.75], [110.0, 8485.428571428572], [111.0, 11078.5], [112.0, 9090.0], [113.0, 8363.857142857143], [114.0, 10946.0], [115.0, 9134.25], [116.0, 8369.714285714286], [117.0, 11029.5], [118.0, 7223.666666666667], [119.0, 9160.625], [120.0, 9756.0], [121.0, 9100.5], [122.0, 8344.142857142857], [123.0, 9085.25], [124.0, 9091.25], [125.0, 8731.4], [126.0, 9136.0], [127.0, 9173.75], [128.0, 8750.6], [129.0, 9106.5], [130.0, 8811.4], [131.0, 9137.75], [132.0, 7567.5], [133.0, 9212.75], [134.0, 9812.666666666666], [135.0, 14615.0], [136.0, 9073.5], [137.0, 9118.4], [138.0, 11316.5], [139.0, 8926.0], [140.0, 10209.0], [141.0, 10210.666666666666], [142.0, 9141.166666666666], [143.0, 10116.75], [144.0, 9314.833333333334], [145.0, 10334.0], [146.0, 9974.5], [147.0, 9539.666666666666], [148.0, 9950.0], [149.0, 10635.0], [150.0, 9617.833333333334], [151.0, 10096.25], [152.0, 10666.666666666666], [153.0, 9732.333333333332], [156.0, 9666.181818181818], [159.0, 9908.3], [158.0, 14773.0], [157.0, 14843.0], [155.0, 14632.0], [154.0, 14521.0], [160.0, 12017.0], [161.0, 11115.0], [162.0, 9959.0], [164.0, 11300.833333333334], [165.0, 10222.571428571428], [166.0, 11425.333333333334], [167.0, 10826.6], [168.0, 10620.0], [169.0, 11499.666666666666], [170.0, 10708.333333333332], [171.0, 11034.5], [172.0, 12270.0], [173.0, 10537.666666666666], [174.0, 12363.5], [175.0, 12585.0], [176.0, 11054.6], [177.0, 11002.6], [178.0, 11795.666666666666], [179.0, 10851.142857142857], [180.0, 11980.333333333334], [181.0, 11915.333333333334], [182.0, 11061.285714285714], [183.0, 11798.666666666666], [184.0, 11997.0], [185.0, 11225.142857142857], [186.0, 11973.0], [187.0, 12136.0], [188.0, 11271.444444444445], [189.0, 12759.0], [190.0, 12792.0], [191.0, 11422.0], [192.0, 12323.333333333334], [193.0, 12334.0], [194.0, 11660.0], [195.0, 12293.666666666666], [196.0, 13059.0], [197.0, 11729.666666666666], [198.0, 12987.0], [199.0, 12565.333333333334], [200.0, 14451.92336217552], [1.0, 13962.0]], "isOverall": false, "label": "List News", "isController": false}, {"data": [[103.52089749230096, 7711.4076110866645]], "isOverall": false, "label": "List News-Aggregated", "isController": false}, {"data": [[2.0, 212.5], [3.0, 278.0], [4.0, 314.0], [5.0, 486.5], [6.0, 578.5], [7.0, 704.6666666666666], [8.0, 826.0], [9.0, 914.25], [10.0, 1038.0], [11.0, 1014.0], [12.0, 1129.3333333333333], [13.0, 1399.5], [14.0, 1310.0], [15.0, 1481.6666666666667], [17.0, 1688.0], [18.0, 1900.0], [19.0, 1937.25], [20.0, 2160.0], [21.0, 2053.6666666666665], [22.0, 2233.5], [23.0, 2300.75], [24.0, 2241.0], [25.0, 2126.0], [26.0, 2067.0], [27.0, 2491.6666666666665], [28.0, 2221.0], [29.0, 2696.0], [31.0, 3566.3333333333335], [32.0, 3084.8333333333335], [33.0, 2941.75], [36.0, 3644.0], [37.0, 3340.6666666666665], [38.0, 3536.0], [39.0, 3391.8571428571427], [40.0, 3608.5], [41.0, 4105.029126213593], [42.0, 3117.5000000000005], [44.0, 3613.0], [45.0, 4285.555555555556], [46.0, 4036.0], [47.0, 4320.333333333333], [48.0, 4302.75], [49.0, 3800.285714285714], [50.0, 3961.0], [51.0, 3643.6666666666665], [52.0, 4677.375], [53.0, 4468.333333333333], [54.0, 6163.8], [55.0, 5526.0], [56.0, 4519.857142857143], [57.0, 4943.111111111111], [58.0, 4224.4], [59.0, 5253.0], [61.0, 5412.7], [62.0, 5136.9], [63.0, 5120.0], [64.0, 3729.2], [66.0, 4007.0], [67.0, 5500.909090909091], [65.0, 5573.0], [68.0, 5626.571428571428], [70.0, 5860.25], [71.0, 6329.7964071856295], [69.0, 6346.0], [1.0, 156.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[49.36698717948718, 4498.104166666666]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3361.0666666666666, "minX": 1.57797534E12, "maxY": 25994.216666666667, "series": [{"data": [[1.57797564E12, 25580.6], [1.57797534E12, 15177.666666666666], [1.57797546E12, 23441.433333333334], [1.5779754E12, 18624.7], [1.57797558E12, 25994.216666666667], [1.57797552E12, 25612.416666666668], [1.5779757E12, 17435.533333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57797564E12, 4931.2], [1.57797534E12, 3479.633333333333], [1.57797546E12, 4688.366666666667], [1.5779754E12, 4042.4], [1.57797558E12, 5010.933333333333], [1.57797552E12, 4937.333333333333], [1.5779757E12, 3361.0666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5779757E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2556.427027027027, "minX": 1.57797534E12, "maxY": 14665.78467153284, "series": [{"data": [[1.57797564E12, 11897.502487562197], [1.57797534E12, 2556.427027027027], [1.57797546E12, 4338.3039772727325], [1.5779754E12, 4819.714859437757], [1.57797558E12, 7375.529987760099], [1.57797552E12, 6245.400000000004], [1.5779757E12, 14665.78467153284]], "isOverall": false, "label": "List News", "isController": false}, {"data": [[1.57797534E12, 3372.5408163265324], [1.57797546E12, 6317.344444444444], [1.5779754E12, 5194.704166666667]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5779757E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2556.278378378381, "minX": 1.57797534E12, "maxY": 14665.728102189774, "series": [{"data": [[1.57797564E12, 11897.439054726365], [1.57797534E12, 2556.278378378381], [1.57797546E12, 4338.231534090909], [1.5779754E12, 4819.630522088355], [1.57797558E12, 7375.446756425953], [1.57797552E12, 6245.2906832298095], [1.5779757E12, 14665.728102189774]], "isOverall": false, "label": "List News", "isController": false}, {"data": [[1.57797534E12, 3370.6632653061224], [1.57797546E12, 6311.51111111111], [1.5779754E12, 5192.429166666668]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5779757E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 12.555555555555554, "minX": 1.57797534E12, "maxY": 14.006802721088436, "series": [{"data": [[1.57797564E12, 13.690298507462687], [1.57797534E12, 13.775675675675677], [1.57797546E12, 12.772727272727266], [1.5779754E12, 13.174698795180715], [1.57797558E12, 13.468788249693999], [1.57797552E12, 13.253416149068316], [1.5779757E12, 13.173357664233565]], "isOverall": false, "label": "List News", "isController": false}, {"data": [[1.57797534E12, 14.006802721088436], [1.57797546E12, 12.555555555555554], [1.5779754E12, 13.449999999999996]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5779757E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 132.0, "minX": 1.57797534E12, "maxY": 18052.0, "series": [{"data": [[1.57797564E12, 18052.0], [1.57797534E12, 6563.0], [1.57797546E12, 10762.0], [1.5779754E12, 10184.0], [1.57797558E12, 11615.0], [1.57797552E12, 8352.0], [1.5779757E12, 17581.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57797564E12, 7145.0], [1.57797534E12, 132.0], [1.57797546E12, 1551.0], [1.5779754E12, 1560.0], [1.57797558E12, 7068.0], [1.57797552E12, 3600.0], [1.5779757E12, 13959.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57797564E12, 15251.0], [1.57797534E12, 4288.0], [1.57797546E12, 5966.5], [1.5779754E12, 6294.1], [1.57797558E12, 7578.8], [1.57797552E12, 7435.0], [1.5779757E12, 14954.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57797564E12, 15525.5], [1.57797534E12, 4867.400000000003], [1.57797546E12, 6852.149999999998], [1.5779754E12, 7189.47], [1.57797558E12, 7787.82], [1.57797552E12, 7618.0], [1.5779757E12, 15208.81]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57797564E12, 15352.0], [1.57797534E12, 4578.5], [1.57797546E12, 6382.0], [1.5779754E12, 6702.15], [1.57797558E12, 7667.4], [1.57797552E12, 7487.7], [1.5779757E12, 15072.65]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5779757E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 177.5, "minX": 2.0, "maxY": 7352.5, "series": [{"data": [[2.0, 177.5], [8.0, 3796.0], [9.0, 4618.0], [10.0, 5221.5], [11.0, 5654.0], [12.0, 7227.5], [3.0, 4774.0], [13.0, 7260.0], [14.0, 7352.5], [15.0, 7238.0], [16.0, 7237.5], [4.0, 2671.0], [17.0, 6298.5], [18.0, 5982.0], [19.0, 4330.0], [20.0, 3757.5], [5.0, 3228.0], [22.0, 3462.5], [23.0, 3655.0], [6.0, 3293.5], [26.0, 4124.5], [7.0, 3237.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 175.0, "minX": 2.0, "maxY": 7352.5, "series": [{"data": [[2.0, 175.0], [8.0, 3796.0], [9.0, 4618.0], [10.0, 5221.5], [11.0, 5654.0], [12.0, 7227.5], [3.0, 4774.0], [13.0, 7260.0], [14.0, 7352.5], [15.0, 7238.0], [16.0, 7237.5], [4.0, 2671.0], [17.0, 6298.5], [18.0, 5981.5], [19.0, 4329.5], [20.0, 3757.5], [5.0, 3228.0], [22.0, 3462.5], [23.0, 3655.0], [6.0, 3293.0], [26.0, 4124.5], [7.0, 3237.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.8, "minX": 1.57797534E12, "maxY": 15.066666666666666, "series": [{"data": [[1.57797564E12, 15.066666666666666], [1.57797534E12, 11.75], [1.57797546E12, 12.883333333333333], [1.5779754E12, 12.8], [1.57797558E12, 13.616666666666667], [1.57797552E12, 14.25], [1.5779757E12, 5.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5779757E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 9.133333333333333, "minX": 1.57797534E12, "maxY": 13.616666666666667, "series": [{"data": [[1.57797564E12, 13.4], [1.57797534E12, 11.066666666666666], [1.57797546E12, 13.233333333333333], [1.5779754E12, 12.3], [1.57797558E12, 13.616666666666667], [1.57797552E12, 13.416666666666666], [1.5779757E12, 9.133333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5779757E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.57797534E12, "maxY": 13.616666666666667, "series": [{"data": [[1.57797564E12, 13.4], [1.57797534E12, 6.166666666666667], [1.57797546E12, 11.733333333333333], [1.5779754E12, 8.3], [1.57797558E12, 13.616666666666667], [1.57797552E12, 13.416666666666666], [1.5779757E12, 9.133333333333333]], "isOverall": false, "label": "List News-success", "isController": false}, {"data": [[1.57797534E12, 4.9], [1.57797546E12, 1.5], [1.5779754E12, 4.0]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5779757E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.133333333333333, "minX": 1.57797534E12, "maxY": 13.616666666666667, "series": [{"data": [[1.57797564E12, 13.4], [1.57797534E12, 11.066666666666666], [1.57797546E12, 13.233333333333333], [1.5779754E12, 12.3], [1.57797558E12, 13.616666666666667], [1.57797552E12, 13.416666666666666], [1.5779757E12, 9.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5779757E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

